
SmartRelay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003880  080001d0  080001d0  000101d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08003a50  08003a50  00013a50  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003af4  08003af4  00013af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003af8  08003af8  00013af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000a8  20000000  08003afc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000144  200000a8  08003ba4  000200a8  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200001ec  08003ba4  000201ec  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001092a  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000272f  00000000  00000000  000309fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000717f  00000000  00000000  0003312a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000aa8  00000000  00000000  0003a2b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000dc8  00000000  00000000  0003ad58  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000057ea  00000000  00000000  0003bb20  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003cb9  00000000  00000000  0004130a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00044fc3  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000025b4  00000000  00000000  00045040  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000a8 	.word	0x200000a8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003a38 	.word	0x08003a38

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000ac 	.word	0x200000ac
 800020c:	08003a38 	.word	0x08003a38

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	; 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800035e:	f1a4 0401 	sub.w	r4, r4, #1
 8000362:	d1e9      	bne.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f092 0f00 	teq	r2, #0
 800050a:	bf14      	ite	ne
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e720      	b.n	8000364 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aedc 	beq.w	8000312 <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6c1      	b.n	8000312 <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2uiz>:
 8000af0:	004a      	lsls	r2, r1, #1
 8000af2:	d211      	bcs.n	8000b18 <__aeabi_d2uiz+0x28>
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d211      	bcs.n	8000b1e <__aeabi_d2uiz+0x2e>
 8000afa:	d50d      	bpl.n	8000b18 <__aeabi_d2uiz+0x28>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d40e      	bmi.n	8000b24 <__aeabi_d2uiz+0x34>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	fa23 f002 	lsr.w	r0, r3, r2
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b22:	d102      	bne.n	8000b2a <__aeabi_d2uiz+0x3a>
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	4770      	bx	lr
 8000b2a:	f04f 0000 	mov.w	r0, #0
 8000b2e:	4770      	bx	lr

08000b30 <__aeabi_frsub>:
 8000b30:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b34:	e002      	b.n	8000b3c <__addsf3>
 8000b36:	bf00      	nop

08000b38 <__aeabi_fsub>:
 8000b38:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b3c <__addsf3>:
 8000b3c:	0042      	lsls	r2, r0, #1
 8000b3e:	bf1f      	itttt	ne
 8000b40:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b44:	ea92 0f03 	teqne	r2, r3
 8000b48:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b4c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b50:	d06a      	beq.n	8000c28 <__addsf3+0xec>
 8000b52:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b56:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b5a:	bfc1      	itttt	gt
 8000b5c:	18d2      	addgt	r2, r2, r3
 8000b5e:	4041      	eorgt	r1, r0
 8000b60:	4048      	eorgt	r0, r1
 8000b62:	4041      	eorgt	r1, r0
 8000b64:	bfb8      	it	lt
 8000b66:	425b      	neglt	r3, r3
 8000b68:	2b19      	cmp	r3, #25
 8000b6a:	bf88      	it	hi
 8000b6c:	4770      	bxhi	lr
 8000b6e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b72:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b76:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b7a:	bf18      	it	ne
 8000b7c:	4240      	negne	r0, r0
 8000b7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b82:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b86:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b8a:	bf18      	it	ne
 8000b8c:	4249      	negne	r1, r1
 8000b8e:	ea92 0f03 	teq	r2, r3
 8000b92:	d03f      	beq.n	8000c14 <__addsf3+0xd8>
 8000b94:	f1a2 0201 	sub.w	r2, r2, #1
 8000b98:	fa41 fc03 	asr.w	ip, r1, r3
 8000b9c:	eb10 000c 	adds.w	r0, r0, ip
 8000ba0:	f1c3 0320 	rsb	r3, r3, #32
 8000ba4:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bac:	d502      	bpl.n	8000bb4 <__addsf3+0x78>
 8000bae:	4249      	negs	r1, r1
 8000bb0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bb4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb8:	d313      	bcc.n	8000be2 <__addsf3+0xa6>
 8000bba:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bbe:	d306      	bcc.n	8000bce <__addsf3+0x92>
 8000bc0:	0840      	lsrs	r0, r0, #1
 8000bc2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bc6:	f102 0201 	add.w	r2, r2, #1
 8000bca:	2afe      	cmp	r2, #254	; 0xfe
 8000bcc:	d251      	bcs.n	8000c72 <__addsf3+0x136>
 8000bce:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bd2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bd6:	bf08      	it	eq
 8000bd8:	f020 0001 	biceq.w	r0, r0, #1
 8000bdc:	ea40 0003 	orr.w	r0, r0, r3
 8000be0:	4770      	bx	lr
 8000be2:	0049      	lsls	r1, r1, #1
 8000be4:	eb40 0000 	adc.w	r0, r0, r0
 8000be8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000bec:	f1a2 0201 	sub.w	r2, r2, #1
 8000bf0:	d1ed      	bne.n	8000bce <__addsf3+0x92>
 8000bf2:	fab0 fc80 	clz	ip, r0
 8000bf6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bfa:	ebb2 020c 	subs.w	r2, r2, ip
 8000bfe:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c02:	bfaa      	itet	ge
 8000c04:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c08:	4252      	neglt	r2, r2
 8000c0a:	4318      	orrge	r0, r3
 8000c0c:	bfbc      	itt	lt
 8000c0e:	40d0      	lsrlt	r0, r2
 8000c10:	4318      	orrlt	r0, r3
 8000c12:	4770      	bx	lr
 8000c14:	f092 0f00 	teq	r2, #0
 8000c18:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c1c:	bf06      	itte	eq
 8000c1e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c22:	3201      	addeq	r2, #1
 8000c24:	3b01      	subne	r3, #1
 8000c26:	e7b5      	b.n	8000b94 <__addsf3+0x58>
 8000c28:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c2c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c30:	bf18      	it	ne
 8000c32:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c36:	d021      	beq.n	8000c7c <__addsf3+0x140>
 8000c38:	ea92 0f03 	teq	r2, r3
 8000c3c:	d004      	beq.n	8000c48 <__addsf3+0x10c>
 8000c3e:	f092 0f00 	teq	r2, #0
 8000c42:	bf08      	it	eq
 8000c44:	4608      	moveq	r0, r1
 8000c46:	4770      	bx	lr
 8000c48:	ea90 0f01 	teq	r0, r1
 8000c4c:	bf1c      	itt	ne
 8000c4e:	2000      	movne	r0, #0
 8000c50:	4770      	bxne	lr
 8000c52:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c56:	d104      	bne.n	8000c62 <__addsf3+0x126>
 8000c58:	0040      	lsls	r0, r0, #1
 8000c5a:	bf28      	it	cs
 8000c5c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c60:	4770      	bx	lr
 8000c62:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c66:	bf3c      	itt	cc
 8000c68:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c6c:	4770      	bxcc	lr
 8000c6e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c72:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c76:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c7a:	4770      	bx	lr
 8000c7c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c80:	bf16      	itet	ne
 8000c82:	4608      	movne	r0, r1
 8000c84:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c88:	4601      	movne	r1, r0
 8000c8a:	0242      	lsls	r2, r0, #9
 8000c8c:	bf06      	itte	eq
 8000c8e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c92:	ea90 0f01 	teqeq	r0, r1
 8000c96:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c9a:	4770      	bx	lr

08000c9c <__aeabi_ui2f>:
 8000c9c:	f04f 0300 	mov.w	r3, #0
 8000ca0:	e004      	b.n	8000cac <__aeabi_i2f+0x8>
 8000ca2:	bf00      	nop

08000ca4 <__aeabi_i2f>:
 8000ca4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca8:	bf48      	it	mi
 8000caa:	4240      	negmi	r0, r0
 8000cac:	ea5f 0c00 	movs.w	ip, r0
 8000cb0:	bf08      	it	eq
 8000cb2:	4770      	bxeq	lr
 8000cb4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb8:	4601      	mov	r1, r0
 8000cba:	f04f 0000 	mov.w	r0, #0
 8000cbe:	e01c      	b.n	8000cfa <__aeabi_l2f+0x2a>

08000cc0 <__aeabi_ul2f>:
 8000cc0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc4:	bf08      	it	eq
 8000cc6:	4770      	bxeq	lr
 8000cc8:	f04f 0300 	mov.w	r3, #0
 8000ccc:	e00a      	b.n	8000ce4 <__aeabi_l2f+0x14>
 8000cce:	bf00      	nop

08000cd0 <__aeabi_l2f>:
 8000cd0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd4:	bf08      	it	eq
 8000cd6:	4770      	bxeq	lr
 8000cd8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cdc:	d502      	bpl.n	8000ce4 <__aeabi_l2f+0x14>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	ea5f 0c01 	movs.w	ip, r1
 8000ce8:	bf02      	ittt	eq
 8000cea:	4684      	moveq	ip, r0
 8000cec:	4601      	moveq	r1, r0
 8000cee:	2000      	moveq	r0, #0
 8000cf0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cf4:	bf08      	it	eq
 8000cf6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cfa:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cfe:	fabc f28c 	clz	r2, ip
 8000d02:	3a08      	subs	r2, #8
 8000d04:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d08:	db10      	blt.n	8000d2c <__aeabi_l2f+0x5c>
 8000d0a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d0e:	4463      	add	r3, ip
 8000d10:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d14:	f1c2 0220 	rsb	r2, r2, #32
 8000d18:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d1c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d20:	eb43 0002 	adc.w	r0, r3, r2
 8000d24:	bf08      	it	eq
 8000d26:	f020 0001 	biceq.w	r0, r0, #1
 8000d2a:	4770      	bx	lr
 8000d2c:	f102 0220 	add.w	r2, r2, #32
 8000d30:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d34:	f1c2 0220 	rsb	r2, r2, #32
 8000d38:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d3c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d40:	eb43 0002 	adc.w	r0, r3, r2
 8000d44:	bf08      	it	eq
 8000d46:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d4a:	4770      	bx	lr

08000d4c <__aeabi_fmul>:
 8000d4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d54:	bf1e      	ittt	ne
 8000d56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d5a:	ea92 0f0c 	teqne	r2, ip
 8000d5e:	ea93 0f0c 	teqne	r3, ip
 8000d62:	d06f      	beq.n	8000e44 <__aeabi_fmul+0xf8>
 8000d64:	441a      	add	r2, r3
 8000d66:	ea80 0c01 	eor.w	ip, r0, r1
 8000d6a:	0240      	lsls	r0, r0, #9
 8000d6c:	bf18      	it	ne
 8000d6e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d72:	d01e      	beq.n	8000db2 <__aeabi_fmul+0x66>
 8000d74:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d78:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d7c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d80:	fba0 3101 	umull	r3, r1, r0, r1
 8000d84:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d88:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d8c:	bf3e      	ittt	cc
 8000d8e:	0049      	lslcc	r1, r1, #1
 8000d90:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d94:	005b      	lslcc	r3, r3, #1
 8000d96:	ea40 0001 	orr.w	r0, r0, r1
 8000d9a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d9e:	2afd      	cmp	r2, #253	; 0xfd
 8000da0:	d81d      	bhi.n	8000dde <__aeabi_fmul+0x92>
 8000da2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000da6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000daa:	bf08      	it	eq
 8000dac:	f020 0001 	biceq.w	r0, r0, #1
 8000db0:	4770      	bx	lr
 8000db2:	f090 0f00 	teq	r0, #0
 8000db6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dba:	bf08      	it	eq
 8000dbc:	0249      	lsleq	r1, r1, #9
 8000dbe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dc2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dc6:	3a7f      	subs	r2, #127	; 0x7f
 8000dc8:	bfc2      	ittt	gt
 8000dca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dd2:	4770      	bxgt	lr
 8000dd4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd8:	f04f 0300 	mov.w	r3, #0
 8000ddc:	3a01      	subs	r2, #1
 8000dde:	dc5d      	bgt.n	8000e9c <__aeabi_fmul+0x150>
 8000de0:	f112 0f19 	cmn.w	r2, #25
 8000de4:	bfdc      	itt	le
 8000de6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dea:	4770      	bxle	lr
 8000dec:	f1c2 0200 	rsb	r2, r2, #0
 8000df0:	0041      	lsls	r1, r0, #1
 8000df2:	fa21 f102 	lsr.w	r1, r1, r2
 8000df6:	f1c2 0220 	rsb	r2, r2, #32
 8000dfa:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dfe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e02:	f140 0000 	adc.w	r0, r0, #0
 8000e06:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e0a:	bf08      	it	eq
 8000e0c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e10:	4770      	bx	lr
 8000e12:	f092 0f00 	teq	r2, #0
 8000e16:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e1a:	bf02      	ittt	eq
 8000e1c:	0040      	lsleq	r0, r0, #1
 8000e1e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e22:	3a01      	subeq	r2, #1
 8000e24:	d0f9      	beq.n	8000e1a <__aeabi_fmul+0xce>
 8000e26:	ea40 000c 	orr.w	r0, r0, ip
 8000e2a:	f093 0f00 	teq	r3, #0
 8000e2e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e32:	bf02      	ittt	eq
 8000e34:	0049      	lsleq	r1, r1, #1
 8000e36:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e3a:	3b01      	subeq	r3, #1
 8000e3c:	d0f9      	beq.n	8000e32 <__aeabi_fmul+0xe6>
 8000e3e:	ea41 010c 	orr.w	r1, r1, ip
 8000e42:	e78f      	b.n	8000d64 <__aeabi_fmul+0x18>
 8000e44:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e48:	ea92 0f0c 	teq	r2, ip
 8000e4c:	bf18      	it	ne
 8000e4e:	ea93 0f0c 	teqne	r3, ip
 8000e52:	d00a      	beq.n	8000e6a <__aeabi_fmul+0x11e>
 8000e54:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e58:	bf18      	it	ne
 8000e5a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e5e:	d1d8      	bne.n	8000e12 <__aeabi_fmul+0xc6>
 8000e60:	ea80 0001 	eor.w	r0, r0, r1
 8000e64:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e68:	4770      	bx	lr
 8000e6a:	f090 0f00 	teq	r0, #0
 8000e6e:	bf17      	itett	ne
 8000e70:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e74:	4608      	moveq	r0, r1
 8000e76:	f091 0f00 	teqne	r1, #0
 8000e7a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e7e:	d014      	beq.n	8000eaa <__aeabi_fmul+0x15e>
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	d101      	bne.n	8000e8a <__aeabi_fmul+0x13e>
 8000e86:	0242      	lsls	r2, r0, #9
 8000e88:	d10f      	bne.n	8000eaa <__aeabi_fmul+0x15e>
 8000e8a:	ea93 0f0c 	teq	r3, ip
 8000e8e:	d103      	bne.n	8000e98 <__aeabi_fmul+0x14c>
 8000e90:	024b      	lsls	r3, r1, #9
 8000e92:	bf18      	it	ne
 8000e94:	4608      	movne	r0, r1
 8000e96:	d108      	bne.n	8000eaa <__aeabi_fmul+0x15e>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea8:	4770      	bx	lr
 8000eaa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000eae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eb2:	4770      	bx	lr

08000eb4 <__aeabi_fdiv>:
 8000eb4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ebc:	bf1e      	ittt	ne
 8000ebe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ec2:	ea92 0f0c 	teqne	r2, ip
 8000ec6:	ea93 0f0c 	teqne	r3, ip
 8000eca:	d069      	beq.n	8000fa0 <__aeabi_fdiv+0xec>
 8000ecc:	eba2 0203 	sub.w	r2, r2, r3
 8000ed0:	ea80 0c01 	eor.w	ip, r0, r1
 8000ed4:	0249      	lsls	r1, r1, #9
 8000ed6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000eda:	d037      	beq.n	8000f4c <__aeabi_fdiv+0x98>
 8000edc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ee0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ee4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000eec:	428b      	cmp	r3, r1
 8000eee:	bf38      	it	cc
 8000ef0:	005b      	lslcc	r3, r3, #1
 8000ef2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ef6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000efa:	428b      	cmp	r3, r1
 8000efc:	bf24      	itt	cs
 8000efe:	1a5b      	subcs	r3, r3, r1
 8000f00:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f04:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f08:	bf24      	itt	cs
 8000f0a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f0e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f12:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f16:	bf24      	itt	cs
 8000f18:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f20:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f24:	bf24      	itt	cs
 8000f26:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f2a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f2e:	011b      	lsls	r3, r3, #4
 8000f30:	bf18      	it	ne
 8000f32:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f36:	d1e0      	bne.n	8000efa <__aeabi_fdiv+0x46>
 8000f38:	2afd      	cmp	r2, #253	; 0xfd
 8000f3a:	f63f af50 	bhi.w	8000dde <__aeabi_fmul+0x92>
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f44:	bf08      	it	eq
 8000f46:	f020 0001 	biceq.w	r0, r0, #1
 8000f4a:	4770      	bx	lr
 8000f4c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f50:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f54:	327f      	adds	r2, #127	; 0x7f
 8000f56:	bfc2      	ittt	gt
 8000f58:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f5c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f60:	4770      	bxgt	lr
 8000f62:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f66:	f04f 0300 	mov.w	r3, #0
 8000f6a:	3a01      	subs	r2, #1
 8000f6c:	e737      	b.n	8000dde <__aeabi_fmul+0x92>
 8000f6e:	f092 0f00 	teq	r2, #0
 8000f72:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f76:	bf02      	ittt	eq
 8000f78:	0040      	lsleq	r0, r0, #1
 8000f7a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f7e:	3a01      	subeq	r2, #1
 8000f80:	d0f9      	beq.n	8000f76 <__aeabi_fdiv+0xc2>
 8000f82:	ea40 000c 	orr.w	r0, r0, ip
 8000f86:	f093 0f00 	teq	r3, #0
 8000f8a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f8e:	bf02      	ittt	eq
 8000f90:	0049      	lsleq	r1, r1, #1
 8000f92:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f96:	3b01      	subeq	r3, #1
 8000f98:	d0f9      	beq.n	8000f8e <__aeabi_fdiv+0xda>
 8000f9a:	ea41 010c 	orr.w	r1, r1, ip
 8000f9e:	e795      	b.n	8000ecc <__aeabi_fdiv+0x18>
 8000fa0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fa4:	ea92 0f0c 	teq	r2, ip
 8000fa8:	d108      	bne.n	8000fbc <__aeabi_fdiv+0x108>
 8000faa:	0242      	lsls	r2, r0, #9
 8000fac:	f47f af7d 	bne.w	8000eaa <__aeabi_fmul+0x15e>
 8000fb0:	ea93 0f0c 	teq	r3, ip
 8000fb4:	f47f af70 	bne.w	8000e98 <__aeabi_fmul+0x14c>
 8000fb8:	4608      	mov	r0, r1
 8000fba:	e776      	b.n	8000eaa <__aeabi_fmul+0x15e>
 8000fbc:	ea93 0f0c 	teq	r3, ip
 8000fc0:	d104      	bne.n	8000fcc <__aeabi_fdiv+0x118>
 8000fc2:	024b      	lsls	r3, r1, #9
 8000fc4:	f43f af4c 	beq.w	8000e60 <__aeabi_fmul+0x114>
 8000fc8:	4608      	mov	r0, r1
 8000fca:	e76e      	b.n	8000eaa <__aeabi_fmul+0x15e>
 8000fcc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fd0:	bf18      	it	ne
 8000fd2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fd6:	d1ca      	bne.n	8000f6e <__aeabi_fdiv+0xba>
 8000fd8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fdc:	f47f af5c 	bne.w	8000e98 <__aeabi_fmul+0x14c>
 8000fe0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fe4:	f47f af3c 	bne.w	8000e60 <__aeabi_fmul+0x114>
 8000fe8:	e75f      	b.n	8000eaa <__aeabi_fmul+0x15e>
 8000fea:	bf00      	nop

08000fec <__aeabi_f2uiz>:
 8000fec:	0042      	lsls	r2, r0, #1
 8000fee:	d20e      	bcs.n	800100e <__aeabi_f2uiz+0x22>
 8000ff0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000ff4:	d30b      	bcc.n	800100e <__aeabi_f2uiz+0x22>
 8000ff6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000ffa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ffe:	d409      	bmi.n	8001014 <__aeabi_f2uiz+0x28>
 8001000:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001004:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001008:	fa23 f002 	lsr.w	r0, r3, r2
 800100c:	4770      	bx	lr
 800100e:	f04f 0000 	mov.w	r0, #0
 8001012:	4770      	bx	lr
 8001014:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001018:	d101      	bne.n	800101e <__aeabi_f2uiz+0x32>
 800101a:	0242      	lsls	r2, r0, #9
 800101c:	d102      	bne.n	8001024 <__aeabi_f2uiz+0x38>
 800101e:	f04f 30ff 	mov.w	r0, #4294967295
 8001022:	4770      	bx	lr
 8001024:	f04f 0000 	mov.w	r0, #0
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop

0800102c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800102c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800102e:	4b0e      	ldr	r3, [pc, #56]	; (8001068 <HAL_InitTick+0x3c>)
{
 8001030:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001032:	7818      	ldrb	r0, [r3, #0]
 8001034:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001038:	fbb3 f3f0 	udiv	r3, r3, r0
 800103c:	4a0b      	ldr	r2, [pc, #44]	; (800106c <HAL_InitTick+0x40>)
 800103e:	6810      	ldr	r0, [r2, #0]
 8001040:	fbb0 f0f3 	udiv	r0, r0, r3
 8001044:	f000 f89a 	bl	800117c <HAL_SYSTICK_Config>
 8001048:	4604      	mov	r4, r0
 800104a:	b958      	cbnz	r0, 8001064 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800104c:	2d0f      	cmp	r5, #15
 800104e:	d809      	bhi.n	8001064 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001050:	4602      	mov	r2, r0
 8001052:	4629      	mov	r1, r5
 8001054:	f04f 30ff 	mov.w	r0, #4294967295
 8001058:	f000 f84e 	bl	80010f8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800105c:	4b04      	ldr	r3, [pc, #16]	; (8001070 <HAL_InitTick+0x44>)
 800105e:	4620      	mov	r0, r4
 8001060:	601d      	str	r5, [r3, #0]
 8001062:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001064:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001066:	bd38      	pop	{r3, r4, r5, pc}
 8001068:	20000000 	.word	0x20000000
 800106c:	2000003c 	.word	0x2000003c
 8001070:	20000004 	.word	0x20000004

08001074 <HAL_Init>:
{
 8001074:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001076:	2003      	movs	r0, #3
 8001078:	f000 f82c 	bl	80010d4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800107c:	2000      	movs	r0, #0
 800107e:	f7ff ffd5 	bl	800102c <HAL_InitTick>
  HAL_MspInit();
 8001082:	f001 fd55 	bl	8002b30 <HAL_MspInit>
}
 8001086:	2000      	movs	r0, #0
 8001088:	bd08      	pop	{r3, pc}
	...

0800108c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800108c:	4a03      	ldr	r2, [pc, #12]	; (800109c <HAL_IncTick+0x10>)
 800108e:	4b04      	ldr	r3, [pc, #16]	; (80010a0 <HAL_IncTick+0x14>)
 8001090:	6811      	ldr	r1, [r2, #0]
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	440b      	add	r3, r1
 8001096:	6013      	str	r3, [r2, #0]
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	200000e4 	.word	0x200000e4
 80010a0:	20000000 	.word	0x20000000

080010a4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80010a4:	4b01      	ldr	r3, [pc, #4]	; (80010ac <HAL_GetTick+0x8>)
 80010a6:	6818      	ldr	r0, [r3, #0]
}
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	200000e4 	.word	0x200000e4

080010b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010b0:	b538      	push	{r3, r4, r5, lr}
 80010b2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80010b4:	f7ff fff6 	bl	80010a4 <HAL_GetTick>
 80010b8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ba:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80010bc:	bf1e      	ittt	ne
 80010be:	4b04      	ldrne	r3, [pc, #16]	; (80010d0 <HAL_Delay+0x20>)
 80010c0:	781b      	ldrbne	r3, [r3, #0]
 80010c2:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010c4:	f7ff ffee 	bl	80010a4 <HAL_GetTick>
 80010c8:	1b40      	subs	r0, r0, r5
 80010ca:	4284      	cmp	r4, r0
 80010cc:	d8fa      	bhi.n	80010c4 <HAL_Delay+0x14>
  {
  }
}
 80010ce:	bd38      	pop	{r3, r4, r5, pc}
 80010d0:	20000000 	.word	0x20000000

080010d4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d4:	4a07      	ldr	r2, [pc, #28]	; (80010f4 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010d6:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d8:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010da:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010de:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80010e2:	041b      	lsls	r3, r3, #16
 80010e4:	0c1b      	lsrs	r3, r3, #16
 80010e6:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80010ee:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80010f0:	60d3      	str	r3, [r2, #12]
 80010f2:	4770      	bx	lr
 80010f4:	e000ed00 	.word	0xe000ed00

080010f8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010f8:	4b17      	ldr	r3, [pc, #92]	; (8001158 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010fa:	b530      	push	{r4, r5, lr}
 80010fc:	68dc      	ldr	r4, [r3, #12]
 80010fe:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001102:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001106:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001108:	2b04      	cmp	r3, #4
 800110a:	bf28      	it	cs
 800110c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800110e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001110:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001114:	bf98      	it	ls
 8001116:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001118:	fa05 f303 	lsl.w	r3, r5, r3
 800111c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001120:	bf88      	it	hi
 8001122:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001124:	4019      	ands	r1, r3
 8001126:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001128:	fa05 f404 	lsl.w	r4, r5, r4
 800112c:	3c01      	subs	r4, #1
 800112e:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8001130:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001132:	ea42 0201 	orr.w	r2, r2, r1
 8001136:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800113a:	bfa9      	itett	ge
 800113c:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001140:	4b06      	ldrlt	r3, [pc, #24]	; (800115c <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001142:	b2d2      	uxtbge	r2, r2
 8001144:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001148:	bfbb      	ittet	lt
 800114a:	f000 000f 	andlt.w	r0, r0, #15
 800114e:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001150:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001154:	541a      	strblt	r2, [r3, r0]
 8001156:	bd30      	pop	{r4, r5, pc}
 8001158:	e000ed00 	.word	0xe000ed00
 800115c:	e000ed14 	.word	0xe000ed14

08001160 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001160:	2800      	cmp	r0, #0
 8001162:	db08      	blt.n	8001176 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001164:	2301      	movs	r3, #1
 8001166:	0942      	lsrs	r2, r0, #5
 8001168:	f000 001f 	and.w	r0, r0, #31
 800116c:	fa03 f000 	lsl.w	r0, r3, r0
 8001170:	4b01      	ldr	r3, [pc, #4]	; (8001178 <HAL_NVIC_EnableIRQ+0x18>)
 8001172:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001176:	4770      	bx	lr
 8001178:	e000e100 	.word	0xe000e100

0800117c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800117c:	3801      	subs	r0, #1
 800117e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001182:	d20a      	bcs.n	800119a <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001184:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001186:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001188:	4a06      	ldr	r2, [pc, #24]	; (80011a4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800118a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001190:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001192:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001194:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800119a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	e000e010 	.word	0xe000e010
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80011a8:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 80011ac:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d003      	beq.n	80011ba <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011b2:	2304      	movs	r3, #4
 80011b4:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 80011b6:	2001      	movs	r0, #1
 80011b8:	bd10      	pop	{r4, pc}
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011ba:	6803      	ldr	r3, [r0, #0]
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	f022 020e 	bic.w	r2, r2, #14
 80011c2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	f022 0201 	bic.w	r2, r2, #1
 80011ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80011cc:	4a18      	ldr	r2, [pc, #96]	; (8001230 <HAL_DMA_Abort_IT+0x88>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d01f      	beq.n	8001212 <HAL_DMA_Abort_IT+0x6a>
 80011d2:	3214      	adds	r2, #20
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d01e      	beq.n	8001216 <HAL_DMA_Abort_IT+0x6e>
 80011d8:	3214      	adds	r2, #20
 80011da:	4293      	cmp	r3, r2
 80011dc:	d01d      	beq.n	800121a <HAL_DMA_Abort_IT+0x72>
 80011de:	3214      	adds	r2, #20
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d01d      	beq.n	8001220 <HAL_DMA_Abort_IT+0x78>
 80011e4:	3214      	adds	r2, #20
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d01d      	beq.n	8001226 <HAL_DMA_Abort_IT+0x7e>
 80011ea:	3214      	adds	r2, #20
 80011ec:	4293      	cmp	r3, r2
 80011ee:	bf0c      	ite	eq
 80011f0:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 80011f4:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 80011f8:	4a0e      	ldr	r2, [pc, #56]	; (8001234 <HAL_DMA_Abort_IT+0x8c>)

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011fa:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80011fc:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80011fe:	2301      	movs	r3, #1
 8001200:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001204:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 8001206:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 800120a:	b17b      	cbz	r3, 800122c <HAL_DMA_Abort_IT+0x84>
    {
      hdma->XferAbortCallback(hdma);
 800120c:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800120e:	4620      	mov	r0, r4
 8001210:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001212:	2301      	movs	r3, #1
 8001214:	e7f0      	b.n	80011f8 <HAL_DMA_Abort_IT+0x50>
 8001216:	2310      	movs	r3, #16
 8001218:	e7ee      	b.n	80011f8 <HAL_DMA_Abort_IT+0x50>
 800121a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800121e:	e7eb      	b.n	80011f8 <HAL_DMA_Abort_IT+0x50>
 8001220:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001224:	e7e8      	b.n	80011f8 <HAL_DMA_Abort_IT+0x50>
 8001226:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800122a:	e7e5      	b.n	80011f8 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 800122c:	4618      	mov	r0, r3
    } 
  }
  return status;
}
 800122e:	bd10      	pop	{r4, pc}
 8001230:	40020008 	.word	0x40020008
 8001234:	40020000 	.word	0x40020000

08001238 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001238:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800123c:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 800123e:	4626      	mov	r6, r4
 8001240:	4b66      	ldr	r3, [pc, #408]	; (80013dc <HAL_GPIO_Init+0x1a4>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001242:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 80013ec <HAL_GPIO_Init+0x1b4>
 8001246:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 80013f0 <HAL_GPIO_Init+0x1b8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800124a:	680a      	ldr	r2, [r1, #0]
 800124c:	fa32 f506 	lsrs.w	r5, r2, r6
 8001250:	d102      	bne.n	8001258 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 8001252:	b003      	add	sp, #12
 8001254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8001258:	f04f 0801 	mov.w	r8, #1
 800125c:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001260:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 8001264:	4590      	cmp	r8, r2
 8001266:	d17f      	bne.n	8001368 <HAL_GPIO_Init+0x130>
      switch (GPIO_Init->Mode)
 8001268:	684d      	ldr	r5, [r1, #4]
 800126a:	2d12      	cmp	r5, #18
 800126c:	f000 80aa 	beq.w	80013c4 <HAL_GPIO_Init+0x18c>
 8001270:	f200 8083 	bhi.w	800137a <HAL_GPIO_Init+0x142>
 8001274:	2d02      	cmp	r5, #2
 8001276:	f000 80a2 	beq.w	80013be <HAL_GPIO_Init+0x186>
 800127a:	d877      	bhi.n	800136c <HAL_GPIO_Init+0x134>
 800127c:	2d00      	cmp	r5, #0
 800127e:	f000 8089 	beq.w	8001394 <HAL_GPIO_Init+0x15c>
 8001282:	2d01      	cmp	r5, #1
 8001284:	f000 8099 	beq.w	80013ba <HAL_GPIO_Init+0x182>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001288:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800128c:	2aff      	cmp	r2, #255	; 0xff
 800128e:	bf93      	iteet	ls
 8001290:	4682      	movls	sl, r0
 8001292:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8001296:	3d08      	subhi	r5, #8
 8001298:	f8d0 b000 	ldrls.w	fp, [r0]
 800129c:	bf92      	itee	ls
 800129e:	00b5      	lslls	r5, r6, #2
 80012a0:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 80012a4:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012a6:	fa09 f805 	lsl.w	r8, r9, r5
 80012aa:	ea2b 0808 	bic.w	r8, fp, r8
 80012ae:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012b2:	bf88      	it	hi
 80012b4:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012b8:	ea48 0505 	orr.w	r5, r8, r5
 80012bc:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012c0:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80012c4:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80012c8:	d04e      	beq.n	8001368 <HAL_GPIO_Init+0x130>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012ca:	4d45      	ldr	r5, [pc, #276]	; (80013e0 <HAL_GPIO_Init+0x1a8>)
 80012cc:	4f44      	ldr	r7, [pc, #272]	; (80013e0 <HAL_GPIO_Init+0x1a8>)
 80012ce:	69ad      	ldr	r5, [r5, #24]
 80012d0:	f026 0803 	bic.w	r8, r6, #3
 80012d4:	f045 0501 	orr.w	r5, r5, #1
 80012d8:	61bd      	str	r5, [r7, #24]
 80012da:	69bd      	ldr	r5, [r7, #24]
 80012dc:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80012e0:	f005 0501 	and.w	r5, r5, #1
 80012e4:	9501      	str	r5, [sp, #4]
 80012e6:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012ea:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012ee:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012f0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 80012f4:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012f8:	fa09 f90b 	lsl.w	r9, r9, fp
 80012fc:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001300:	4d38      	ldr	r5, [pc, #224]	; (80013e4 <HAL_GPIO_Init+0x1ac>)
 8001302:	42a8      	cmp	r0, r5
 8001304:	d063      	beq.n	80013ce <HAL_GPIO_Init+0x196>
 8001306:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800130a:	42a8      	cmp	r0, r5
 800130c:	d061      	beq.n	80013d2 <HAL_GPIO_Init+0x19a>
 800130e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001312:	42a8      	cmp	r0, r5
 8001314:	d05f      	beq.n	80013d6 <HAL_GPIO_Init+0x19e>
 8001316:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800131a:	42a8      	cmp	r0, r5
 800131c:	bf0c      	ite	eq
 800131e:	2503      	moveq	r5, #3
 8001320:	2504      	movne	r5, #4
 8001322:	fa05 f50b 	lsl.w	r5, r5, fp
 8001326:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 800132a:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 800132e:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001330:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8001334:	bf14      	ite	ne
 8001336:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001338:	4395      	biceq	r5, r2
 800133a:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 800133c:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800133e:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001342:	bf14      	ite	ne
 8001344:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001346:	4395      	biceq	r5, r2
 8001348:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 800134a:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800134c:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001350:	bf14      	ite	ne
 8001352:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001354:	4395      	biceq	r5, r2
 8001356:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8001358:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800135a:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800135e:	bf14      	ite	ne
 8001360:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001362:	ea25 0202 	biceq.w	r2, r5, r2
 8001366:	60da      	str	r2, [r3, #12]
	position++;
 8001368:	3601      	adds	r6, #1
 800136a:	e76e      	b.n	800124a <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 800136c:	2d03      	cmp	r5, #3
 800136e:	d022      	beq.n	80013b6 <HAL_GPIO_Init+0x17e>
 8001370:	2d11      	cmp	r5, #17
 8001372:	d189      	bne.n	8001288 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001374:	68cc      	ldr	r4, [r1, #12]
 8001376:	3404      	adds	r4, #4
          break;
 8001378:	e786      	b.n	8001288 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 800137a:	4f1b      	ldr	r7, [pc, #108]	; (80013e8 <HAL_GPIO_Init+0x1b0>)
 800137c:	42bd      	cmp	r5, r7
 800137e:	d009      	beq.n	8001394 <HAL_GPIO_Init+0x15c>
 8001380:	d812      	bhi.n	80013a8 <HAL_GPIO_Init+0x170>
 8001382:	f8df 9070 	ldr.w	r9, [pc, #112]	; 80013f4 <HAL_GPIO_Init+0x1bc>
 8001386:	454d      	cmp	r5, r9
 8001388:	d004      	beq.n	8001394 <HAL_GPIO_Init+0x15c>
 800138a:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 800138e:	454d      	cmp	r5, r9
 8001390:	f47f af7a 	bne.w	8001288 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001394:	688c      	ldr	r4, [r1, #8]
 8001396:	b1c4      	cbz	r4, 80013ca <HAL_GPIO_Init+0x192>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001398:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 800139a:	bf0c      	ite	eq
 800139c:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80013a0:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013a4:	2408      	movs	r4, #8
 80013a6:	e76f      	b.n	8001288 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 80013a8:	4575      	cmp	r5, lr
 80013aa:	d0f3      	beq.n	8001394 <HAL_GPIO_Init+0x15c>
 80013ac:	4565      	cmp	r5, ip
 80013ae:	d0f1      	beq.n	8001394 <HAL_GPIO_Init+0x15c>
 80013b0:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80013f8 <HAL_GPIO_Init+0x1c0>
 80013b4:	e7eb      	b.n	800138e <HAL_GPIO_Init+0x156>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013b6:	2400      	movs	r4, #0
 80013b8:	e766      	b.n	8001288 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80013ba:	68cc      	ldr	r4, [r1, #12]
          break;
 80013bc:	e764      	b.n	8001288 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80013be:	68cc      	ldr	r4, [r1, #12]
 80013c0:	3408      	adds	r4, #8
          break;
 80013c2:	e761      	b.n	8001288 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80013c4:	68cc      	ldr	r4, [r1, #12]
 80013c6:	340c      	adds	r4, #12
          break;
 80013c8:	e75e      	b.n	8001288 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80013ca:	2404      	movs	r4, #4
 80013cc:	e75c      	b.n	8001288 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013ce:	2500      	movs	r5, #0
 80013d0:	e7a7      	b.n	8001322 <HAL_GPIO_Init+0xea>
 80013d2:	2501      	movs	r5, #1
 80013d4:	e7a5      	b.n	8001322 <HAL_GPIO_Init+0xea>
 80013d6:	2502      	movs	r5, #2
 80013d8:	e7a3      	b.n	8001322 <HAL_GPIO_Init+0xea>
 80013da:	bf00      	nop
 80013dc:	40010400 	.word	0x40010400
 80013e0:	40021000 	.word	0x40021000
 80013e4:	40010800 	.word	0x40010800
 80013e8:	10210000 	.word	0x10210000
 80013ec:	10310000 	.word	0x10310000
 80013f0:	10320000 	.word	0x10320000
 80013f4:	10110000 	.word	0x10110000
 80013f8:	10220000 	.word	0x10220000

080013fc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013fc:	6883      	ldr	r3, [r0, #8]
 80013fe:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001400:	bf14      	ite	ne
 8001402:	2001      	movne	r0, #1
 8001404:	2000      	moveq	r0, #0
 8001406:	4770      	bx	lr

08001408 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001408:	b10a      	cbz	r2, 800140e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800140a:	6101      	str	r1, [r0, #16]
 800140c:	4770      	bx	lr
 800140e:	0409      	lsls	r1, r1, #16
 8001410:	e7fb      	b.n	800140a <HAL_GPIO_WritePin+0x2>

08001412 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001412:	68c3      	ldr	r3, [r0, #12]
 8001414:	420b      	tst	r3, r1
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001416:	bf14      	ite	ne
 8001418:	6141      	strne	r1, [r0, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800141a:	6101      	streq	r1, [r0, #16]
 800141c:	4770      	bx	lr

0800141e <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800141e:	4770      	bx	lr

08001420 <HAL_GPIO_EXTI_IRQHandler>:
{
 8001420:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001422:	4b04      	ldr	r3, [pc, #16]	; (8001434 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8001424:	6959      	ldr	r1, [r3, #20]
 8001426:	4201      	tst	r1, r0
 8001428:	d002      	beq.n	8001430 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800142a:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800142c:	f7ff fff7 	bl	800141e <HAL_GPIO_EXTI_Callback>
 8001430:	bd08      	pop	{r3, pc}
 8001432:	bf00      	nop
 8001434:	40010400 	.word	0x40010400

08001438 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001438:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800143c:	4605      	mov	r5, r0
 800143e:	b908      	cbnz	r0, 8001444 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8001440:	2001      	movs	r0, #1
 8001442:	e03c      	b.n	80014be <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001444:	6803      	ldr	r3, [r0, #0]
 8001446:	07db      	lsls	r3, r3, #31
 8001448:	d410      	bmi.n	800146c <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800144a:	682b      	ldr	r3, [r5, #0]
 800144c:	079f      	lsls	r7, r3, #30
 800144e:	d45d      	bmi.n	800150c <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001450:	682b      	ldr	r3, [r5, #0]
 8001452:	0719      	lsls	r1, r3, #28
 8001454:	f100 8094 	bmi.w	8001580 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001458:	682b      	ldr	r3, [r5, #0]
 800145a:	075a      	lsls	r2, r3, #29
 800145c:	f100 80be 	bmi.w	80015dc <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001460:	69e8      	ldr	r0, [r5, #28]
 8001462:	2800      	cmp	r0, #0
 8001464:	f040 812c 	bne.w	80016c0 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 8001468:	2000      	movs	r0, #0
 800146a:	e028      	b.n	80014be <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800146c:	4c8f      	ldr	r4, [pc, #572]	; (80016ac <HAL_RCC_OscConfig+0x274>)
 800146e:	6863      	ldr	r3, [r4, #4]
 8001470:	f003 030c 	and.w	r3, r3, #12
 8001474:	2b04      	cmp	r3, #4
 8001476:	d007      	beq.n	8001488 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001478:	6863      	ldr	r3, [r4, #4]
 800147a:	f003 030c 	and.w	r3, r3, #12
 800147e:	2b08      	cmp	r3, #8
 8001480:	d109      	bne.n	8001496 <HAL_RCC_OscConfig+0x5e>
 8001482:	6863      	ldr	r3, [r4, #4]
 8001484:	03de      	lsls	r6, r3, #15
 8001486:	d506      	bpl.n	8001496 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001488:	6823      	ldr	r3, [r4, #0]
 800148a:	039c      	lsls	r4, r3, #14
 800148c:	d5dd      	bpl.n	800144a <HAL_RCC_OscConfig+0x12>
 800148e:	686b      	ldr	r3, [r5, #4]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d1da      	bne.n	800144a <HAL_RCC_OscConfig+0x12>
 8001494:	e7d4      	b.n	8001440 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001496:	686b      	ldr	r3, [r5, #4]
 8001498:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800149c:	d112      	bne.n	80014c4 <HAL_RCC_OscConfig+0x8c>
 800149e:	6823      	ldr	r3, [r4, #0]
 80014a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014a4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80014a6:	f7ff fdfd 	bl	80010a4 <HAL_GetTick>
 80014aa:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ac:	6823      	ldr	r3, [r4, #0]
 80014ae:	0398      	lsls	r0, r3, #14
 80014b0:	d4cb      	bmi.n	800144a <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014b2:	f7ff fdf7 	bl	80010a4 <HAL_GetTick>
 80014b6:	1b80      	subs	r0, r0, r6
 80014b8:	2864      	cmp	r0, #100	; 0x64
 80014ba:	d9f7      	bls.n	80014ac <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 80014bc:	2003      	movs	r0, #3
}
 80014be:	b002      	add	sp, #8
 80014c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014c4:	b99b      	cbnz	r3, 80014ee <HAL_RCC_OscConfig+0xb6>
 80014c6:	6823      	ldr	r3, [r4, #0]
 80014c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014cc:	6023      	str	r3, [r4, #0]
 80014ce:	6823      	ldr	r3, [r4, #0]
 80014d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014d4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80014d6:	f7ff fde5 	bl	80010a4 <HAL_GetTick>
 80014da:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014dc:	6823      	ldr	r3, [r4, #0]
 80014de:	0399      	lsls	r1, r3, #14
 80014e0:	d5b3      	bpl.n	800144a <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014e2:	f7ff fddf 	bl	80010a4 <HAL_GetTick>
 80014e6:	1b80      	subs	r0, r0, r6
 80014e8:	2864      	cmp	r0, #100	; 0x64
 80014ea:	d9f7      	bls.n	80014dc <HAL_RCC_OscConfig+0xa4>
 80014ec:	e7e6      	b.n	80014bc <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014f2:	6823      	ldr	r3, [r4, #0]
 80014f4:	d103      	bne.n	80014fe <HAL_RCC_OscConfig+0xc6>
 80014f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014fa:	6023      	str	r3, [r4, #0]
 80014fc:	e7cf      	b.n	800149e <HAL_RCC_OscConfig+0x66>
 80014fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001502:	6023      	str	r3, [r4, #0]
 8001504:	6823      	ldr	r3, [r4, #0]
 8001506:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800150a:	e7cb      	b.n	80014a4 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800150c:	4c67      	ldr	r4, [pc, #412]	; (80016ac <HAL_RCC_OscConfig+0x274>)
 800150e:	6863      	ldr	r3, [r4, #4]
 8001510:	f013 0f0c 	tst.w	r3, #12
 8001514:	d007      	beq.n	8001526 <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001516:	6863      	ldr	r3, [r4, #4]
 8001518:	f003 030c 	and.w	r3, r3, #12
 800151c:	2b08      	cmp	r3, #8
 800151e:	d110      	bne.n	8001542 <HAL_RCC_OscConfig+0x10a>
 8001520:	6863      	ldr	r3, [r4, #4]
 8001522:	03da      	lsls	r2, r3, #15
 8001524:	d40d      	bmi.n	8001542 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001526:	6823      	ldr	r3, [r4, #0]
 8001528:	079b      	lsls	r3, r3, #30
 800152a:	d502      	bpl.n	8001532 <HAL_RCC_OscConfig+0xfa>
 800152c:	692b      	ldr	r3, [r5, #16]
 800152e:	2b01      	cmp	r3, #1
 8001530:	d186      	bne.n	8001440 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001532:	6823      	ldr	r3, [r4, #0]
 8001534:	696a      	ldr	r2, [r5, #20]
 8001536:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800153a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800153e:	6023      	str	r3, [r4, #0]
 8001540:	e786      	b.n	8001450 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001542:	692a      	ldr	r2, [r5, #16]
 8001544:	4b5a      	ldr	r3, [pc, #360]	; (80016b0 <HAL_RCC_OscConfig+0x278>)
 8001546:	b16a      	cbz	r2, 8001564 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 8001548:	2201      	movs	r2, #1
 800154a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800154c:	f7ff fdaa 	bl	80010a4 <HAL_GetTick>
 8001550:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001552:	6823      	ldr	r3, [r4, #0]
 8001554:	079f      	lsls	r7, r3, #30
 8001556:	d4ec      	bmi.n	8001532 <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001558:	f7ff fda4 	bl	80010a4 <HAL_GetTick>
 800155c:	1b80      	subs	r0, r0, r6
 800155e:	2802      	cmp	r0, #2
 8001560:	d9f7      	bls.n	8001552 <HAL_RCC_OscConfig+0x11a>
 8001562:	e7ab      	b.n	80014bc <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8001564:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001566:	f7ff fd9d 	bl	80010a4 <HAL_GetTick>
 800156a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800156c:	6823      	ldr	r3, [r4, #0]
 800156e:	0798      	lsls	r0, r3, #30
 8001570:	f57f af6e 	bpl.w	8001450 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001574:	f7ff fd96 	bl	80010a4 <HAL_GetTick>
 8001578:	1b80      	subs	r0, r0, r6
 800157a:	2802      	cmp	r0, #2
 800157c:	d9f6      	bls.n	800156c <HAL_RCC_OscConfig+0x134>
 800157e:	e79d      	b.n	80014bc <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001580:	69aa      	ldr	r2, [r5, #24]
 8001582:	4c4a      	ldr	r4, [pc, #296]	; (80016ac <HAL_RCC_OscConfig+0x274>)
 8001584:	4b4b      	ldr	r3, [pc, #300]	; (80016b4 <HAL_RCC_OscConfig+0x27c>)
 8001586:	b1da      	cbz	r2, 80015c0 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8001588:	2201      	movs	r2, #1
 800158a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800158c:	f7ff fd8a 	bl	80010a4 <HAL_GetTick>
 8001590:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001592:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001594:	079b      	lsls	r3, r3, #30
 8001596:	d50d      	bpl.n	80015b4 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001598:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800159c:	4b46      	ldr	r3, [pc, #280]	; (80016b8 <HAL_RCC_OscConfig+0x280>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80015a4:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80015a6:	bf00      	nop
  }
  while (Delay --);
 80015a8:	9b01      	ldr	r3, [sp, #4]
 80015aa:	1e5a      	subs	r2, r3, #1
 80015ac:	9201      	str	r2, [sp, #4]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d1f9      	bne.n	80015a6 <HAL_RCC_OscConfig+0x16e>
 80015b2:	e751      	b.n	8001458 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015b4:	f7ff fd76 	bl	80010a4 <HAL_GetTick>
 80015b8:	1b80      	subs	r0, r0, r6
 80015ba:	2802      	cmp	r0, #2
 80015bc:	d9e9      	bls.n	8001592 <HAL_RCC_OscConfig+0x15a>
 80015be:	e77d      	b.n	80014bc <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 80015c0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80015c2:	f7ff fd6f 	bl	80010a4 <HAL_GetTick>
 80015c6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80015ca:	079f      	lsls	r7, r3, #30
 80015cc:	f57f af44 	bpl.w	8001458 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015d0:	f7ff fd68 	bl	80010a4 <HAL_GetTick>
 80015d4:	1b80      	subs	r0, r0, r6
 80015d6:	2802      	cmp	r0, #2
 80015d8:	d9f6      	bls.n	80015c8 <HAL_RCC_OscConfig+0x190>
 80015da:	e76f      	b.n	80014bc <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015dc:	4c33      	ldr	r4, [pc, #204]	; (80016ac <HAL_RCC_OscConfig+0x274>)
 80015de:	69e3      	ldr	r3, [r4, #28]
 80015e0:	00d8      	lsls	r0, r3, #3
 80015e2:	d424      	bmi.n	800162e <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 80015e4:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80015e6:	69e3      	ldr	r3, [r4, #28]
 80015e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ec:	61e3      	str	r3, [r4, #28]
 80015ee:	69e3      	ldr	r3, [r4, #28]
 80015f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f4:	9300      	str	r3, [sp, #0]
 80015f6:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015f8:	4e30      	ldr	r6, [pc, #192]	; (80016bc <HAL_RCC_OscConfig+0x284>)
 80015fa:	6833      	ldr	r3, [r6, #0]
 80015fc:	05d9      	lsls	r1, r3, #23
 80015fe:	d518      	bpl.n	8001632 <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001600:	68eb      	ldr	r3, [r5, #12]
 8001602:	2b01      	cmp	r3, #1
 8001604:	d126      	bne.n	8001654 <HAL_RCC_OscConfig+0x21c>
 8001606:	6a23      	ldr	r3, [r4, #32]
 8001608:	f043 0301 	orr.w	r3, r3, #1
 800160c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800160e:	f7ff fd49 	bl	80010a4 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001612:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001616:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001618:	6a23      	ldr	r3, [r4, #32]
 800161a:	079b      	lsls	r3, r3, #30
 800161c:	d53f      	bpl.n	800169e <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 800161e:	2f00      	cmp	r7, #0
 8001620:	f43f af1e 	beq.w	8001460 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001624:	69e3      	ldr	r3, [r4, #28]
 8001626:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800162a:	61e3      	str	r3, [r4, #28]
 800162c:	e718      	b.n	8001460 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 800162e:	2700      	movs	r7, #0
 8001630:	e7e2      	b.n	80015f8 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001632:	6833      	ldr	r3, [r6, #0]
 8001634:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001638:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800163a:	f7ff fd33 	bl	80010a4 <HAL_GetTick>
 800163e:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001640:	6833      	ldr	r3, [r6, #0]
 8001642:	05da      	lsls	r2, r3, #23
 8001644:	d4dc      	bmi.n	8001600 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001646:	f7ff fd2d 	bl	80010a4 <HAL_GetTick>
 800164a:	eba0 0008 	sub.w	r0, r0, r8
 800164e:	2864      	cmp	r0, #100	; 0x64
 8001650:	d9f6      	bls.n	8001640 <HAL_RCC_OscConfig+0x208>
 8001652:	e733      	b.n	80014bc <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001654:	b9ab      	cbnz	r3, 8001682 <HAL_RCC_OscConfig+0x24a>
 8001656:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001658:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800165c:	f023 0301 	bic.w	r3, r3, #1
 8001660:	6223      	str	r3, [r4, #32]
 8001662:	6a23      	ldr	r3, [r4, #32]
 8001664:	f023 0304 	bic.w	r3, r3, #4
 8001668:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800166a:	f7ff fd1b 	bl	80010a4 <HAL_GetTick>
 800166e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001670:	6a23      	ldr	r3, [r4, #32]
 8001672:	0798      	lsls	r0, r3, #30
 8001674:	d5d3      	bpl.n	800161e <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001676:	f7ff fd15 	bl	80010a4 <HAL_GetTick>
 800167a:	1b80      	subs	r0, r0, r6
 800167c:	4540      	cmp	r0, r8
 800167e:	d9f7      	bls.n	8001670 <HAL_RCC_OscConfig+0x238>
 8001680:	e71c      	b.n	80014bc <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001682:	2b05      	cmp	r3, #5
 8001684:	6a23      	ldr	r3, [r4, #32]
 8001686:	d103      	bne.n	8001690 <HAL_RCC_OscConfig+0x258>
 8001688:	f043 0304 	orr.w	r3, r3, #4
 800168c:	6223      	str	r3, [r4, #32]
 800168e:	e7ba      	b.n	8001606 <HAL_RCC_OscConfig+0x1ce>
 8001690:	f023 0301 	bic.w	r3, r3, #1
 8001694:	6223      	str	r3, [r4, #32]
 8001696:	6a23      	ldr	r3, [r4, #32]
 8001698:	f023 0304 	bic.w	r3, r3, #4
 800169c:	e7b6      	b.n	800160c <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800169e:	f7ff fd01 	bl	80010a4 <HAL_GetTick>
 80016a2:	eba0 0008 	sub.w	r0, r0, r8
 80016a6:	42b0      	cmp	r0, r6
 80016a8:	d9b6      	bls.n	8001618 <HAL_RCC_OscConfig+0x1e0>
 80016aa:	e707      	b.n	80014bc <HAL_RCC_OscConfig+0x84>
 80016ac:	40021000 	.word	0x40021000
 80016b0:	42420000 	.word	0x42420000
 80016b4:	42420480 	.word	0x42420480
 80016b8:	2000003c 	.word	0x2000003c
 80016bc:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016c0:	4b2a      	ldr	r3, [pc, #168]	; (800176c <HAL_RCC_OscConfig+0x334>)
 80016c2:	685a      	ldr	r2, [r3, #4]
 80016c4:	461c      	mov	r4, r3
 80016c6:	f002 020c 	and.w	r2, r2, #12
 80016ca:	2a08      	cmp	r2, #8
 80016cc:	d03d      	beq.n	800174a <HAL_RCC_OscConfig+0x312>
 80016ce:	2300      	movs	r3, #0
 80016d0:	4e27      	ldr	r6, [pc, #156]	; (8001770 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016d2:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80016d4:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016d6:	d12b      	bne.n	8001730 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 80016d8:	f7ff fce4 	bl	80010a4 <HAL_GetTick>
 80016dc:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016de:	6823      	ldr	r3, [r4, #0]
 80016e0:	0199      	lsls	r1, r3, #6
 80016e2:	d41f      	bmi.n	8001724 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80016e4:	6a2b      	ldr	r3, [r5, #32]
 80016e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016ea:	d105      	bne.n	80016f8 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80016ec:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80016ee:	68a9      	ldr	r1, [r5, #8]
 80016f0:	f022 020f 	bic.w	r2, r2, #15
 80016f4:	430a      	orrs	r2, r1
 80016f6:	62e2      	str	r2, [r4, #44]	; 0x2c
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016f8:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80016fa:	6862      	ldr	r2, [r4, #4]
 80016fc:	430b      	orrs	r3, r1
 80016fe:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001702:	4313      	orrs	r3, r2
 8001704:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001706:	2301      	movs	r3, #1
 8001708:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800170a:	f7ff fccb 	bl	80010a4 <HAL_GetTick>
 800170e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001710:	6823      	ldr	r3, [r4, #0]
 8001712:	019a      	lsls	r2, r3, #6
 8001714:	f53f aea8 	bmi.w	8001468 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001718:	f7ff fcc4 	bl	80010a4 <HAL_GetTick>
 800171c:	1b40      	subs	r0, r0, r5
 800171e:	2802      	cmp	r0, #2
 8001720:	d9f6      	bls.n	8001710 <HAL_RCC_OscConfig+0x2d8>
 8001722:	e6cb      	b.n	80014bc <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001724:	f7ff fcbe 	bl	80010a4 <HAL_GetTick>
 8001728:	1bc0      	subs	r0, r0, r7
 800172a:	2802      	cmp	r0, #2
 800172c:	d9d7      	bls.n	80016de <HAL_RCC_OscConfig+0x2a6>
 800172e:	e6c5      	b.n	80014bc <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8001730:	f7ff fcb8 	bl	80010a4 <HAL_GetTick>
 8001734:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001736:	6823      	ldr	r3, [r4, #0]
 8001738:	019b      	lsls	r3, r3, #6
 800173a:	f57f ae95 	bpl.w	8001468 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800173e:	f7ff fcb1 	bl	80010a4 <HAL_GetTick>
 8001742:	1b40      	subs	r0, r0, r5
 8001744:	2802      	cmp	r0, #2
 8001746:	d9f6      	bls.n	8001736 <HAL_RCC_OscConfig+0x2fe>
 8001748:	e6b8      	b.n	80014bc <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800174a:	2801      	cmp	r0, #1
 800174c:	f43f aeb7 	beq.w	80014be <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 8001750:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001752:	6a2b      	ldr	r3, [r5, #32]
 8001754:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8001758:	429a      	cmp	r2, r3
 800175a:	f47f ae71 	bne.w	8001440 <HAL_RCC_OscConfig+0x8>
 800175e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001760:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8001764:	1ac0      	subs	r0, r0, r3
 8001766:	bf18      	it	ne
 8001768:	2001      	movne	r0, #1
 800176a:	e6a8      	b.n	80014be <HAL_RCC_OscConfig+0x86>
 800176c:	40021000 	.word	0x40021000
 8001770:	42420060 	.word	0x42420060

08001774 <HAL_RCC_GetSysClockFreq>:
{
 8001774:	b530      	push	{r4, r5, lr}
 8001776:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001778:	466c      	mov	r4, sp
 800177a:	4b1b      	ldr	r3, [pc, #108]	; (80017e8 <HAL_RCC_GetSysClockFreq+0x74>)
 800177c:	f103 0510 	add.w	r5, r3, #16
 8001780:	4622      	mov	r2, r4
 8001782:	6818      	ldr	r0, [r3, #0]
 8001784:	6859      	ldr	r1, [r3, #4]
 8001786:	3308      	adds	r3, #8
 8001788:	c203      	stmia	r2!, {r0, r1}
 800178a:	42ab      	cmp	r3, r5
 800178c:	4614      	mov	r4, r2
 800178e:	d1f7      	bne.n	8001780 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8001790:	4b16      	ldr	r3, [pc, #88]	; (80017ec <HAL_RCC_GetSysClockFreq+0x78>)
 8001792:	ac04      	add	r4, sp, #16
 8001794:	f103 0510 	add.w	r5, r3, #16
 8001798:	4622      	mov	r2, r4
 800179a:	6818      	ldr	r0, [r3, #0]
 800179c:	6859      	ldr	r1, [r3, #4]
 800179e:	3308      	adds	r3, #8
 80017a0:	c203      	stmia	r2!, {r0, r1}
 80017a2:	42ab      	cmp	r3, r5
 80017a4:	4614      	mov	r4, r2
 80017a6:	d1f7      	bne.n	8001798 <HAL_RCC_GetSysClockFreq+0x24>
  tmpreg = RCC->CFGR;
 80017a8:	4911      	ldr	r1, [pc, #68]	; (80017f0 <HAL_RCC_GetSysClockFreq+0x7c>)
 80017aa:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80017ac:	f003 020c 	and.w	r2, r3, #12
 80017b0:	2a08      	cmp	r2, #8
 80017b2:	d117      	bne.n	80017e4 <HAL_RCC_GetSysClockFreq+0x70>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80017b4:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80017b8:	a808      	add	r0, sp, #32
 80017ba:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80017bc:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80017be:	f812 2c20 	ldrb.w	r2, [r2, #-32]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80017c2:	d50c      	bpl.n	80017de <HAL_RCC_GetSysClockFreq+0x6a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 80017c4:	6acb      	ldr	r3, [r1, #44]	; 0x2c
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80017c6:	480b      	ldr	r0, [pc, #44]	; (80017f4 <HAL_RCC_GetSysClockFreq+0x80>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 80017c8:	f003 030f 	and.w	r3, r3, #15
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80017cc:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 80017ce:	aa08      	add	r2, sp, #32
 80017d0:	4413      	add	r3, r2
 80017d2:	f813 3c10 	ldrb.w	r3, [r3, #-16]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80017d6:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80017da:	b009      	add	sp, #36	; 0x24
 80017dc:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80017de:	4806      	ldr	r0, [pc, #24]	; (80017f8 <HAL_RCC_GetSysClockFreq+0x84>)
 80017e0:	4350      	muls	r0, r2
 80017e2:	e7fa      	b.n	80017da <HAL_RCC_GetSysClockFreq+0x66>
      sysclockfreq = HSE_VALUE;
 80017e4:	4803      	ldr	r0, [pc, #12]	; (80017f4 <HAL_RCC_GetSysClockFreq+0x80>)
  return sysclockfreq;
 80017e6:	e7f8      	b.n	80017da <HAL_RCC_GetSysClockFreq+0x66>
 80017e8:	08003a50 	.word	0x08003a50
 80017ec:	08003a60 	.word	0x08003a60
 80017f0:	40021000 	.word	0x40021000
 80017f4:	007a1200 	.word	0x007a1200
 80017f8:	003d0900 	.word	0x003d0900

080017fc <HAL_RCC_ClockConfig>:
{
 80017fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (RCC_ClkInitStruct == NULL)
 80017fe:	4605      	mov	r5, r0
 8001800:	b908      	cbnz	r0, 8001806 <HAL_RCC_ClockConfig+0xa>
    return HAL_ERROR;
 8001802:	2001      	movs	r0, #1
 8001804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001806:	6802      	ldr	r2, [r0, #0]
 8001808:	4c30      	ldr	r4, [pc, #192]	; (80018cc <HAL_RCC_ClockConfig+0xd0>)
 800180a:	f012 0f02 	tst.w	r2, #2
 800180e:	d011      	beq.n	8001834 <HAL_RCC_ClockConfig+0x38>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001810:	0757      	lsls	r7, r2, #29
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001812:	bf42      	ittt	mi
 8001814:	6863      	ldrmi	r3, [r4, #4]
 8001816:	f443 63e0 	orrmi.w	r3, r3, #1792	; 0x700
 800181a:	6063      	strmi	r3, [r4, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800181c:	0716      	lsls	r6, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800181e:	bf42      	ittt	mi
 8001820:	6863      	ldrmi	r3, [r4, #4]
 8001822:	f443 5360 	orrmi.w	r3, r3, #14336	; 0x3800
 8001826:	6063      	strmi	r3, [r4, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001828:	6863      	ldr	r3, [r4, #4]
 800182a:	6881      	ldr	r1, [r0, #8]
 800182c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001830:	430b      	orrs	r3, r1
 8001832:	6063      	str	r3, [r4, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001834:	07d0      	lsls	r0, r2, #31
 8001836:	d41b      	bmi.n	8001870 <HAL_RCC_ClockConfig+0x74>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001838:	682a      	ldr	r2, [r5, #0]
 800183a:	0751      	lsls	r1, r2, #29
 800183c:	d43f      	bmi.n	80018be <HAL_RCC_ClockConfig+0xc2>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800183e:	0713      	lsls	r3, r2, #28
 8001840:	d506      	bpl.n	8001850 <HAL_RCC_ClockConfig+0x54>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001842:	6863      	ldr	r3, [r4, #4]
 8001844:	692a      	ldr	r2, [r5, #16]
 8001846:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800184a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800184e:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001850:	f7ff ff90 	bl	8001774 <HAL_RCC_GetSysClockFreq>
 8001854:	6863      	ldr	r3, [r4, #4]
 8001856:	4a1e      	ldr	r2, [pc, #120]	; (80018d0 <HAL_RCC_ClockConfig+0xd4>)
 8001858:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800185c:	5cd3      	ldrb	r3, [r2, r3]
 800185e:	40d8      	lsrs	r0, r3
 8001860:	4b1c      	ldr	r3, [pc, #112]	; (80018d4 <HAL_RCC_ClockConfig+0xd8>)
 8001862:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001864:	4b1c      	ldr	r3, [pc, #112]	; (80018d8 <HAL_RCC_ClockConfig+0xdc>)
 8001866:	6818      	ldr	r0, [r3, #0]
 8001868:	f7ff fbe0 	bl	800102c <HAL_InitTick>
  return HAL_OK;
 800186c:	2000      	movs	r0, #0
 800186e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001870:	686a      	ldr	r2, [r5, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001872:	6823      	ldr	r3, [r4, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001874:	2a01      	cmp	r2, #1
 8001876:	d11a      	bne.n	80018ae <HAL_RCC_ClockConfig+0xb2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001878:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800187c:	d0c1      	beq.n	8001802 <HAL_RCC_ClockConfig+0x6>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800187e:	6863      	ldr	r3, [r4, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001880:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001884:	f023 0303 	bic.w	r3, r3, #3
 8001888:	4313      	orrs	r3, r2
 800188a:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 800188c:	f7ff fc0a 	bl	80010a4 <HAL_GetTick>
 8001890:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001892:	6863      	ldr	r3, [r4, #4]
 8001894:	686a      	ldr	r2, [r5, #4]
 8001896:	f003 030c 	and.w	r3, r3, #12
 800189a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800189e:	d0cb      	beq.n	8001838 <HAL_RCC_ClockConfig+0x3c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018a0:	f7ff fc00 	bl	80010a4 <HAL_GetTick>
 80018a4:	1b80      	subs	r0, r0, r6
 80018a6:	42b8      	cmp	r0, r7
 80018a8:	d9f3      	bls.n	8001892 <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 80018aa:	2003      	movs	r0, #3
}
 80018ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018ae:	2a02      	cmp	r2, #2
 80018b0:	d102      	bne.n	80018b8 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018b2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80018b6:	e7e1      	b.n	800187c <HAL_RCC_ClockConfig+0x80>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018b8:	f013 0f02 	tst.w	r3, #2
 80018bc:	e7de      	b.n	800187c <HAL_RCC_ClockConfig+0x80>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018be:	6863      	ldr	r3, [r4, #4]
 80018c0:	68e9      	ldr	r1, [r5, #12]
 80018c2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80018c6:	430b      	orrs	r3, r1
 80018c8:	6063      	str	r3, [r4, #4]
 80018ca:	e7b8      	b.n	800183e <HAL_RCC_ClockConfig+0x42>
 80018cc:	40021000 	.word	0x40021000
 80018d0:	08003aa4 	.word	0x08003aa4
 80018d4:	2000003c 	.word	0x2000003c
 80018d8:	20000004 	.word	0x20000004

080018dc <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80018dc:	4b04      	ldr	r3, [pc, #16]	; (80018f0 <HAL_RCC_GetPCLK1Freq+0x14>)
 80018de:	4a05      	ldr	r2, [pc, #20]	; (80018f4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80018e6:	5cd3      	ldrb	r3, [r2, r3]
 80018e8:	4a03      	ldr	r2, [pc, #12]	; (80018f8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80018ea:	6810      	ldr	r0, [r2, #0]
}
 80018ec:	40d8      	lsrs	r0, r3
 80018ee:	4770      	bx	lr
 80018f0:	40021000 	.word	0x40021000
 80018f4:	08003ab4 	.word	0x08003ab4
 80018f8:	2000003c 	.word	0x2000003c

080018fc <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80018fc:	4b04      	ldr	r3, [pc, #16]	; (8001910 <HAL_RCC_GetPCLK2Freq+0x14>)
 80018fe:	4a05      	ldr	r2, [pc, #20]	; (8001914 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001906:	5cd3      	ldrb	r3, [r2, r3]
 8001908:	4a03      	ldr	r2, [pc, #12]	; (8001918 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800190a:	6810      	ldr	r0, [r2, #0]
}
 800190c:	40d8      	lsrs	r0, r3
 800190e:	4770      	bx	lr
 8001910:	40021000 	.word	0x40021000
 8001914:	08003ab4 	.word	0x08003ab4
 8001918:	2000003c 	.word	0x2000003c

0800191c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800191c:	6a03      	ldr	r3, [r0, #32]
{
 800191e:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001920:	f023 0301 	bic.w	r3, r3, #1
 8001924:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001926:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001928:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800192a:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800192c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800192e:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001932:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001934:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8001936:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 800193a:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800193c:	4d17      	ldr	r5, [pc, #92]	; (800199c <TIM_OC1_SetConfig+0x80>)
 800193e:	42a8      	cmp	r0, r5
 8001940:	d00b      	beq.n	800195a <TIM_OC1_SetConfig+0x3e>
 8001942:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8001946:	42a8      	cmp	r0, r5
 8001948:	d007      	beq.n	800195a <TIM_OC1_SetConfig+0x3e>
 800194a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800194e:	42a8      	cmp	r0, r5
 8001950:	d003      	beq.n	800195a <TIM_OC1_SetConfig+0x3e>
 8001952:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001956:	42a8      	cmp	r0, r5
 8001958:	d11a      	bne.n	8001990 <TIM_OC1_SetConfig+0x74>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800195a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800195c:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001960:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001962:	4d0e      	ldr	r5, [pc, #56]	; (800199c <TIM_OC1_SetConfig+0x80>)
    tmpccer &= ~TIM_CCER_CC1NE;
 8001964:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001968:	42a8      	cmp	r0, r5
 800196a:	d00b      	beq.n	8001984 <TIM_OC1_SetConfig+0x68>
 800196c:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8001970:	42a8      	cmp	r0, r5
 8001972:	d007      	beq.n	8001984 <TIM_OC1_SetConfig+0x68>
 8001974:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001978:	42a8      	cmp	r0, r5
 800197a:	d003      	beq.n	8001984 <TIM_OC1_SetConfig+0x68>
 800197c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001980:	42a8      	cmp	r0, r5
 8001982:	d105      	bne.n	8001990 <TIM_OC1_SetConfig+0x74>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001984:	f422 7540 	bic.w	r5, r2, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001988:	698e      	ldr	r6, [r1, #24]
 800198a:	694a      	ldr	r2, [r1, #20]
 800198c:	4332      	orrs	r2, r6
 800198e:	432a      	orrs	r2, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001990:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001992:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001994:	6184      	str	r4, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8001996:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001998:	6203      	str	r3, [r0, #32]
 800199a:	bd70      	pop	{r4, r5, r6, pc}
 800199c:	40012c00 	.word	0x40012c00

080019a0 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80019a0:	6a03      	ldr	r3, [r0, #32]
{
 80019a2:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80019a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019a8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80019aa:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80019ac:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80019ae:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80019b0:	680e      	ldr	r6, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80019b2:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80019b6:	4326      	orrs	r6, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80019b8:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80019ba:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80019be:	ea43 2304 	orr.w	r3, r3, r4, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80019c2:	4c11      	ldr	r4, [pc, #68]	; (8001a08 <TIM_OC3_SetConfig+0x68>)
 80019c4:	42a0      	cmp	r0, r4
 80019c6:	d10e      	bne.n	80019e6 <TIM_OC3_SetConfig+0x46>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80019c8:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80019ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80019ce:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80019d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80019d6:	694c      	ldr	r4, [r1, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80019d8:	698d      	ldr	r5, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80019da:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80019de:	432c      	orrs	r4, r5
 80019e0:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 80019e4:	e009      	b.n	80019fa <TIM_OC3_SetConfig+0x5a>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80019e6:	4d09      	ldr	r5, [pc, #36]	; (8001a0c <TIM_OC3_SetConfig+0x6c>)
 80019e8:	42a8      	cmp	r0, r5
 80019ea:	d0f4      	beq.n	80019d6 <TIM_OC3_SetConfig+0x36>
 80019ec:	4c08      	ldr	r4, [pc, #32]	; (8001a10 <TIM_OC3_SetConfig+0x70>)
 80019ee:	42a0      	cmp	r0, r4
 80019f0:	d0f1      	beq.n	80019d6 <TIM_OC3_SetConfig+0x36>
 80019f2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80019f6:	42a0      	cmp	r0, r4
 80019f8:	d0ed      	beq.n	80019d6 <TIM_OC3_SetConfig+0x36>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80019fa:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80019fc:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 80019fe:	61c6      	str	r6, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8001a00:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001a02:	6203      	str	r3, [r0, #32]
}
 8001a04:	bd70      	pop	{r4, r5, r6, pc}
 8001a06:	bf00      	nop
 8001a08:	40012c00 	.word	0x40012c00
 8001a0c:	40014000 	.word	0x40014000
 8001a10:	40014400 	.word	0x40014400

08001a14 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001a14:	6a03      	ldr	r3, [r0, #32]
{
 8001a16:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001a18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001a1c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001a1e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001a20:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001a22:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001a24:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001a26:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001a2a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001a2e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001a30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001a34:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001a38:	4d0c      	ldr	r5, [pc, #48]	; (8001a6c <TIM_OC4_SetConfig+0x58>)
 8001a3a:	42a8      	cmp	r0, r5
 8001a3c:	d00b      	beq.n	8001a56 <TIM_OC4_SetConfig+0x42>
 8001a3e:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8001a42:	42a8      	cmp	r0, r5
 8001a44:	d007      	beq.n	8001a56 <TIM_OC4_SetConfig+0x42>
 8001a46:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001a4a:	42a8      	cmp	r0, r5
 8001a4c:	d003      	beq.n	8001a56 <TIM_OC4_SetConfig+0x42>
 8001a4e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001a52:	42a8      	cmp	r0, r5
 8001a54:	d104      	bne.n	8001a60 <TIM_OC4_SetConfig+0x4c>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001a56:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001a58:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001a5c:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001a60:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001a62:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001a64:	684a      	ldr	r2, [r1, #4]
 8001a66:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001a68:	6203      	str	r3, [r0, #32]
 8001a6a:	bd30      	pop	{r4, r5, pc}
 8001a6c:	40012c00 	.word	0x40012c00

08001a70 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a70:	6803      	ldr	r3, [r0, #0]
}
 8001a72:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a74:	68da      	ldr	r2, [r3, #12]
 8001a76:	f042 0201 	orr.w	r2, r2, #1
 8001a7a:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a7c:	689a      	ldr	r2, [r3, #8]
 8001a7e:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a82:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 8001a84:	bf1e      	ittt	ne
 8001a86:	681a      	ldrne	r2, [r3, #0]
 8001a88:	f042 0201 	orrne.w	r2, r2, #1
 8001a8c:	601a      	strne	r2, [r3, #0]
}
 8001a8e:	4770      	bx	lr

08001a90 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8001a90:	6803      	ldr	r3, [r0, #0]
 8001a92:	68da      	ldr	r2, [r3, #12]
 8001a94:	f022 0201 	bic.w	r2, r2, #1
 8001a98:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE(htim);
 8001a9a:	f241 1211 	movw	r2, #4369	; 0x1111
 8001a9e:	6a19      	ldr	r1, [r3, #32]
 8001aa0:	4211      	tst	r1, r2
 8001aa2:	d108      	bne.n	8001ab6 <HAL_TIM_Base_Stop_IT+0x26>
 8001aa4:	f240 4244 	movw	r2, #1092	; 0x444
 8001aa8:	6a19      	ldr	r1, [r3, #32]
 8001aaa:	4211      	tst	r1, r2
 8001aac:	bf02      	ittt	eq
 8001aae:	681a      	ldreq	r2, [r3, #0]
 8001ab0:	f022 0201 	biceq.w	r2, r2, #1
 8001ab4:	601a      	streq	r2, [r3, #0]
}
 8001ab6:	2000      	movs	r0, #0
 8001ab8:	4770      	bx	lr

08001aba <HAL_TIM_PeriodElapsedCallback>:
 8001aba:	4770      	bx	lr

08001abc <HAL_TIM_OC_DelayElapsedCallback>:
 8001abc:	4770      	bx	lr

08001abe <HAL_TIM_IC_CaptureCallback>:
 8001abe:	4770      	bx	lr

08001ac0 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001ac0:	4770      	bx	lr

08001ac2 <HAL_TIM_TriggerCallback>:
 8001ac2:	4770      	bx	lr

08001ac4 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ac4:	6803      	ldr	r3, [r0, #0]
{
 8001ac6:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ac8:	691a      	ldr	r2, [r3, #16]
{
 8001aca:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001acc:	0791      	lsls	r1, r2, #30
 8001ace:	d50e      	bpl.n	8001aee <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ad0:	68da      	ldr	r2, [r3, #12]
 8001ad2:	0792      	lsls	r2, r2, #30
 8001ad4:	d50b      	bpl.n	8001aee <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ad6:	f06f 0202 	mvn.w	r2, #2
 8001ada:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001adc:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ade:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ae0:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ae2:	079b      	lsls	r3, r3, #30
 8001ae4:	d077      	beq.n	8001bd6 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8001ae6:	f7ff ffea 	bl	8001abe <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001aea:	2300      	movs	r3, #0
 8001aec:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001aee:	6823      	ldr	r3, [r4, #0]
 8001af0:	691a      	ldr	r2, [r3, #16]
 8001af2:	0750      	lsls	r0, r2, #29
 8001af4:	d510      	bpl.n	8001b18 <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001af6:	68da      	ldr	r2, [r3, #12]
 8001af8:	0751      	lsls	r1, r2, #29
 8001afa:	d50d      	bpl.n	8001b18 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001afc:	f06f 0204 	mvn.w	r2, #4
 8001b00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b02:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b04:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b06:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b08:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8001b0c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b0e:	d068      	beq.n	8001be2 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001b10:	f7ff ffd5 	bl	8001abe <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b14:	2300      	movs	r3, #0
 8001b16:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b18:	6823      	ldr	r3, [r4, #0]
 8001b1a:	691a      	ldr	r2, [r3, #16]
 8001b1c:	0712      	lsls	r2, r2, #28
 8001b1e:	d50f      	bpl.n	8001b40 <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001b20:	68da      	ldr	r2, [r3, #12]
 8001b22:	0710      	lsls	r0, r2, #28
 8001b24:	d50c      	bpl.n	8001b40 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b26:	f06f 0208 	mvn.w	r2, #8
 8001b2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b2c:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b2e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b30:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b32:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8001b34:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b36:	d05a      	beq.n	8001bee <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001b38:	f7ff ffc1 	bl	8001abe <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001b40:	6823      	ldr	r3, [r4, #0]
 8001b42:	691a      	ldr	r2, [r3, #16]
 8001b44:	06d2      	lsls	r2, r2, #27
 8001b46:	d510      	bpl.n	8001b6a <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001b48:	68da      	ldr	r2, [r3, #12]
 8001b4a:	06d0      	lsls	r0, r2, #27
 8001b4c:	d50d      	bpl.n	8001b6a <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001b4e:	f06f 0210 	mvn.w	r2, #16
 8001b52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b54:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b56:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b58:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b5a:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8001b5e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b60:	d04b      	beq.n	8001bfa <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8001b62:	f7ff ffac 	bl	8001abe <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b66:	2300      	movs	r3, #0
 8001b68:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001b6a:	6823      	ldr	r3, [r4, #0]
 8001b6c:	691a      	ldr	r2, [r3, #16]
 8001b6e:	07d1      	lsls	r1, r2, #31
 8001b70:	d508      	bpl.n	8001b84 <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001b72:	68da      	ldr	r2, [r3, #12]
 8001b74:	07d2      	lsls	r2, r2, #31
 8001b76:	d505      	bpl.n	8001b84 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001b78:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8001b7c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001b7e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001b80:	f7ff ff9b 	bl	8001aba <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001b84:	6823      	ldr	r3, [r4, #0]
 8001b86:	691a      	ldr	r2, [r3, #16]
 8001b88:	0610      	lsls	r0, r2, #24
 8001b8a:	d508      	bpl.n	8001b9e <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001b8c:	68da      	ldr	r2, [r3, #12]
 8001b8e:	0611      	lsls	r1, r2, #24
 8001b90:	d505      	bpl.n	8001b9e <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001b92:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8001b96:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001b98:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001b9a:	f000 f942 	bl	8001e22 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001b9e:	6823      	ldr	r3, [r4, #0]
 8001ba0:	691a      	ldr	r2, [r3, #16]
 8001ba2:	0652      	lsls	r2, r2, #25
 8001ba4:	d508      	bpl.n	8001bb8 <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001ba6:	68da      	ldr	r2, [r3, #12]
 8001ba8:	0650      	lsls	r0, r2, #25
 8001baa:	d505      	bpl.n	8001bb8 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001bac:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8001bb0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001bb2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001bb4:	f7ff ff85 	bl	8001ac2 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001bb8:	6823      	ldr	r3, [r4, #0]
 8001bba:	691a      	ldr	r2, [r3, #16]
 8001bbc:	0691      	lsls	r1, r2, #26
 8001bbe:	d522      	bpl.n	8001c06 <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001bc0:	68da      	ldr	r2, [r3, #12]
 8001bc2:	0692      	lsls	r2, r2, #26
 8001bc4:	d51f      	bpl.n	8001c06 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001bc6:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8001bca:	4620      	mov	r0, r4
}
 8001bcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001bd0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8001bd2:	f000 b925 	b.w	8001e20 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bd6:	f7ff ff71 	bl	8001abc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bda:	4620      	mov	r0, r4
 8001bdc:	f7ff ff70 	bl	8001ac0 <HAL_TIM_PWM_PulseFinishedCallback>
 8001be0:	e783      	b.n	8001aea <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001be2:	f7ff ff6b 	bl	8001abc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001be6:	4620      	mov	r0, r4
 8001be8:	f7ff ff6a 	bl	8001ac0 <HAL_TIM_PWM_PulseFinishedCallback>
 8001bec:	e792      	b.n	8001b14 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bee:	f7ff ff65 	bl	8001abc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bf2:	4620      	mov	r0, r4
 8001bf4:	f7ff ff64 	bl	8001ac0 <HAL_TIM_PWM_PulseFinishedCallback>
 8001bf8:	e7a0      	b.n	8001b3c <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bfa:	f7ff ff5f 	bl	8001abc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bfe:	4620      	mov	r0, r4
 8001c00:	f7ff ff5e 	bl	8001ac0 <HAL_TIM_PWM_PulseFinishedCallback>
 8001c04:	e7af      	b.n	8001b66 <HAL_TIM_IRQHandler+0xa2>
 8001c06:	bd10      	pop	{r4, pc}

08001c08 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c08:	4a26      	ldr	r2, [pc, #152]	; (8001ca4 <TIM_Base_SetConfig+0x9c>)
  tmpcr1 = TIMx->CR1;
 8001c0a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c0c:	4290      	cmp	r0, r2
 8001c0e:	d00a      	beq.n	8001c26 <TIM_Base_SetConfig+0x1e>
 8001c10:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001c14:	d007      	beq.n	8001c26 <TIM_Base_SetConfig+0x1e>
 8001c16:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001c1a:	4290      	cmp	r0, r2
 8001c1c:	d003      	beq.n	8001c26 <TIM_Base_SetConfig+0x1e>
 8001c1e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c22:	4290      	cmp	r0, r2
 8001c24:	d111      	bne.n	8001c4a <TIM_Base_SetConfig+0x42>
    tmpcr1 |= Structure->CounterMode;
 8001c26:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001c2c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c2e:	4a1d      	ldr	r2, [pc, #116]	; (8001ca4 <TIM_Base_SetConfig+0x9c>)
 8001c30:	4290      	cmp	r0, r2
 8001c32:	d015      	beq.n	8001c60 <TIM_Base_SetConfig+0x58>
 8001c34:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001c38:	d012      	beq.n	8001c60 <TIM_Base_SetConfig+0x58>
 8001c3a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001c3e:	4290      	cmp	r0, r2
 8001c40:	d00e      	beq.n	8001c60 <TIM_Base_SetConfig+0x58>
 8001c42:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c46:	4290      	cmp	r0, r2
 8001c48:	d00a      	beq.n	8001c60 <TIM_Base_SetConfig+0x58>
 8001c4a:	4a17      	ldr	r2, [pc, #92]	; (8001ca8 <TIM_Base_SetConfig+0xa0>)
 8001c4c:	4290      	cmp	r0, r2
 8001c4e:	d007      	beq.n	8001c60 <TIM_Base_SetConfig+0x58>
 8001c50:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c54:	4290      	cmp	r0, r2
 8001c56:	d003      	beq.n	8001c60 <TIM_Base_SetConfig+0x58>
 8001c58:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c5c:	4290      	cmp	r0, r2
 8001c5e:	d103      	bne.n	8001c68 <TIM_Base_SetConfig+0x60>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c60:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c66:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c68:	694a      	ldr	r2, [r1, #20]
 8001c6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c6e:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001c70:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c72:	688b      	ldr	r3, [r1, #8]
 8001c74:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001c76:	680b      	ldr	r3, [r1, #0]
 8001c78:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c7a:	4b0a      	ldr	r3, [pc, #40]	; (8001ca4 <TIM_Base_SetConfig+0x9c>)
 8001c7c:	4298      	cmp	r0, r3
 8001c7e:	d00b      	beq.n	8001c98 <TIM_Base_SetConfig+0x90>
 8001c80:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8001c84:	4298      	cmp	r0, r3
 8001c86:	d007      	beq.n	8001c98 <TIM_Base_SetConfig+0x90>
 8001c88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c8c:	4298      	cmp	r0, r3
 8001c8e:	d003      	beq.n	8001c98 <TIM_Base_SetConfig+0x90>
 8001c90:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c94:	4298      	cmp	r0, r3
 8001c96:	d101      	bne.n	8001c9c <TIM_Base_SetConfig+0x94>
    TIMx->RCR = Structure->RepetitionCounter;
 8001c98:	690b      	ldr	r3, [r1, #16]
 8001c9a:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	6143      	str	r3, [r0, #20]
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	40012c00 	.word	0x40012c00
 8001ca8:	40014000 	.word	0x40014000

08001cac <HAL_TIM_Base_Init>:
{
 8001cac:	b510      	push	{r4, lr}
  if (htim == NULL)
 8001cae:	4604      	mov	r4, r0
 8001cb0:	b1a0      	cbz	r0, 8001cdc <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001cb2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001cb6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001cba:	b91b      	cbnz	r3, 8001cc4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001cbc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001cc0:	f000 ff76 	bl	8002bb0 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001cc4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cc6:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001cc8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ccc:	1d21      	adds	r1, r4, #4
 8001cce:	f7ff ff9b 	bl	8001c08 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001cd2:	2301      	movs	r3, #1
  return HAL_OK;
 8001cd4:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001cd6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001cda:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001cdc:	2001      	movs	r0, #1
}
 8001cde:	bd10      	pop	{r4, pc}

08001ce0 <HAL_TIM_OC_Init>:
{
 8001ce0:	b510      	push	{r4, lr}
  if (htim == NULL)
 8001ce2:	4604      	mov	r4, r0
 8001ce4:	b1a0      	cbz	r0, 8001d10 <HAL_TIM_OC_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001ce6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001cea:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001cee:	b91b      	cbnz	r3, 8001cf8 <HAL_TIM_OC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001cf0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 8001cf4:	f000 ff3e 	bl	8002b74 <HAL_TIM_OC_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001cf8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001cfa:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001cfc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001d00:	1d21      	adds	r1, r4, #4
 8001d02:	f7ff ff81 	bl	8001c08 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001d06:	2301      	movs	r3, #1
  return HAL_OK;
 8001d08:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001d0a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001d0e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001d10:	2001      	movs	r0, #1
}
 8001d12:	bd10      	pop	{r4, pc}

08001d14 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001d14:	6a03      	ldr	r3, [r0, #32]
{
 8001d16:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001d18:	f023 0310 	bic.w	r3, r3, #16
 8001d1c:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001d1e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8001d20:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001d22:	6984      	ldr	r4, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001d24:	680e      	ldr	r6, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001d26:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001d2a:	ea44 2606 	orr.w	r6, r4, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001d2e:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8001d30:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001d34:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001d38:	4c10      	ldr	r4, [pc, #64]	; (8001d7c <TIM_OC2_SetConfig+0x68>)
 8001d3a:	42a0      	cmp	r0, r4
 8001d3c:	d10e      	bne.n	8001d5c <TIM_OC2_SetConfig+0x48>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001d3e:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8001d40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001d44:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8001d48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001d4c:	694c      	ldr	r4, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001d4e:	698d      	ldr	r5, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001d50:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001d54:	432c      	orrs	r4, r5
 8001d56:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
 8001d5a:	e009      	b.n	8001d70 <TIM_OC2_SetConfig+0x5c>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001d5c:	4d08      	ldr	r5, [pc, #32]	; (8001d80 <TIM_OC2_SetConfig+0x6c>)
 8001d5e:	42a8      	cmp	r0, r5
 8001d60:	d0f4      	beq.n	8001d4c <TIM_OC2_SetConfig+0x38>
 8001d62:	4c08      	ldr	r4, [pc, #32]	; (8001d84 <TIM_OC2_SetConfig+0x70>)
 8001d64:	42a0      	cmp	r0, r4
 8001d66:	d0f1      	beq.n	8001d4c <TIM_OC2_SetConfig+0x38>
 8001d68:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001d6c:	42a0      	cmp	r0, r4
 8001d6e:	d0ed      	beq.n	8001d4c <TIM_OC2_SetConfig+0x38>
  TIMx->CR2 = tmpcr2;
 8001d70:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8001d72:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001d74:	6186      	str	r6, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001d76:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001d78:	6203      	str	r3, [r0, #32]
}
 8001d7a:	bd70      	pop	{r4, r5, r6, pc}
 8001d7c:	40012c00 	.word	0x40012c00
 8001d80:	40014000 	.word	0x40014000
 8001d84:	40014400 	.word	0x40014400

08001d88 <HAL_TIM_OC_ConfigChannel>:
{
 8001d88:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001d8a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001d8e:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	f04f 0002 	mov.w	r0, #2
 8001d96:	d018      	beq.n	8001dca <HAL_TIM_OC_ConfigChannel+0x42>
 8001d98:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8001d9a:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8001d9e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8001da2:	461d      	mov	r5, r3
  switch (Channel)
 8001da4:	2a0c      	cmp	r2, #12
 8001da6:	d80b      	bhi.n	8001dc0 <HAL_TIM_OC_ConfigChannel+0x38>
 8001da8:	e8df f002 	tbb	[pc, r2]
 8001dac:	0a0a0a07 	.word	0x0a0a0a07
 8001db0:	0a0a0a10 	.word	0x0a0a0a10
 8001db4:	0a0a0a14 	.word	0x0a0a0a14
 8001db8:	18          	.byte	0x18
 8001db9:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001dba:	6820      	ldr	r0, [r4, #0]
 8001dbc:	f7ff fdae 	bl	800191c <TIM_OC1_SetConfig>
  __HAL_UNLOCK(htim);
 8001dc0:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001dc2:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001dc6:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001dca:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001dcc:	6820      	ldr	r0, [r4, #0]
 8001dce:	f7ff ffa1 	bl	8001d14 <TIM_OC2_SetConfig>
      break;
 8001dd2:	e7f5      	b.n	8001dc0 <HAL_TIM_OC_ConfigChannel+0x38>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001dd4:	6820      	ldr	r0, [r4, #0]
 8001dd6:	f7ff fde3 	bl	80019a0 <TIM_OC3_SetConfig>
      break;
 8001dda:	e7f1      	b.n	8001dc0 <HAL_TIM_OC_ConfigChannel+0x38>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001ddc:	6820      	ldr	r0, [r4, #0]
 8001dde:	f7ff fe19 	bl	8001a14 <TIM_OC4_SetConfig>
      break;
 8001de2:	e7ed      	b.n	8001dc0 <HAL_TIM_OC_ConfigChannel+0x38>

08001de4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001de4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001de8:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	f04f 0302 	mov.w	r3, #2
 8001df0:	d014      	beq.n	8001e1c <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001df2:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001df4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8001df8:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001dfa:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001dfc:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001dfe:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 8001e00:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001e04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001e08:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001e0a:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001e0c:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001e0e:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001e10:	2301      	movs	r3, #1
 8001e12:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001e16:	2300      	movs	r3, #0
 8001e18:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001e1c:	4618      	mov	r0, r3

  return HAL_OK;
}
 8001e1e:	bd30      	pop	{r4, r5, pc}

08001e20 <HAL_TIMEx_CommutCallback>:
 8001e20:	4770      	bx	lr

08001e22 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e22:	4770      	bx	lr

08001e24 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001e24:	6803      	ldr	r3, [r0, #0]
 8001e26:	68da      	ldr	r2, [r3, #12]
 8001e28:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001e2c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e2e:	695a      	ldr	r2, [r3, #20]
 8001e30:	f022 0201 	bic.w	r2, r2, #1
 8001e34:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001e36:	2320      	movs	r3, #32
 8001e38:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8001e3c:	4770      	bx	lr
	...

08001e40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e40:	b538      	push	{r3, r4, r5, lr}
 8001e42:	4605      	mov	r5, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e44:	6802      	ldr	r2, [r0, #0]
 8001e46:	68c1      	ldr	r1, [r0, #12]
 8001e48:	6913      	ldr	r3, [r2, #16]
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

#if defined(USART_CR1_OVER8)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001e4a:	692c      	ldr	r4, [r5, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e4c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e50:	430b      	orrs	r3, r1
 8001e52:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001e54:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001e56:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001e58:	4323      	orrs	r3, r4
 8001e5a:	696c      	ldr	r4, [r5, #20]
 8001e5c:	69c0      	ldr	r0, [r0, #28]
 8001e5e:	4323      	orrs	r3, r4
  MODIFY_REG(huart->Instance->CR1,
 8001e60:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 8001e64:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001e68:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8001e6a:	430b      	orrs	r3, r1
 8001e6c:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001e6e:	6953      	ldr	r3, [r2, #20]
 8001e70:	69a9      	ldr	r1, [r5, #24]
 8001e72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e76:	430b      	orrs	r3, r1

#if defined(USART_CR1_OVER8)
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e78:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001e7c:	6153      	str	r3, [r2, #20]
 8001e7e:	4b1f      	ldr	r3, [pc, #124]	; (8001efc <UART_SetConfig+0xbc>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e80:	d121      	bne.n	8001ec6 <UART_SetConfig+0x86>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if(huart->Instance == USART1)
 8001e82:	429a      	cmp	r2, r3
 8001e84:	f04f 0419 	mov.w	r4, #25
 8001e88:	d11a      	bne.n	8001ec0 <UART_SetConfig+0x80>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001e8a:	f7ff fd37 	bl	80018fc <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001e8e:	4360      	muls	r0, r4
 8001e90:	686c      	ldr	r4, [r5, #4]
 8001e92:	6829      	ldr	r1, [r5, #0]
 8001e94:	0064      	lsls	r4, r4, #1
 8001e96:	fbb0 f0f4 	udiv	r0, r0, r4
 8001e9a:	2464      	movs	r4, #100	; 0x64
 8001e9c:	fbb0 f5f4 	udiv	r5, r0, r4
 8001ea0:	fb04 0315 	mls	r3, r4, r5, r0
 8001ea4:	00db      	lsls	r3, r3, #3
 8001ea6:	3332      	adds	r3, #50	; 0x32
 8001ea8:	fbb3 f3f4 	udiv	r3, r3, r4
 8001eac:	f003 0207 	and.w	r2, r3, #7
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 8001eb6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001eba:	4413      	add	r3, r2
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001ebc:	608b      	str	r3, [r1, #8]
 8001ebe:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8001ec0:	f7ff fd0c 	bl	80018dc <HAL_RCC_GetPCLK1Freq>
 8001ec4:	e7e3      	b.n	8001e8e <UART_SetConfig+0x4e>
    if(huart->Instance == USART1)
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	f04f 0419 	mov.w	r4, #25
 8001ecc:	d113      	bne.n	8001ef6 <UART_SetConfig+0xb6>
      pclk = HAL_RCC_GetPCLK2Freq();
 8001ece:	f7ff fd15 	bl	80018fc <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001ed2:	4360      	muls	r0, r4
 8001ed4:	686c      	ldr	r4, [r5, #4]
 8001ed6:	2264      	movs	r2, #100	; 0x64
 8001ed8:	00a4      	lsls	r4, r4, #2
 8001eda:	fbb0 f0f4 	udiv	r0, r0, r4
 8001ede:	fbb0 f4f2 	udiv	r4, r0, r2
 8001ee2:	fb02 0314 	mls	r3, r2, r4, r0
 8001ee6:	011b      	lsls	r3, r3, #4
 8001ee8:	3332      	adds	r3, #50	; 0x32
 8001eea:	fbb3 f3f2 	udiv	r3, r3, r2
 8001eee:	6829      	ldr	r1, [r5, #0]
 8001ef0:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8001ef4:	e7e2      	b.n	8001ebc <UART_SetConfig+0x7c>
      pclk = HAL_RCC_GetPCLK1Freq();
 8001ef6:	f7ff fcf1 	bl	80018dc <HAL_RCC_GetPCLK1Freq>
 8001efa:	e7ea      	b.n	8001ed2 <UART_SetConfig+0x92>
 8001efc:	40013800 	.word	0x40013800

08001f00 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8001f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f02:	4604      	mov	r4, r0
 8001f04:	460e      	mov	r6, r1
 8001f06:	4617      	mov	r7, r2
 8001f08:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f0a:	6821      	ldr	r1, [r4, #0]
 8001f0c:	680b      	ldr	r3, [r1, #0]
 8001f0e:	ea36 0303 	bics.w	r3, r6, r3
 8001f12:	d101      	bne.n	8001f18 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8001f14:	2000      	movs	r0, #0
}
 8001f16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001f18:	1c6b      	adds	r3, r5, #1
 8001f1a:	d0f7      	beq.n	8001f0c <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001f1c:	b995      	cbnz	r5, 8001f44 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001f1e:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8001f20:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001f22:	68da      	ldr	r2, [r3, #12]
 8001f24:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001f28:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f2a:	695a      	ldr	r2, [r3, #20]
 8001f2c:	f022 0201 	bic.w	r2, r2, #1
 8001f30:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001f32:	2320      	movs	r3, #32
 8001f34:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001f38:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8001f42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001f44:	f7ff f8ae 	bl	80010a4 <HAL_GetTick>
 8001f48:	1bc0      	subs	r0, r0, r7
 8001f4a:	4285      	cmp	r5, r0
 8001f4c:	d2dd      	bcs.n	8001f0a <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8001f4e:	e7e6      	b.n	8001f1e <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08001f50 <HAL_UART_Init>:
{
 8001f50:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001f52:	4604      	mov	r4, r0
 8001f54:	b340      	cbz	r0, 8001fa8 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001f56:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001f5a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001f5e:	b91b      	cbnz	r3, 8001f68 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001f60:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001f64:	f000 fe42 	bl	8002bec <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001f68:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001f6a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001f6c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001f70:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8001f72:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8001f74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001f78:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001f7a:	f7ff ff61 	bl	8001e40 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f7e:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f80:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f82:	691a      	ldr	r2, [r3, #16]
 8001f84:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f8a:	695a      	ldr	r2, [r3, #20]
 8001f8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f90:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001f92:	68da      	ldr	r2, [r3, #12]
 8001f94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f98:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001f9a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f9c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001f9e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001fa2:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001fa6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001fa8:	2001      	movs	r0, #1
}
 8001faa:	bd10      	pop	{r4, pc}

08001fac <HAL_UART_Transmit>:
{
 8001fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001fb0:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001fb2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8001fb6:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8001fb8:	2b20      	cmp	r3, #32
{
 8001fba:	460d      	mov	r5, r1
 8001fbc:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8001fbe:	d14e      	bne.n	800205e <HAL_UART_Transmit+0xb2>
    if ((pData == NULL) || (Size == 0U))
 8001fc0:	2900      	cmp	r1, #0
 8001fc2:	d049      	beq.n	8002058 <HAL_UART_Transmit+0xac>
 8001fc4:	2a00      	cmp	r2, #0
 8001fc6:	d047      	beq.n	8002058 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8001fc8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d046      	beq.n	800205e <HAL_UART_Transmit+0xb2>
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001fda:	2321      	movs	r3, #33	; 0x21
 8001fdc:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001fe0:	f7ff f860 	bl	80010a4 <HAL_GetTick>
 8001fe4:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 8001fe6:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8001fea:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001fee:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	b96b      	cbnz	r3, 8002010 <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001ff4:	463b      	mov	r3, r7
 8001ff6:	4632      	mov	r2, r6
 8001ff8:	2140      	movs	r1, #64	; 0x40
 8001ffa:	4620      	mov	r0, r4
 8001ffc:	f7ff ff80 	bl	8001f00 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002000:	b9a8      	cbnz	r0, 800202e <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8002002:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8002004:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8002008:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 800200c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8002010:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002012:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8002014:	3b01      	subs	r3, #1
 8002016:	b29b      	uxth	r3, r3
 8002018:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800201a:	68a3      	ldr	r3, [r4, #8]
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800201c:	2180      	movs	r1, #128	; 0x80
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800201e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002022:	4620      	mov	r0, r4
 8002024:	463b      	mov	r3, r7
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002026:	d10e      	bne.n	8002046 <HAL_UART_Transmit+0x9a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002028:	f7ff ff6a 	bl	8001f00 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800202c:	b110      	cbz	r0, 8002034 <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 800202e:	2003      	movs	r0, #3
 8002030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002034:	882b      	ldrh	r3, [r5, #0]
 8002036:	6822      	ldr	r2, [r4, #0]
 8002038:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800203c:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800203e:	6923      	ldr	r3, [r4, #16]
 8002040:	b943      	cbnz	r3, 8002054 <HAL_UART_Transmit+0xa8>
          pData += 2U;
 8002042:	3502      	adds	r5, #2
 8002044:	e7d3      	b.n	8001fee <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002046:	f7ff ff5b 	bl	8001f00 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800204a:	2800      	cmp	r0, #0
 800204c:	d1ef      	bne.n	800202e <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800204e:	6823      	ldr	r3, [r4, #0]
 8002050:	782a      	ldrb	r2, [r5, #0]
 8002052:	605a      	str	r2, [r3, #4]
 8002054:	3501      	adds	r5, #1
 8002056:	e7ca      	b.n	8001fee <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8002058:	2001      	movs	r0, #1
 800205a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800205e:	2002      	movs	r0, #2
}
 8002060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002064 <HAL_UART_TxCpltCallback>:
 8002064:	4770      	bx	lr

08002066 <HAL_UART_RxCpltCallback>:
 8002066:	4770      	bx	lr

08002068 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002068:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 800206c:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800206e:	2b22      	cmp	r3, #34	; 0x22
 8002070:	d136      	bne.n	80020e0 <UART_Receive_IT+0x78>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002072:	6883      	ldr	r3, [r0, #8]
 8002074:	6901      	ldr	r1, [r0, #16]
 8002076:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800207a:	6802      	ldr	r2, [r0, #0]
 800207c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800207e:	d123      	bne.n	80020c8 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002080:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002082:	b9e9      	cbnz	r1, 80020c0 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002084:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002088:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 800208c:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 800208e:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8002090:	3c01      	subs	r4, #1
 8002092:	b2a4      	uxth	r4, r4
 8002094:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8002096:	b98c      	cbnz	r4, 80020bc <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002098:	6803      	ldr	r3, [r0, #0]
 800209a:	68da      	ldr	r2, [r3, #12]
 800209c:	f022 0220 	bic.w	r2, r2, #32
 80020a0:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80020a2:	68da      	ldr	r2, [r3, #12]
 80020a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020a8:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80020aa:	695a      	ldr	r2, [r3, #20]
 80020ac:	f022 0201 	bic.w	r2, r2, #1
 80020b0:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80020b2:	2320      	movs	r3, #32
 80020b4:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 80020b8:	f7ff ffd5 	bl	8002066 <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 80020bc:	2000      	movs	r0, #0
}
 80020be:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80020c0:	b2d2      	uxtb	r2, r2
 80020c2:	f823 2b01 	strh.w	r2, [r3], #1
 80020c6:	e7e1      	b.n	800208c <UART_Receive_IT+0x24>
      if (huart->Init.Parity == UART_PARITY_NONE)
 80020c8:	b921      	cbnz	r1, 80020d4 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80020ca:	1c59      	adds	r1, r3, #1
 80020cc:	6852      	ldr	r2, [r2, #4]
 80020ce:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80020d0:	701a      	strb	r2, [r3, #0]
 80020d2:	e7dc      	b.n	800208e <UART_Receive_IT+0x26>
 80020d4:	6852      	ldr	r2, [r2, #4]
 80020d6:	1c59      	adds	r1, r3, #1
 80020d8:	6281      	str	r1, [r0, #40]	; 0x28
 80020da:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80020de:	e7f7      	b.n	80020d0 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 80020e0:	2002      	movs	r0, #2
 80020e2:	bd10      	pop	{r4, pc}

080020e4 <HAL_UART_ErrorCallback>:
 80020e4:	4770      	bx	lr
	...

080020e8 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80020e8:	6803      	ldr	r3, [r0, #0]
{
 80020ea:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80020ec:	681a      	ldr	r2, [r3, #0]
{
 80020ee:	4604      	mov	r4, r0
  if (errorflags == RESET)
 80020f0:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80020f2:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80020f4:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 80020f6:	d107      	bne.n	8002108 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80020f8:	0696      	lsls	r6, r2, #26
 80020fa:	d55a      	bpl.n	80021b2 <HAL_UART_IRQHandler+0xca>
 80020fc:	068d      	lsls	r5, r1, #26
 80020fe:	d558      	bpl.n	80021b2 <HAL_UART_IRQHandler+0xca>
}
 8002100:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8002104:	f7ff bfb0 	b.w	8002068 <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002108:	f015 0501 	ands.w	r5, r5, #1
 800210c:	d102      	bne.n	8002114 <HAL_UART_IRQHandler+0x2c>
 800210e:	f411 7f90 	tst.w	r1, #288	; 0x120
 8002112:	d04e      	beq.n	80021b2 <HAL_UART_IRQHandler+0xca>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002114:	07d3      	lsls	r3, r2, #31
 8002116:	d505      	bpl.n	8002124 <HAL_UART_IRQHandler+0x3c>
 8002118:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800211a:	bf42      	ittt	mi
 800211c:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 800211e:	f043 0301 	orrmi.w	r3, r3, #1
 8002122:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002124:	0750      	lsls	r0, r2, #29
 8002126:	d504      	bpl.n	8002132 <HAL_UART_IRQHandler+0x4a>
 8002128:	b11d      	cbz	r5, 8002132 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800212a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800212c:	f043 0302 	orr.w	r3, r3, #2
 8002130:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002132:	0793      	lsls	r3, r2, #30
 8002134:	d504      	bpl.n	8002140 <HAL_UART_IRQHandler+0x58>
 8002136:	b11d      	cbz	r5, 8002140 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002138:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800213a:	f043 0304 	orr.w	r3, r3, #4
 800213e:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002140:	0716      	lsls	r6, r2, #28
 8002142:	d504      	bpl.n	800214e <HAL_UART_IRQHandler+0x66>
 8002144:	b11d      	cbz	r5, 800214e <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002146:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002148:	f043 0308 	orr.w	r3, r3, #8
 800214c:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800214e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002150:	2b00      	cmp	r3, #0
 8002152:	d066      	beq.n	8002222 <HAL_UART_IRQHandler+0x13a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002154:	0695      	lsls	r5, r2, #26
 8002156:	d504      	bpl.n	8002162 <HAL_UART_IRQHandler+0x7a>
 8002158:	0688      	lsls	r0, r1, #26
 800215a:	d502      	bpl.n	8002162 <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 800215c:	4620      	mov	r0, r4
 800215e:	f7ff ff83 	bl	8002068 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002162:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8002164:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002166:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002168:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800216a:	0711      	lsls	r1, r2, #28
 800216c:	d402      	bmi.n	8002174 <HAL_UART_IRQHandler+0x8c>
 800216e:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8002172:	d01a      	beq.n	80021aa <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8002174:	f7ff fe56 	bl	8001e24 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002178:	6823      	ldr	r3, [r4, #0]
 800217a:	695a      	ldr	r2, [r3, #20]
 800217c:	0652      	lsls	r2, r2, #25
 800217e:	d510      	bpl.n	80021a2 <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002180:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8002182:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002184:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002188:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800218a:	b150      	cbz	r0, 80021a2 <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800218c:	4b25      	ldr	r3, [pc, #148]	; (8002224 <HAL_UART_IRQHandler+0x13c>)
 800218e:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002190:	f7ff f80a 	bl	80011a8 <HAL_DMA_Abort_IT>
 8002194:	2800      	cmp	r0, #0
 8002196:	d044      	beq.n	8002222 <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002198:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 800219a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800219e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80021a0:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 80021a2:	4620      	mov	r0, r4
 80021a4:	f7ff ff9e 	bl	80020e4 <HAL_UART_ErrorCallback>
 80021a8:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 80021aa:	f7ff ff9b 	bl	80020e4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021ae:	63e5      	str	r5, [r4, #60]	; 0x3c
 80021b0:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80021b2:	0616      	lsls	r6, r2, #24
 80021b4:	d527      	bpl.n	8002206 <HAL_UART_IRQHandler+0x11e>
 80021b6:	060d      	lsls	r5, r1, #24
 80021b8:	d525      	bpl.n	8002206 <HAL_UART_IRQHandler+0x11e>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80021ba:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80021be:	2a21      	cmp	r2, #33	; 0x21
 80021c0:	d12f      	bne.n	8002222 <HAL_UART_IRQHandler+0x13a>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80021c2:	68a2      	ldr	r2, [r4, #8]
 80021c4:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80021c8:	6a22      	ldr	r2, [r4, #32]
 80021ca:	d117      	bne.n	80021fc <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80021cc:	8811      	ldrh	r1, [r2, #0]
 80021ce:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80021d2:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80021d4:	6921      	ldr	r1, [r4, #16]
 80021d6:	b979      	cbnz	r1, 80021f8 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 80021d8:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 80021da:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 80021dc:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80021de:	3a01      	subs	r2, #1
 80021e0:	b292      	uxth	r2, r2
 80021e2:	84e2      	strh	r2, [r4, #38]	; 0x26
 80021e4:	b9ea      	cbnz	r2, 8002222 <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80021e6:	68da      	ldr	r2, [r3, #12]
 80021e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021ec:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80021ee:	68da      	ldr	r2, [r3, #12]
 80021f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021f4:	60da      	str	r2, [r3, #12]
 80021f6:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 80021f8:	3201      	adds	r2, #1
 80021fa:	e7ee      	b.n	80021da <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80021fc:	1c51      	adds	r1, r2, #1
 80021fe:	6221      	str	r1, [r4, #32]
 8002200:	7812      	ldrb	r2, [r2, #0]
 8002202:	605a      	str	r2, [r3, #4]
 8002204:	e7ea      	b.n	80021dc <HAL_UART_IRQHandler+0xf4>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002206:	0650      	lsls	r0, r2, #25
 8002208:	d50b      	bpl.n	8002222 <HAL_UART_IRQHandler+0x13a>
 800220a:	064a      	lsls	r2, r1, #25
 800220c:	d509      	bpl.n	8002222 <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800220e:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8002210:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002212:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002216:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002218:	2320      	movs	r3, #32
 800221a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 800221e:	f7ff ff21 	bl	8002064 <HAL_UART_TxCpltCallback>
 8002222:	bd70      	pop	{r4, r5, r6, pc}
 8002224:	08002229 	.word	0x08002229

08002228 <UART_DMAAbortOnError>:
{
 8002228:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 800222a:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800222c:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 800222e:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002230:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8002232:	f7ff ff57 	bl	80020e4 <HAL_UART_ErrorCallback>
 8002236:	bd08      	pop	{r3, pc}

08002238 <enableClock>:
}

// enables GPIO RCC Clock
void enableClock(void)
{  
  if(_port == GPIOA)
 8002238:	4b24      	ldr	r3, [pc, #144]	; (80022cc <enableClock+0x94>)
 800223a:	4a25      	ldr	r2, [pc, #148]	; (80022d0 <enableClock+0x98>)
 800223c:	681b      	ldr	r3, [r3, #0]
{  
 800223e:	b086      	sub	sp, #24
  if(_port == GPIOA)
 8002240:	4293      	cmp	r3, r2
 8002242:	d10b      	bne.n	800225c <enableClock+0x24>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8002244:	4b23      	ldr	r3, [pc, #140]	; (80022d4 <enableClock+0x9c>)
 8002246:	699a      	ldr	r2, [r3, #24]
 8002248:	f042 0204 	orr.w	r2, r2, #4
 800224c:	619a      	str	r2, [r3, #24]
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	f003 0304 	and.w	r3, r3, #4
 8002254:	9301      	str	r3, [sp, #4]
 8002256:	9b01      	ldr	r3, [sp, #4]
		__HAL_RCC_GPIOE_CLK_ENABLE();
	//else if(_port == GPIOF)
	//	__HAL_RCC_GPIOF_CLK_ENABLE();

  // if you have a port that is not listed add it below the other else ifs
}
 8002258:	b006      	add	sp, #24
 800225a:	4770      	bx	lr
  else if(_port == GPIOB)
 800225c:	4a1e      	ldr	r2, [pc, #120]	; (80022d8 <enableClock+0xa0>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d10a      	bne.n	8002278 <enableClock+0x40>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8002262:	4b1c      	ldr	r3, [pc, #112]	; (80022d4 <enableClock+0x9c>)
 8002264:	699a      	ldr	r2, [r3, #24]
 8002266:	f042 0208 	orr.w	r2, r2, #8
 800226a:	619a      	str	r2, [r3, #24]
 800226c:	699b      	ldr	r3, [r3, #24]
 800226e:	f003 0308 	and.w	r3, r3, #8
 8002272:	9302      	str	r3, [sp, #8]
 8002274:	9b02      	ldr	r3, [sp, #8]
 8002276:	e7ef      	b.n	8002258 <enableClock+0x20>
	else if(_port == GPIOC)
 8002278:	4a18      	ldr	r2, [pc, #96]	; (80022dc <enableClock+0xa4>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d10a      	bne.n	8002294 <enableClock+0x5c>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 800227e:	4b15      	ldr	r3, [pc, #84]	; (80022d4 <enableClock+0x9c>)
 8002280:	699a      	ldr	r2, [r3, #24]
 8002282:	f042 0210 	orr.w	r2, r2, #16
 8002286:	619a      	str	r2, [r3, #24]
 8002288:	699b      	ldr	r3, [r3, #24]
 800228a:	f003 0310 	and.w	r3, r3, #16
 800228e:	9303      	str	r3, [sp, #12]
 8002290:	9b03      	ldr	r3, [sp, #12]
 8002292:	e7e1      	b.n	8002258 <enableClock+0x20>
	else if(_port == GPIOD)
 8002294:	4a12      	ldr	r2, [pc, #72]	; (80022e0 <enableClock+0xa8>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d10a      	bne.n	80022b0 <enableClock+0x78>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 800229a:	4b0e      	ldr	r3, [pc, #56]	; (80022d4 <enableClock+0x9c>)
 800229c:	699a      	ldr	r2, [r3, #24]
 800229e:	f042 0220 	orr.w	r2, r2, #32
 80022a2:	619a      	str	r2, [r3, #24]
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	f003 0320 	and.w	r3, r3, #32
 80022aa:	9304      	str	r3, [sp, #16]
 80022ac:	9b04      	ldr	r3, [sp, #16]
 80022ae:	e7d3      	b.n	8002258 <enableClock+0x20>
	else if(_port == GPIOE)
 80022b0:	4a0c      	ldr	r2, [pc, #48]	; (80022e4 <enableClock+0xac>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d1d0      	bne.n	8002258 <enableClock+0x20>
		__HAL_RCC_GPIOE_CLK_ENABLE();
 80022b6:	4b07      	ldr	r3, [pc, #28]	; (80022d4 <enableClock+0x9c>)
 80022b8:	699a      	ldr	r2, [r3, #24]
 80022ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022be:	619a      	str	r2, [r3, #24]
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022c6:	9305      	str	r3, [sp, #20]
 80022c8:	9b05      	ldr	r3, [sp, #20]
}
 80022ca:	e7c5      	b.n	8002258 <enableClock+0x20>
 80022cc:	200000f0 	.word	0x200000f0
 80022d0:	40010800 	.word	0x40010800
 80022d4:	40021000 	.word	0x40021000
 80022d8:	40010c00 	.word	0x40010c00
 80022dc:	40011000 	.word	0x40011000
 80022e0:	40011400 	.word	0x40011400
 80022e4:	40011800 	.word	0x40011800

080022e8 <pulseEnable>:
    write4bits(value>>4);
    write4bits(value);
  }
}

void pulseEnable(void) {
 80022e8:	b538      	push	{r3, r4, r5, lr}
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 80022ea:	4d0e      	ldr	r5, [pc, #56]	; (8002324 <pulseEnable+0x3c>)
 80022ec:	4c0e      	ldr	r4, [pc, #56]	; (8002328 <pulseEnable+0x40>)
 80022ee:	8829      	ldrh	r1, [r5, #0]
 80022f0:	2200      	movs	r2, #0
 80022f2:	6820      	ldr	r0, [r4, #0]
 80022f4:	f7ff f888 	bl	8001408 <HAL_GPIO_WritePin>
  HAL_Delay(1);    
 80022f8:	2001      	movs	r0, #1
 80022fa:	f7fe fed9 	bl	80010b0 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_SET);
 80022fe:	8829      	ldrh	r1, [r5, #0]
 8002300:	2201      	movs	r2, #1
 8002302:	6820      	ldr	r0, [r4, #0]
 8002304:	f7ff f880 	bl	8001408 <HAL_GPIO_WritePin>
  HAL_Delay(1);    // enable pulse must be >450ns
 8002308:	2001      	movs	r0, #1
 800230a:	f7fe fed1 	bl	80010b0 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 800230e:	6820      	ldr	r0, [r4, #0]
 8002310:	8829      	ldrh	r1, [r5, #0]
 8002312:	2200      	movs	r2, #0
 8002314:	f7ff f878 	bl	8001408 <HAL_GPIO_WritePin>
  HAL_Delay(1);   // commands need > 37us to settle
}
 8002318:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Delay(1);   // commands need > 37us to settle
 800231c:	2001      	movs	r0, #1
 800231e:	f7fe bec7 	b.w	80010b0 <HAL_Delay>
 8002322:	bf00      	nop
 8002324:	20000108 	.word	0x20000108
 8002328:	200000f0 	.word	0x200000f0

0800232c <write4bits>:

void write4bits(uint8_t value) {
 800232c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800232e:	4607      	mov	r7, r0
  for (int i = 0; i < 4; i++) {
 8002330:	2400      	movs	r4, #0
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8002332:	4e09      	ldr	r6, [pc, #36]	; (8002358 <write4bits+0x2c>)
 8002334:	4d09      	ldr	r5, [pc, #36]	; (800235c <write4bits+0x30>)
 8002336:	fa47 f204 	asr.w	r2, r7, r4
 800233a:	f836 1014 	ldrh.w	r1, [r6, r4, lsl #1]
 800233e:	f002 0201 	and.w	r2, r2, #1
 8002342:	6828      	ldr	r0, [r5, #0]
  for (int i = 0; i < 4; i++) {
 8002344:	3401      	adds	r4, #1
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8002346:	f7ff f85f 	bl	8001408 <HAL_GPIO_WritePin>
  for (int i = 0; i < 4; i++) {
 800234a:	2c04      	cmp	r4, #4
 800234c:	d1f3      	bne.n	8002336 <write4bits+0xa>
  }

  pulseEnable();
}
 800234e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  pulseEnable();
 8002352:	f7ff bfc9 	b.w	80022e8 <pulseEnable>
 8002356:	bf00      	nop
 8002358:	200000f6 	.word	0x200000f6
 800235c:	200000f0 	.word	0x200000f0

08002360 <write8bits>:

void write8bits(uint8_t value) {
 8002360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002362:	4607      	mov	r7, r0
  for (int i = 0; i < 8; i++) {
 8002364:	2400      	movs	r4, #0
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8002366:	4e09      	ldr	r6, [pc, #36]	; (800238c <write8bits+0x2c>)
 8002368:	4d09      	ldr	r5, [pc, #36]	; (8002390 <write8bits+0x30>)
 800236a:	fa47 f204 	asr.w	r2, r7, r4
 800236e:	f836 1014 	ldrh.w	r1, [r6, r4, lsl #1]
 8002372:	f002 0201 	and.w	r2, r2, #1
 8002376:	6828      	ldr	r0, [r5, #0]
  for (int i = 0; i < 8; i++) {
 8002378:	3401      	adds	r4, #1
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 800237a:	f7ff f845 	bl	8001408 <HAL_GPIO_WritePin>
  for (int i = 0; i < 8; i++) {
 800237e:	2c08      	cmp	r4, #8
 8002380:	d1f3      	bne.n	800236a <write8bits+0xa>
  }
  
  pulseEnable();
}
 8002382:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  pulseEnable();
 8002386:	f7ff bfaf 	b.w	80022e8 <pulseEnable>
 800238a:	bf00      	nop
 800238c:	200000f6 	.word	0x200000f6
 8002390:	200000f0 	.word	0x200000f0

08002394 <send>:
void send(uint8_t value, GPIO_PinState mode) {
 8002394:	b538      	push	{r3, r4, r5, lr}
  HAL_GPIO_WritePin(_port, _rs_pin, mode);
 8002396:	4b10      	ldr	r3, [pc, #64]	; (80023d8 <send+0x44>)
 8002398:	4d10      	ldr	r5, [pc, #64]	; (80023dc <send+0x48>)
 800239a:	460a      	mov	r2, r1
void send(uint8_t value, GPIO_PinState mode) {
 800239c:	4604      	mov	r4, r0
  HAL_GPIO_WritePin(_port, _rs_pin, mode);
 800239e:	8819      	ldrh	r1, [r3, #0]
 80023a0:	6828      	ldr	r0, [r5, #0]
 80023a2:	f7ff f831 	bl	8001408 <HAL_GPIO_WritePin>
  if (_rw_pin != 255) { 
 80023a6:	4b0e      	ldr	r3, [pc, #56]	; (80023e0 <send+0x4c>)
 80023a8:	8819      	ldrh	r1, [r3, #0]
 80023aa:	29ff      	cmp	r1, #255	; 0xff
 80023ac:	d003      	beq.n	80023b6 <send+0x22>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 80023ae:	2200      	movs	r2, #0
 80023b0:	6828      	ldr	r0, [r5, #0]
 80023b2:	f7ff f829 	bl	8001408 <HAL_GPIO_WritePin>
  if (_displayfunction & LCD_8BITMODE) {
 80023b6:	4b0b      	ldr	r3, [pc, #44]	; (80023e4 <send+0x50>)
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	06db      	lsls	r3, r3, #27
 80023bc:	d504      	bpl.n	80023c8 <send+0x34>
    write8bits(value); 
 80023be:	4620      	mov	r0, r4
}
 80023c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    write8bits(value); 
 80023c4:	f7ff bfcc 	b.w	8002360 <write8bits>
    write4bits(value>>4);
 80023c8:	0920      	lsrs	r0, r4, #4
 80023ca:	f7ff ffaf 	bl	800232c <write4bits>
    write4bits(value);
 80023ce:	4620      	mov	r0, r4
}
 80023d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    write4bits(value);
 80023d4:	f7ff bfaa 	b.w	800232c <write4bits>
 80023d8:	2000010a 	.word	0x2000010a
 80023dc:	200000f0 	.word	0x200000f0
 80023e0:	200000ec 	.word	0x200000ec
 80023e4:	20000107 	.word	0x20000107

080023e8 <command>:
  send(value, GPIO_PIN_RESET);
 80023e8:	2100      	movs	r1, #0
 80023ea:	f7ff bfd3 	b.w	8002394 <send>

080023ee <clear>:
{
 80023ee:	b508      	push	{r3, lr}
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
 80023f0:	2001      	movs	r0, #1
 80023f2:	f7ff fff9 	bl	80023e8 <command>
}
 80023f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_Delay(2);  // this command takes a long time!
 80023fa:	2002      	movs	r0, #2
 80023fc:	f7fe be58 	b.w	80010b0 <HAL_Delay>

08002400 <setCursor>:
{
 8002400:	2903      	cmp	r1, #3
 8002402:	bf28      	it	cs
 8002404:	2103      	movcs	r1, #3
  if ( row >= _numlines ) {
 8002406:	4b07      	ldr	r3, [pc, #28]	; (8002424 <setCursor+0x24>)
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	428b      	cmp	r3, r1
    row = _numlines - 1;    // we count rows starting w/0
 800240c:	bf9c      	itt	ls
 800240e:	f103 33ff 	addls.w	r3, r3, #4294967295
 8002412:	b2d9      	uxtbls	r1, r3
  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
 8002414:	4b04      	ldr	r3, [pc, #16]	; (8002428 <setCursor+0x28>)
 8002416:	5c5b      	ldrb	r3, [r3, r1]
 8002418:	4418      	add	r0, r3
 800241a:	f060 007f 	orn	r0, r0, #127	; 0x7f
 800241e:	b2c0      	uxtb	r0, r0
 8002420:	f7ff bfe2 	b.w	80023e8 <command>
 8002424:	200000f5 	.word	0x200000f5
 8002428:	200000e8 	.word	0x200000e8

0800242c <display>:
  _displaycontrol |= LCD_DISPLAYON;
 800242c:	4b04      	ldr	r3, [pc, #16]	; (8002440 <display+0x14>)
 800242e:	7818      	ldrb	r0, [r3, #0]
 8002430:	f040 0204 	orr.w	r2, r0, #4
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 8002434:	f040 000c 	orr.w	r0, r0, #12
  _displaycontrol |= LCD_DISPLAYON;
 8002438:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 800243a:	f7ff bfd5 	b.w	80023e8 <command>
 800243e:	bf00      	nop
 8002440:	200000f4 	.word	0x200000f4

08002444 <begin>:
void begin(uint8_t cols, uint8_t lines) {
 8002444:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  _row_offsets[0] = row0;
 8002448:	2200      	movs	r2, #0
 800244a:	4c55      	ldr	r4, [pc, #340]	; (80025a0 <begin+0x15c>)
  if (lines > 1) {
 800244c:	2901      	cmp	r1, #1
    _displayfunction |= LCD_2LINE;
 800244e:	bf82      	ittt	hi
 8002450:	7823      	ldrbhi	r3, [r4, #0]
 8002452:	f043 0308 	orrhi.w	r3, r3, #8
 8002456:	7023      	strbhi	r3, [r4, #0]
  _numlines = lines;
 8002458:	4b52      	ldr	r3, [pc, #328]	; (80025a4 <begin+0x160>)
 800245a:	7019      	strb	r1, [r3, #0]
  _row_offsets[0] = row0;
 800245c:	4b52      	ldr	r3, [pc, #328]	; (80025a8 <begin+0x164>)
 800245e:	701a      	strb	r2, [r3, #0]
  _row_offsets[1] = row1;
 8002460:	2240      	movs	r2, #64	; 0x40
  _row_offsets[2] = row2;
 8002462:	7098      	strb	r0, [r3, #2]
  setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);  
 8002464:	4410      	add	r0, r2
  _row_offsets[1] = row1;
 8002466:	705a      	strb	r2, [r3, #1]
  _row_offsets[3] = row3;
 8002468:	70d8      	strb	r0, [r3, #3]
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 800246a:	4b50      	ldr	r3, [pc, #320]	; (80025ac <begin+0x168>)
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	b12b      	cbz	r3, 800247c <begin+0x38>
 8002470:	2901      	cmp	r1, #1
    _displayfunction |= LCD_5x10DOTS;
 8002472:	bf02      	ittt	eq
 8002474:	7823      	ldrbeq	r3, [r4, #0]
 8002476:	f043 0304 	orreq.w	r3, r3, #4
 800247a:	7023      	strbeq	r3, [r4, #0]
  enableClock();
 800247c:	f7ff fedc 	bl	8002238 <enableClock>
  gpio_init.Speed = GPIO_SPEED_FREQ_HIGH;
 8002480:	2303      	movs	r3, #3
 8002482:	9303      	str	r3, [sp, #12]
  gpio_init.Mode = GPIO_MODE_OUTPUT_PP;
 8002484:	2301      	movs	r3, #1
 8002486:	9301      	str	r3, [sp, #4]
  if(_fourbit_mode)
 8002488:	4b49      	ldr	r3, [pc, #292]	; (80025b0 <begin+0x16c>)
 800248a:	4f4a      	ldr	r7, [pc, #296]	; (80025b4 <begin+0x170>)
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	4d4a      	ldr	r5, [pc, #296]	; (80025b8 <begin+0x174>)
 8002490:	4e4a      	ldr	r6, [pc, #296]	; (80025bc <begin+0x178>)
 8002492:	4a4b      	ldr	r2, [pc, #300]	; (80025c0 <begin+0x17c>)
 8002494:	2b00      	cmp	r3, #0
 8002496:	d059      	beq.n	800254c <begin+0x108>
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3];
 8002498:	8829      	ldrh	r1, [r5, #0]
 800249a:	883b      	ldrh	r3, [r7, #0]
 800249c:	430b      	orrs	r3, r1
 800249e:	8831      	ldrh	r1, [r6, #0]
 80024a0:	430b      	orrs	r3, r1
 80024a2:	8811      	ldrh	r1, [r2, #0]
 80024a4:	430b      	orrs	r3, r1
 80024a6:	8851      	ldrh	r1, [r2, #2]
 80024a8:	430b      	orrs	r3, r1
 80024aa:	8891      	ldrh	r1, [r2, #4]
 80024ac:	88d2      	ldrh	r2, [r2, #6]
 80024ae:	430b      	orrs	r3, r1
  HAL_GPIO_Init(_port, &gpio_init);
 80024b0:	f8df 8118 	ldr.w	r8, [pc, #280]	; 80025cc <begin+0x188>
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 80024b4:	4313      	orrs	r3, r2
 80024b6:	b29b      	uxth	r3, r3
  HAL_GPIO_Init(_port, &gpio_init);
 80024b8:	4669      	mov	r1, sp
 80024ba:	f8d8 0000 	ldr.w	r0, [r8]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 80024be:	9300      	str	r3, [sp, #0]
  HAL_GPIO_Init(_port, &gpio_init);
 80024c0:	f7fe feba 	bl	8001238 <HAL_GPIO_Init>
  HAL_Delay(50); 
 80024c4:	2032      	movs	r0, #50	; 0x32
 80024c6:	f7fe fdf3 	bl	80010b0 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _rs_pin, GPIO_PIN_RESET);
 80024ca:	2200      	movs	r2, #0
 80024cc:	8839      	ldrh	r1, [r7, #0]
 80024ce:	f8d8 0000 	ldr.w	r0, [r8]
 80024d2:	f7fe ff99 	bl	8001408 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 80024d6:	8831      	ldrh	r1, [r6, #0]
 80024d8:	2200      	movs	r2, #0
 80024da:	f8d8 0000 	ldr.w	r0, [r8]
 80024de:	f7fe ff93 	bl	8001408 <HAL_GPIO_WritePin>
  if (_rw_pin != 255) { 
 80024e2:	8829      	ldrh	r1, [r5, #0]
 80024e4:	29ff      	cmp	r1, #255	; 0xff
 80024e6:	d004      	beq.n	80024f2 <begin+0xae>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 80024e8:	2200      	movs	r2, #0
 80024ea:	f8d8 0000 	ldr.w	r0, [r8]
 80024ee:	f7fe ff8b 	bl	8001408 <HAL_GPIO_WritePin>
  if (! (_displayfunction & LCD_8BITMODE)) {
 80024f2:	7820      	ldrb	r0, [r4, #0]
 80024f4:	06c3      	lsls	r3, r0, #27
 80024f6:	d43e      	bmi.n	8002576 <begin+0x132>
    write4bits(0x03);
 80024f8:	2003      	movs	r0, #3
 80024fa:	f7ff ff17 	bl	800232c <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 80024fe:	2005      	movs	r0, #5
 8002500:	f7fe fdd6 	bl	80010b0 <HAL_Delay>
    write4bits(0x03);
 8002504:	2003      	movs	r0, #3
 8002506:	f7ff ff11 	bl	800232c <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 800250a:	2005      	movs	r0, #5
 800250c:	f7fe fdd0 	bl	80010b0 <HAL_Delay>
    write4bits(0x03); 
 8002510:	2003      	movs	r0, #3
 8002512:	f7ff ff0b 	bl	800232c <write4bits>
    HAL_Delay(1);
 8002516:	2001      	movs	r0, #1
 8002518:	f7fe fdca 	bl	80010b0 <HAL_Delay>
    write4bits(0x02); 
 800251c:	2002      	movs	r0, #2
 800251e:	f7ff ff05 	bl	800232c <write4bits>
  command(LCD_FUNCTIONSET | _displayfunction);  
 8002522:	7820      	ldrb	r0, [r4, #0]
 8002524:	f040 0020 	orr.w	r0, r0, #32
 8002528:	f7ff ff5e 	bl	80023e8 <command>
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;  
 800252c:	2204      	movs	r2, #4
 800252e:	4b25      	ldr	r3, [pc, #148]	; (80025c4 <begin+0x180>)
 8002530:	701a      	strb	r2, [r3, #0]
  display();
 8002532:	f7ff ff7b 	bl	800242c <display>
  clear();
 8002536:	f7ff ff5a 	bl	80023ee <clear>
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 800253a:	2202      	movs	r2, #2
 800253c:	4b22      	ldr	r3, [pc, #136]	; (80025c8 <begin+0x184>)
  command(LCD_ENTRYMODESET | _displaymode);
 800253e:	2006      	movs	r0, #6
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8002540:	701a      	strb	r2, [r3, #0]
  command(LCD_ENTRYMODESET | _displaymode);
 8002542:	f7ff ff51 	bl	80023e8 <command>
}
 8002546:	b004      	add	sp, #16
 8002548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 800254c:	8829      	ldrh	r1, [r5, #0]
 800254e:	883b      	ldrh	r3, [r7, #0]
 8002550:	430b      	orrs	r3, r1
 8002552:	8831      	ldrh	r1, [r6, #0]
 8002554:	430b      	orrs	r3, r1
 8002556:	8811      	ldrh	r1, [r2, #0]
 8002558:	430b      	orrs	r3, r1
 800255a:	8851      	ldrh	r1, [r2, #2]
 800255c:	430b      	orrs	r3, r1
 800255e:	8891      	ldrh	r1, [r2, #4]
 8002560:	430b      	orrs	r3, r1
 8002562:	88d1      	ldrh	r1, [r2, #6]
 8002564:	430b      	orrs	r3, r1
 8002566:	8911      	ldrh	r1, [r2, #8]
 8002568:	430b      	orrs	r3, r1
 800256a:	8951      	ldrh	r1, [r2, #10]
 800256c:	430b      	orrs	r3, r1
 800256e:	8991      	ldrh	r1, [r2, #12]
 8002570:	89d2      	ldrh	r2, [r2, #14]
 8002572:	430b      	orrs	r3, r1
 8002574:	e79c      	b.n	80024b0 <begin+0x6c>
    command(LCD_FUNCTIONSET | _displayfunction);
 8002576:	f040 0020 	orr.w	r0, r0, #32
 800257a:	f7ff ff35 	bl	80023e8 <command>
    HAL_Delay(5);  // wait more than 4.1ms
 800257e:	2005      	movs	r0, #5
 8002580:	f7fe fd96 	bl	80010b0 <HAL_Delay>
    command(LCD_FUNCTIONSET | _displayfunction);
 8002584:	7820      	ldrb	r0, [r4, #0]
 8002586:	f040 0020 	orr.w	r0, r0, #32
 800258a:	f7ff ff2d 	bl	80023e8 <command>
    HAL_Delay(1);
 800258e:	2001      	movs	r0, #1
 8002590:	f7fe fd8e 	bl	80010b0 <HAL_Delay>
    command(LCD_FUNCTIONSET | _displayfunction);
 8002594:	7820      	ldrb	r0, [r4, #0]
 8002596:	f040 0020 	orr.w	r0, r0, #32
 800259a:	f7ff ff25 	bl	80023e8 <command>
 800259e:	e7c0      	b.n	8002522 <begin+0xde>
 80025a0:	20000107 	.word	0x20000107
 80025a4:	200000f5 	.word	0x200000f5
 80025a8:	200000e8 	.word	0x200000e8
 80025ac:	200000c4 	.word	0x200000c4
 80025b0:	20000008 	.word	0x20000008
 80025b4:	2000010a 	.word	0x2000010a
 80025b8:	200000ec 	.word	0x200000ec
 80025bc:	20000108 	.word	0x20000108
 80025c0:	200000f6 	.word	0x200000f6
 80025c4:	200000f4 	.word	0x200000f4
 80025c8:	20000106 	.word	0x20000106
 80025cc:	200000f0 	.word	0x200000f0

080025d0 <init>:
{
 80025d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  _rs_pin = rs;
 80025d4:	f8df b07c 	ldr.w	fp, [pc, #124]	; 8002654 <init+0x84>
{
 80025d8:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
  _rs_pin = rs;
 80025dc:	f8ab 2000 	strh.w	r2, [fp]
  _rw_pin = rw;
 80025e0:	4a17      	ldr	r2, [pc, #92]	; (8002640 <init+0x70>)
{
 80025e2:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
  _rw_pin = rw;
 80025e6:	8013      	strh	r3, [r2, #0]
  _enable_pin = enable;
 80025e8:	4b16      	ldr	r3, [pc, #88]	; (8002644 <init+0x74>)
{
 80025ea:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  _enable_pin = enable;
 80025ee:	f8a3 a000 	strh.w	sl, [r3]
  _port = gpioport;
 80025f2:	4b15      	ldr	r3, [pc, #84]	; (8002648 <init+0x78>)
{
 80025f4:	f8bd c030 	ldrh.w	ip, [sp, #48]	; 0x30
  _port = gpioport;
 80025f8:	6019      	str	r1, [r3, #0]
{
 80025fa:	f8bd e034 	ldrh.w	lr, [sp, #52]	; 0x34
  _data_pins[0] = d0;
 80025fe:	4b13      	ldr	r3, [pc, #76]	; (800264c <init+0x7c>)
{
 8002600:	f8bd 7038 	ldrh.w	r7, [sp, #56]	; 0x38
 8002604:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 8002608:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 800260c:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
  _data_pins[0] = d0;
 8002610:	f8a3 9000 	strh.w	r9, [r3]
  _data_pins[1] = d1;
 8002614:	f8a3 8002 	strh.w	r8, [r3, #2]
  _data_pins[2] = d2;
 8002618:	f8a3 c004 	strh.w	ip, [r3, #4]
  _data_pins[3] = d3; 
 800261c:	f8a3 e006 	strh.w	lr, [r3, #6]
  _data_pins[4] = d4;
 8002620:	811f      	strh	r7, [r3, #8]
  _data_pins[5] = d5;
 8002622:	815e      	strh	r6, [r3, #10]
  _data_pins[6] = d6;
 8002624:	819d      	strh	r5, [r3, #12]
  _data_pins[7] = d7;
 8002626:	81dc      	strh	r4, [r3, #14]
 8002628:	4b09      	ldr	r3, [pc, #36]	; (8002650 <init+0x80>)
  if (fourbitmode)
 800262a:	b138      	cbz	r0, 800263c <init+0x6c>
    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 800262c:	2200      	movs	r2, #0
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
 800262e:	701a      	strb	r2, [r3, #0]
  begin(16, 2);
 8002630:	2102      	movs	r1, #2
}
 8002632:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  begin(16, 2);
 8002636:	2010      	movs	r0, #16
 8002638:	f7ff bf04 	b.w	8002444 <begin>
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
 800263c:	2210      	movs	r2, #16
 800263e:	e7f6      	b.n	800262e <init+0x5e>
 8002640:	200000ec 	.word	0x200000ec
 8002644:	20000108 	.word	0x20000108
 8002648:	200000f0 	.word	0x200000f0
 800264c:	200000f6 	.word	0x200000f6
 8002650:	20000107 	.word	0x20000107
 8002654:	2000010a 	.word	0x2000010a

08002658 <LiquidCrystal>:
{
 8002658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800265a:	4605      	mov	r5, r0
  if(_fourbit_mode)
 800265c:	4814      	ldr	r0, [pc, #80]	; (80026b0 <LiquidCrystal+0x58>)
{
 800265e:	b08b      	sub	sp, #44	; 0x2c
  if(_fourbit_mode)
 8002660:	7800      	ldrb	r0, [r0, #0]
{
 8002662:	f8bd 6040 	ldrh.w	r6, [sp, #64]	; 0x40
 8002666:	f8bd 7044 	ldrh.w	r7, [sp, #68]	; 0x44
 800266a:	f8bd e048 	ldrh.w	lr, [sp, #72]	; 0x48
 800266e:	f8bd c04c 	ldrh.w	ip, [sp, #76]	; 0x4c
  if(_fourbit_mode)
 8002672:	b180      	cbz	r0, 8002696 <LiquidCrystal+0x3e>
    init(1, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 8002674:	2400      	movs	r4, #0
 8002676:	e88d 40c8 	stmia.w	sp, {r3, r6, r7, lr}
 800267a:	2001      	movs	r0, #1
 800267c:	4613      	mov	r3, r2
 800267e:	460a      	mov	r2, r1
 8002680:	4629      	mov	r1, r5
 8002682:	9408      	str	r4, [sp, #32]
 8002684:	9407      	str	r4, [sp, #28]
 8002686:	9406      	str	r4, [sp, #24]
 8002688:	9405      	str	r4, [sp, #20]
 800268a:	f8cd c010 	str.w	ip, [sp, #16]
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 800268e:	f7ff ff9f 	bl	80025d0 <init>
}
 8002692:	b00b      	add	sp, #44	; 0x2c
 8002694:	bdf0      	pop	{r4, r5, r6, r7, pc}
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 8002696:	e88d 40c8 	stmia.w	sp, {r3, r6, r7, lr}
 800269a:	9008      	str	r0, [sp, #32]
 800269c:	4613      	mov	r3, r2
 800269e:	9007      	str	r0, [sp, #28]
 80026a0:	460a      	mov	r2, r1
 80026a2:	9006      	str	r0, [sp, #24]
 80026a4:	9005      	str	r0, [sp, #20]
 80026a6:	f8cd c010 	str.w	ip, [sp, #16]
 80026aa:	4629      	mov	r1, r5
 80026ac:	e7ef      	b.n	800268e <LiquidCrystal+0x36>
 80026ae:	bf00      	nop
 80026b0:	20000008 	.word	0x20000008

080026b4 <blink>:
  _displaycontrol |= LCD_BLINKON;
 80026b4:	4b04      	ldr	r3, [pc, #16]	; (80026c8 <blink+0x14>)
 80026b6:	7818      	ldrb	r0, [r3, #0]
 80026b8:	f040 0201 	orr.w	r2, r0, #1
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 80026bc:	f040 0009 	orr.w	r0, r0, #9
  _displaycontrol |= LCD_BLINKON;
 80026c0:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 80026c2:	f7ff be91 	b.w	80023e8 <command>
 80026c6:	bf00      	nop
 80026c8:	200000f4 	.word	0x200000f4

080026cc <print>:
size_t print(const char str[]) {
 80026cc:	b570      	push	{r4, r5, r6, lr}
  if (str == NULL) return 0;
 80026ce:	4604      	mov	r4, r0
 80026d0:	b168      	cbz	r0, 80026ee <print+0x22>
  size_t size = strlen(str);
 80026d2:	f7fd fd9d 	bl	8000210 <strlen>
 80026d6:	4605      	mov	r5, r0
 80026d8:	1826      	adds	r6, r4, r0
  while (size--) {
 80026da:	42b4      	cmp	r4, r6
 80026dc:	d101      	bne.n	80026e2 <print+0x16>
}
 80026de:	4628      	mov	r0, r5
 80026e0:	bd70      	pop	{r4, r5, r6, pc}
  send(value, GPIO_PIN_SET);
 80026e2:	2101      	movs	r1, #1
 80026e4:	f814 0b01 	ldrb.w	r0, [r4], #1
 80026e8:	f7ff fe54 	bl	8002394 <send>
 80026ec:	e7f5      	b.n	80026da <print+0xe>
  if (str == NULL) return 0;
 80026ee:	4605      	mov	r5, r0
 80026f0:	e7f5      	b.n	80026de <print+0x12>
	...

080026f4 <GetDesiredPeriodandPrescaler>:

#include "Timer.h"


unsigned int GetDesiredPeriodandPrescaler(float DesiredDelay, int clockspeed)//seconds(desired second for period)
{
 80026f4:	b570      	push	{r4, r5, r6, lr}
 80026f6:	4606      	mov	r6, r0
	//clock speed(timer clock? or system clock? or ABP1/2) not sure how to get will change
	unsigned int periodPrescaler = 0;
	periodPrescaler = sqrt((double)clockspeed * (double)DesiredDelay)+1;
 80026f8:	4608      	mov	r0, r1
 80026fa:	f7fd fee3 	bl	80004c4 <__aeabi_i2d>
 80026fe:	4604      	mov	r4, r0
 8002700:	4630      	mov	r0, r6
 8002702:	460d      	mov	r5, r1
 8002704:	f7fd fef0 	bl	80004e8 <__aeabi_f2d>
 8002708:	4602      	mov	r2, r0
 800270a:	460b      	mov	r3, r1
 800270c:	4620      	mov	r0, r4
 800270e:	4629      	mov	r1, r5
 8002710:	f7fd ff3e 	bl	8000590 <__aeabi_dmul>
 8002714:	f001 f88e 	bl	8003834 <sqrt>
 8002718:	2200      	movs	r2, #0
 800271a:	4b05      	ldr	r3, [pc, #20]	; (8002730 <GetDesiredPeriodandPrescaler+0x3c>)
 800271c:	f7fd fd86 	bl	800022c <__adddf3>
 8002720:	f7fe f9e6 	bl	8000af0 <__aeabi_d2uiz>

	if(periodPrescaler >= INT_16BIT_MAX)
		periodPrescaler = INT_16BIT_MAX - 1;

	return periodPrescaler;
}
 8002724:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002728:	4298      	cmp	r0, r3
 800272a:	bf28      	it	cs
 800272c:	4618      	movcs	r0, r3
 800272e:	bd70      	pop	{r4, r5, r6, pc}
 8002730:	3ff00000 	.word	0x3ff00000

08002734 <UpdateTimer>:

char UpdateTimer(int timerNumber,int pinState)
{
 8002734:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002738:	4606      	mov	r6, r0
	char togglePin = 0;
	timerCounter[timerNumber]++;
 800273a:	4b3b      	ldr	r3, [pc, #236]	; (8002828 <UpdateTimer+0xf4>)
 800273c:	4f3b      	ldr	r7, [pc, #236]	; (800282c <UpdateTimer+0xf8>)
 800273e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8002742:	00b4      	lsls	r4, r6, #2
 8002744:	1c45      	adds	r5, r0, #1
	  unsigned int triggerTime = 0;
	  if(pinState == 1)
 8002746:	2901      	cmp	r1, #1
	timerCounter[timerNumber]++;
 8002748:	f843 5026 	str.w	r5, [r3, r6, lsl #2]
 800274c:	4698      	mov	r8, r3
	  {
		  triggerTime = ((float)timer[0][timerNumber][3] * 60 * 60 * 100)
 800274e:	443c      	add	r4, r7
	  if(pinState == 1)
 8002750:	d139      	bne.n	80027c6 <UpdateTimer+0x92>
		  triggerTime = ((float)timer[0][timerNumber][3] * 60 * 60 * 100)
 8002752:	78e0      	ldrb	r0, [r4, #3]
 8002754:	f7fe faa2 	bl	8000c9c <__aeabi_ui2f>
 8002758:	4935      	ldr	r1, [pc, #212]	; (8002830 <UpdateTimer+0xfc>)
 800275a:	f7fe faf7 	bl	8000d4c <__aeabi_fmul>
 800275e:	4934      	ldr	r1, [pc, #208]	; (8002830 <UpdateTimer+0xfc>)
 8002760:	f7fe faf4 	bl	8000d4c <__aeabi_fmul>
 8002764:	4933      	ldr	r1, [pc, #204]	; (8002834 <UpdateTimer+0x100>)
 8002766:	f7fe faf1 	bl	8000d4c <__aeabi_fmul>
 800276a:	4681      	mov	r9, r0
							  +((float)timer[0][timerNumber][2] * 60 * 100)
 800276c:	78a0      	ldrb	r0, [r4, #2]
 800276e:	f7fe fa95 	bl	8000c9c <__aeabi_ui2f>
 8002772:	492f      	ldr	r1, [pc, #188]	; (8002830 <UpdateTimer+0xfc>)
 8002774:	f7fe faea 	bl	8000d4c <__aeabi_fmul>
 8002778:	492e      	ldr	r1, [pc, #184]	; (8002834 <UpdateTimer+0x100>)
 800277a:	f7fe fae7 	bl	8000d4c <__aeabi_fmul>
 800277e:	4601      	mov	r1, r0
 8002780:	4648      	mov	r0, r9
 8002782:	f7fe f9db 	bl	8000b3c <__addsf3>
 8002786:	4681      	mov	r9, r0
							  +((float)timer[0][timerNumber][1] * 100)
 8002788:	7860      	ldrb	r0, [r4, #1]
 800278a:	f7fe fa87 	bl	8000c9c <__aeabi_ui2f>
 800278e:	4929      	ldr	r1, [pc, #164]	; (8002834 <UpdateTimer+0x100>)
 8002790:	f7fe fadc 	bl	8000d4c <__aeabi_fmul>
 8002794:	4601      	mov	r1, r0
 8002796:	4648      	mov	r0, r9
 8002798:	f7fe f9d0 	bl	8000b3c <__addsf3>
 800279c:	4604      	mov	r4, r0
							  +((float)timer[0][timerNumber][0]);
 800279e:	f817 0026 	ldrb.w	r0, [r7, r6, lsl #2]
	  }else
	  {
		  triggerTime = ((float)timer[1][timerNumber][3] * 60 * 60 * 100)
							  +((float)timer[1][timerNumber][2] * 60 * 100)
							  +((float)timer[1][timerNumber][1] * 100)
							  +((float)timer[1][timerNumber][0]);
 80027a2:	f7fe fa7b 	bl	8000c9c <__aeabi_ui2f>
 80027a6:	4601      	mov	r1, r0
 80027a8:	4620      	mov	r0, r4
 80027aa:	f7fe f9c7 	bl	8000b3c <__addsf3>
		  triggerTime = ((float)timer[1][timerNumber][3] * 60 * 60 * 100)
 80027ae:	f7fe fc1d 	bl	8000fec <__aeabi_f2uiz>
 80027b2:	2300      	movs	r3, #0
	  }
	  if(timerCounter[timerNumber] != 0 && timerCounter[timerNumber] >= triggerTime)
 80027b4:	2d00      	cmp	r5, #0
 80027b6:	d030      	beq.n	800281a <UpdateTimer+0xe6>
 80027b8:	42a8      	cmp	r0, r5
 80027ba:	d831      	bhi.n	8002820 <UpdateTimer+0xec>
	  {
		  timerCounter[timerNumber] = 0;
 80027bc:	f848 3026 	str.w	r3, [r8, r6, lsl #2]
		  togglePin = 1;
 80027c0:	2001      	movs	r0, #1
 80027c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		  triggerTime = ((float)timer[1][timerNumber][3] * 60 * 60 * 100)
 80027c6:	7ce0      	ldrb	r0, [r4, #19]
 80027c8:	f7fe fa68 	bl	8000c9c <__aeabi_ui2f>
 80027cc:	4918      	ldr	r1, [pc, #96]	; (8002830 <UpdateTimer+0xfc>)
 80027ce:	f7fe fabd 	bl	8000d4c <__aeabi_fmul>
 80027d2:	4917      	ldr	r1, [pc, #92]	; (8002830 <UpdateTimer+0xfc>)
 80027d4:	f7fe faba 	bl	8000d4c <__aeabi_fmul>
 80027d8:	4916      	ldr	r1, [pc, #88]	; (8002834 <UpdateTimer+0x100>)
 80027da:	f7fe fab7 	bl	8000d4c <__aeabi_fmul>
 80027de:	4681      	mov	r9, r0
							  +((float)timer[1][timerNumber][2] * 60 * 100)
 80027e0:	7ca0      	ldrb	r0, [r4, #18]
 80027e2:	f7fe fa5b 	bl	8000c9c <__aeabi_ui2f>
 80027e6:	4912      	ldr	r1, [pc, #72]	; (8002830 <UpdateTimer+0xfc>)
 80027e8:	f7fe fab0 	bl	8000d4c <__aeabi_fmul>
 80027ec:	4911      	ldr	r1, [pc, #68]	; (8002834 <UpdateTimer+0x100>)
 80027ee:	f7fe faad 	bl	8000d4c <__aeabi_fmul>
 80027f2:	4601      	mov	r1, r0
 80027f4:	4648      	mov	r0, r9
 80027f6:	f7fe f9a1 	bl	8000b3c <__addsf3>
 80027fa:	4681      	mov	r9, r0
							  +((float)timer[1][timerNumber][1] * 100)
 80027fc:	7c60      	ldrb	r0, [r4, #17]
 80027fe:	f7fe fa4d 	bl	8000c9c <__aeabi_ui2f>
 8002802:	490c      	ldr	r1, [pc, #48]	; (8002834 <UpdateTimer+0x100>)
 8002804:	f7fe faa2 	bl	8000d4c <__aeabi_fmul>
 8002808:	4601      	mov	r1, r0
 800280a:	4648      	mov	r0, r9
 800280c:	f7fe f996 	bl	8000b3c <__addsf3>
							  +((float)timer[1][timerNumber][0]);
 8002810:	1d33      	adds	r3, r6, #4
							  +((float)timer[1][timerNumber][1] * 100)
 8002812:	4604      	mov	r4, r0
							  +((float)timer[1][timerNumber][0]);
 8002814:	f817 0023 	ldrb.w	r0, [r7, r3, lsl #2]
 8002818:	e7c3      	b.n	80027a2 <UpdateTimer+0x6e>
	char togglePin = 0;
 800281a:	4628      	mov	r0, r5
 800281c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002820:	4618      	mov	r0, r3
	}
	  return togglePin;
}
 8002822:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002826:	bf00      	nop
 8002828:	200000c8 	.word	0x200000c8
 800282c:	20000009 	.word	0x20000009
 8002830:	42700000 	.word	0x42700000
 8002834:	42c80000 	.word	0x42c80000

08002838 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002838:	b500      	push	{lr}
 800283a:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800283c:	2228      	movs	r2, #40	; 0x28
 800283e:	2100      	movs	r1, #0
 8002840:	a806      	add	r0, sp, #24
 8002842:	f000 fbc3 	bl	8002fcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002846:	2214      	movs	r2, #20
 8002848:	2100      	movs	r1, #0
 800284a:	a801      	add	r0, sp, #4
 800284c:	f000 fbbe 	bl	8002fcc <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002850:	2302      	movs	r3, #2
 8002852:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002854:	2301      	movs	r3, #1
 8002856:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002858:	2310      	movs	r3, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800285a:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800285c:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800285e:	f7fe fdeb 	bl	8001438 <HAL_RCC_OscConfig>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002862:	2100      	movs	r1, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002864:	230f      	movs	r3, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002866:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002868:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800286a:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800286c:	9103      	str	r1, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800286e:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002870:	9105      	str	r1, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002872:	f7fe ffc3 	bl	80017fc <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8002876:	b011      	add	sp, #68	; 0x44
 8002878:	f85d fb04 	ldr.w	pc, [sp], #4

0800287c <main>:
{
 800287c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002880:	b0a3      	sub	sp, #140	; 0x8c
  HAL_Init();
 8002882:	f7fe fbf7 	bl	8001074 <HAL_Init>
  SystemClock_Config();
 8002886:	f7ff ffd7 	bl	8002838 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800288a:	2210      	movs	r2, #16
 800288c:	2100      	movs	r1, #0
 800288e:	a815      	add	r0, sp, #84	; 0x54
 8002890:	f000 fb9c 	bl	8002fcc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002894:	4b93      	ldr	r3, [pc, #588]	; (8002ae4 <main+0x268>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_3|LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 8002896:	f44f 7143 	mov.w	r1, #780	; 0x30c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800289a:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_3|LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 800289c:	4892      	ldr	r0, [pc, #584]	; (8002ae8 <main+0x26c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800289e:	f042 0210 	orr.w	r2, r2, #16
 80028a2:	619a      	str	r2, [r3, #24]
 80028a4:	699a      	ldr	r2, [r3, #24]
                          |GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80028a6:	2502      	movs	r5, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028a8:	f002 0210 	and.w	r2, r2, #16
 80028ac:	9205      	str	r2, [sp, #20]
 80028ae:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80028b0:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : PC2 PC3 LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|LD4_Pin|LD3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b2:	2400      	movs	r4, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80028b4:	f042 0220 	orr.w	r2, r2, #32
 80028b8:	619a      	str	r2, [r3, #24]
 80028ba:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028bc:	2701      	movs	r7, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80028be:	f002 0220 	and.w	r2, r2, #32
 80028c2:	9206      	str	r2, [sp, #24]
 80028c4:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028c6:	699a      	ldr	r2, [r3, #24]
  htim7.Instance = TIM7;
 80028c8:	4e88      	ldr	r6, [pc, #544]	; (8002aec <main+0x270>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ca:	f042 0204 	orr.w	r2, r2, #4
 80028ce:	619a      	str	r2, [r3, #24]
 80028d0:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_3|LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 80028d2:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028d4:	f003 0304 	and.w	r3, r3, #4
 80028d8:	9307      	str	r3, [sp, #28]
 80028da:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_3|LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 80028dc:	f7fe fd94 	bl	8001408 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 80028e0:	2200      	movs	r2, #0
 80028e2:	f44f 411f 	mov.w	r1, #40704	; 0x9f00
 80028e6:	4882      	ldr	r0, [pc, #520]	; (8002af0 <main+0x274>)
 80028e8:	f7fe fd8e 	bl	8001408 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80028ec:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80028f0:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80028f2:	4b80      	ldr	r3, [pc, #512]	; (8002af4 <main+0x278>)
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028f4:	a915      	add	r1, sp, #84	; 0x54
 80028f6:	487c      	ldr	r0, [pc, #496]	; (8002ae8 <main+0x26c>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80028f8:	9316      	str	r3, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80028fa:	9517      	str	r5, [sp, #92]	; 0x5c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028fc:	f7fe fc9c 	bl	8001238 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|LD4_Pin|LD3_Pin;
 8002900:	f44f 7343 	mov.w	r3, #780	; 0x30c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002904:	a915      	add	r1, sp, #84	; 0x54
 8002906:	4878      	ldr	r0, [pc, #480]	; (8002ae8 <main+0x26c>)
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|LD4_Pin|LD3_Pin;
 8002908:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800290a:	9716      	str	r7, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290c:	9417      	str	r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800290e:	9518      	str	r5, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002910:	f7fe fc92 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11 
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8002914:	f44f 431f 	mov.w	r3, #40704	; 0x9f00
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002918:	a915      	add	r1, sp, #84	; 0x54
 800291a:	4875      	ldr	r0, [pc, #468]	; (8002af0 <main+0x274>)
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800291c:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800291e:	9716      	str	r7, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002920:	9417      	str	r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002922:	9518      	str	r5, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002924:	f7fe fc88 	bl	8001238 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002928:	4622      	mov	r2, r4
 800292a:	4621      	mov	r1, r4
 800292c:	2028      	movs	r0, #40	; 0x28
 800292e:	f7fe fbe3 	bl	80010f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002932:	2028      	movs	r0, #40	; 0x28
  htim4.Instance = TIM4;
 8002934:	4d70      	ldr	r5, [pc, #448]	; (8002af8 <main+0x27c>)
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002936:	f7fe fc13 	bl	8001160 <HAL_NVIC_EnableIRQ>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800293a:	221c      	movs	r2, #28
 800293c:	4621      	mov	r1, r4
 800293e:	a815      	add	r0, sp, #84	; 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002940:	9408      	str	r4, [sp, #32]
 8002942:	9409      	str	r4, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002944:	f000 fb42 	bl	8002fcc <memset>
  htim4.Instance = TIM4;
 8002948:	4b6c      	ldr	r3, [pc, #432]	; (8002afc <main+0x280>)
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 800294a:	4628      	mov	r0, r5
  htim4.Init.Prescaler = 0;
 800294c:	e885 0018 	stmia.w	r5, {r3, r4}
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002950:	60ac      	str	r4, [r5, #8]
  htim4.Init.Period = 0;
 8002952:	60ec      	str	r4, [r5, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002954:	612c      	str	r4, [r5, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002956:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8002958:	f7ff f9c2 	bl	8001ce0 <HAL_TIM_OC_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800295c:	a908      	add	r1, sp, #32
 800295e:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002960:	9408      	str	r4, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002962:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002964:	f7ff fa3e 	bl	8001de4 <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002968:	4622      	mov	r2, r4
 800296a:	a915      	add	r1, sp, #84	; 0x54
 800296c:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800296e:	9415      	str	r4, [sp, #84]	; 0x54
  sConfigOC.Pulse = 0;
 8002970:	9416      	str	r4, [sp, #88]	; 0x58
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002972:	9417      	str	r4, [sp, #92]	; 0x5c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002974:	9419      	str	r4, [sp, #100]	; 0x64
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002976:	f7ff fa07 	bl	8001d88 <HAL_TIM_OC_ConfigChannel>
  int period = GetDesiredPeriodandPrescaler(.01,8000000);
 800297a:	4961      	ldr	r1, [pc, #388]	; (8002b00 <main+0x284>)
 800297c:	4861      	ldr	r0, [pc, #388]	; (8002b04 <main+0x288>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800297e:	9415      	str	r4, [sp, #84]	; 0x54
 8002980:	9416      	str	r4, [sp, #88]	; 0x58
  int period = GetDesiredPeriodandPrescaler(.01,8000000);
 8002982:	f7ff feb7 	bl	80026f4 <GetDesiredPeriodandPrescaler>
  htim7.Instance = TIM7;
 8002986:	4b60      	ldr	r3, [pc, #384]	; (8002b08 <main+0x28c>)
  htim7.Init.Prescaler = prescaler;
 8002988:	6070      	str	r0, [r6, #4]
  htim7.Init.Period = period;
 800298a:	60f0      	str	r0, [r6, #12]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800298c:	4630      	mov	r0, r6
  htim7.Instance = TIM7;
 800298e:	6033      	str	r3, [r6, #0]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002990:	60b4      	str	r4, [r6, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002992:	61b4      	str	r4, [r6, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002994:	f7ff f98a 	bl	8001cac <HAL_TIM_Base_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002998:	a915      	add	r1, sp, #84	; 0x54
 800299a:	4630      	mov	r0, r6
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800299c:	9415      	str	r4, [sp, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800299e:	9416      	str	r4, [sp, #88]	; 0x58
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80029a0:	f7ff fa20 	bl	8001de4 <HAL_TIMEx_MasterConfigSynchronization>
  huart2.Init.BaudRate = 9600;
 80029a4:	f44f 5316 	mov.w	r3, #9600	; 0x2580
  huart2.Instance = USART2;
 80029a8:	4858      	ldr	r0, [pc, #352]	; (8002b0c <main+0x290>)
  huart2.Init.BaudRate = 9600;
 80029aa:	4a59      	ldr	r2, [pc, #356]	; (8002b10 <main+0x294>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80029ac:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 9600;
 80029ae:	e880 000c 	stmia.w	r0, {r2, r3}
  huart2.Init.Mode = UART_MODE_TX_RX;
 80029b2:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 80029b4:	60c4      	str	r4, [r0, #12]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80029b6:	6143      	str	r3, [r0, #20]
  huart2.Init.Parity = UART_PARITY_NONE;
 80029b8:	6104      	str	r4, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029ba:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80029bc:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80029be:	f7ff fac7 	bl	8001f50 <HAL_UART_Init>
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,0);//set low to keep current going through NC(Normally closed)
 80029c2:	4622      	mov	r2, r4
 80029c4:	2108      	movs	r1, #8
 80029c6:	4848      	ldr	r0, [pc, #288]	; (8002ae8 <main+0x26c>)
 80029c8:	f7fe fd1e 	bl	8001408 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_2,0);//set low to keep current going through NC(Normally closed)
 80029cc:	4622      	mov	r2, r4
 80029ce:	2104      	movs	r1, #4
 80029d0:	4845      	ldr	r0, [pc, #276]	; (8002ae8 <main+0x26c>)
 80029d2:	f7fe fd19 	bl	8001408 <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim7);
 80029d6:	4630      	mov	r0, r6
 80029d8:	f7ff f84a 	bl	8001a70 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 80029dc:	4628      	mov	r0, r5
 80029de:	f7ff f847 	bl	8001a70 <HAL_TIM_Base_Start_IT>
  LiquidCrystal(GPIOA, GPIO_PIN_15, 0, GPIO_PIN_12, GPIO_PIN_11, GPIO_PIN_10, GPIO_PIN_9, GPIO_PIN_8);
 80029e2:	f44f 7580 	mov.w	r5, #256	; 0x100
 80029e6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80029ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80029ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029f2:	4622      	mov	r2, r4
  displayChange = true;
 80029f4:	4c47      	ldr	r4, [pc, #284]	; (8002b14 <main+0x298>)
  LiquidCrystal(GPIOA, GPIO_PIN_15, 0, GPIO_PIN_12, GPIO_PIN_11, GPIO_PIN_10, GPIO_PIN_9, GPIO_PIN_8);
 80029f6:	e88d 002b 	stmia.w	sp, {r0, r1, r3, r5}
 80029fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a02:	483b      	ldr	r0, [pc, #236]	; (8002af0 <main+0x274>)
 8002a04:	f7ff fe28 	bl	8002658 <LiquidCrystal>
		int size1 = sprintf(str1, "- %1d %02u:%02u:%02u.%02u"
 8002a08:	f8df 811c 	ldr.w	r8, [pc, #284]	; 8002b28 <main+0x2ac>
  displayChange = true;
 8002a0c:	7027      	strb	r7, [r4, #0]
		int size1 = sprintf(str1, "- %1d %02u:%02u:%02u.%02u"
 8002a0e:	f8df 911c 	ldr.w	r9, [pc, #284]	; 8002b2c <main+0x2b0>
				, timer[0][currentTimer][3]
 8002a12:	4f41      	ldr	r7, [pc, #260]	; (8002b18 <main+0x29c>)
	  if(displayChange)
 8002a14:	7823      	ldrb	r3, [r4, #0]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d062      	beq.n	8002ae0 <main+0x264>
		displayChange = false;
 8002a1a:	2500      	movs	r5, #0
		setCursor(0, 0);
 8002a1c:	4629      	mov	r1, r5
 8002a1e:	4628      	mov	r0, r5
		displayChange = false;
 8002a20:	7025      	strb	r5, [r4, #0]
		setCursor(0, 0);
 8002a22:	f7ff fced 	bl	8002400 <setCursor>
		int size1 = sprintf(str1, "- %1d %02u:%02u:%02u.%02u"
 8002a26:	f898 2000 	ldrb.w	r2, [r8]
		str1[size1++] = '\r';
 8002a2a:	f04f 0b0d 	mov.w	fp, #13
		int size1 = sprintf(str1, "- %1d %02u:%02u:%02u.%02u"
 8002a2e:	f817 0022 	ldrb.w	r0, [r7, r2, lsl #2]
				, timer[0][currentTimer][3]
 8002a32:	eb07 0182 	add.w	r1, r7, r2, lsl #2
		int size1 = sprintf(str1, "- %1d %02u:%02u:%02u.%02u"
 8002a36:	78cb      	ldrb	r3, [r1, #3]
 8002a38:	9002      	str	r0, [sp, #8]
 8002a3a:	7848      	ldrb	r0, [r1, #1]
		str1[size1++] = '\n';
 8002a3c:	f04f 0a0a 	mov.w	sl, #10
		int size1 = sprintf(str1, "- %1d %02u:%02u:%02u.%02u"
 8002a40:	9001      	str	r0, [sp, #4]
 8002a42:	7889      	ldrb	r1, [r1, #2]
 8002a44:	a808      	add	r0, sp, #32
 8002a46:	9100      	str	r1, [sp, #0]
 8002a48:	4649      	mov	r1, r9
 8002a4a:	f000 fac7 	bl	8002fdc <siprintf>
 8002a4e:	4606      	mov	r6, r0
		print(str1);
 8002a50:	a808      	add	r0, sp, #32
 8002a52:	f7ff fe3b 	bl	80026cc <print>
		setCursor(0, 1);
 8002a56:	2101      	movs	r1, #1
 8002a58:	4628      	mov	r0, r5
 8002a5a:	f7ff fcd1 	bl	8002400 <setCursor>
		int size2 = sprintf(str2, "+ %1d %02u:%02u:%02u.%02u"
 8002a5e:	f898 2000 	ldrb.w	r2, [r8]
				, timer[1][currentTimer][0]);
 8002a62:	1d10      	adds	r0, r2, #4
		int size2 = sprintf(str2, "+ %1d %02u:%02u:%02u.%02u"
 8002a64:	f817 0020 	ldrb.w	r0, [r7, r0, lsl #2]
				, timer[1][currentTimer][3]
 8002a68:	eb07 0182 	add.w	r1, r7, r2, lsl #2
		int size2 = sprintf(str2, "+ %1d %02u:%02u:%02u.%02u"
 8002a6c:	7ccb      	ldrb	r3, [r1, #19]
 8002a6e:	9002      	str	r0, [sp, #8]
 8002a70:	7c48      	ldrb	r0, [r1, #17]
 8002a72:	9001      	str	r0, [sp, #4]
 8002a74:	7c89      	ldrb	r1, [r1, #18]
 8002a76:	a815      	add	r0, sp, #84	; 0x54
 8002a78:	9100      	str	r1, [sp, #0]
 8002a7a:	4928      	ldr	r1, [pc, #160]	; (8002b1c <main+0x2a0>)
 8002a7c:	f000 faae 	bl	8002fdc <siprintf>
 8002a80:	4605      	mov	r5, r0
		print(str2);
 8002a82:	a815      	add	r0, sp, #84	; 0x54
 8002a84:	f7ff fe22 	bl	80026cc <print>
		setCursor((currectTimerState? size2 : size1) - 3*(currentTimerVal) - 1, currectTimerState);
 8002a88:	4b25      	ldr	r3, [pc, #148]	; (8002b20 <main+0x2a4>)
 8002a8a:	4a26      	ldr	r2, [pc, #152]	; (8002b24 <main+0x2a8>)
 8002a8c:	7819      	ldrb	r1, [r3, #0]
 8002a8e:	7810      	ldrb	r0, [r2, #0]
 8002a90:	2900      	cmp	r1, #0
 8002a92:	bf14      	ite	ne
 8002a94:	462b      	movne	r3, r5
 8002a96:	4633      	moveq	r3, r6
 8002a98:	eba0 0080 	sub.w	r0, r0, r0, lsl #2
 8002a9c:	4418      	add	r0, r3
 8002a9e:	3801      	subs	r0, #1
 8002aa0:	f7ff fcae 	bl	8002400 <setCursor>
		blink();
 8002aa4:	f7ff fe06 	bl	80026b4 <blink>
		str1[size1++] = '\r';
 8002aa8:	ab22      	add	r3, sp, #136	; 0x88
 8002aaa:	4433      	add	r3, r6
		str1[size1++] = '\n';
 8002aac:	1cb2      	adds	r2, r6, #2
		str1[size1++] = '\r';
 8002aae:	f803 bc68 	strb.w	fp, [r3, #-104]
		str1[size1++] = '\n';
 8002ab2:	f803 ac67 	strb.w	sl, [r3, #-103]
		HAL_UART_Transmit(&huart2,str1,size1,1000);
 8002ab6:	b292      	uxth	r2, r2
 8002ab8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002abc:	a908      	add	r1, sp, #32
 8002abe:	4813      	ldr	r0, [pc, #76]	; (8002b0c <main+0x290>)
 8002ac0:	f7ff fa74 	bl	8001fac <HAL_UART_Transmit>
		str2[size2++] = '\r';
 8002ac4:	ab22      	add	r3, sp, #136	; 0x88
 8002ac6:	442b      	add	r3, r5
		str2[size2++] = '\n';
 8002ac8:	1caa      	adds	r2, r5, #2
		str2[size2++] = '\r';
 8002aca:	f803 bc34 	strb.w	fp, [r3, #-52]
		str2[size2++] = '\n';
 8002ace:	f803 ac33 	strb.w	sl, [r3, #-51]
		HAL_UART_Transmit(&huart2,str2,size2,1000);
 8002ad2:	b292      	uxth	r2, r2
 8002ad4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ad8:	a915      	add	r1, sp, #84	; 0x54
 8002ada:	480c      	ldr	r0, [pc, #48]	; (8002b0c <main+0x290>)
 8002adc:	f7ff fa66 	bl	8001fac <HAL_UART_Transmit>
	  if(displayChange)
 8002ae0:	e798      	b.n	8002a14 <main+0x198>
 8002ae2:	bf00      	nop
 8002ae4:	40021000 	.word	0x40021000
 8002ae8:	40011000 	.word	0x40011000
 8002aec:	200001a8 	.word	0x200001a8
 8002af0:	40010800 	.word	0x40010800
 8002af4:	10110000 	.word	0x10110000
 8002af8:	20000118 	.word	0x20000118
 8002afc:	40000800 	.word	0x40000800
 8002b00:	007a1200 	.word	0x007a1200
 8002b04:	3c23d70a 	.word	0x3c23d70a
 8002b08:	40001400 	.word	0x40001400
 8002b0c:	20000168 	.word	0x20000168
 8002b10:	40004400 	.word	0x40004400
 8002b14:	20000162 	.word	0x20000162
 8002b18:	20000009 	.word	0x20000009
 8002b1c:	08003a8a 	.word	0x08003a8a
 8002b20:	200000c5 	.word	0x200000c5
 8002b24:	20000165 	.word	0x20000165
 8002b28:	200000c6 	.word	0x200000c6
 8002b2c:	08003a70 	.word	0x08003a70

08002b30 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002b30:	4b0e      	ldr	r3, [pc, #56]	; (8002b6c <HAL_MspInit+0x3c>)
{
 8002b32:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002b34:	699a      	ldr	r2, [r3, #24]
 8002b36:	f042 0201 	orr.w	r2, r2, #1
 8002b3a:	619a      	str	r2, [r3, #24]
 8002b3c:	699a      	ldr	r2, [r3, #24]
 8002b3e:	f002 0201 	and.w	r2, r2, #1
 8002b42:	9200      	str	r2, [sp, #0]
 8002b44:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b46:	69da      	ldr	r2, [r3, #28]
 8002b48:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002b4c:	61da      	str	r2, [r3, #28]
 8002b4e:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002b50:	4a07      	ldr	r2, [pc, #28]	; (8002b70 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b56:	9301      	str	r3, [sp, #4]
 8002b58:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002b5a:	6853      	ldr	r3, [r2, #4]
 8002b5c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002b60:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b64:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b66:	b002      	add	sp, #8
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	40021000 	.word	0x40021000
 8002b70:	40010000 	.word	0x40010000

08002b74 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8002b74:	b507      	push	{r0, r1, r2, lr}
  if(htim_oc->Instance==TIM4)
 8002b76:	4b0d      	ldr	r3, [pc, #52]	; (8002bac <HAL_TIM_OC_MspInit+0x38>)
 8002b78:	6802      	ldr	r2, [r0, #0]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d112      	bne.n	8002ba4 <HAL_TIM_OC_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002b7e:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8002b82:	69da      	ldr	r2, [r3, #28]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002b84:	201e      	movs	r0, #30
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002b86:	f042 0204 	orr.w	r2, r2, #4
 8002b8a:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002b8c:	2200      	movs	r2, #0
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002b8e:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002b90:	4611      	mov	r1, r2
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002b92:	f003 0304 	and.w	r3, r3, #4
 8002b96:	9301      	str	r3, [sp, #4]
 8002b98:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002b9a:	f7fe faad 	bl	80010f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002b9e:	201e      	movs	r0, #30
 8002ba0:	f7fe fade 	bl	8001160 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002ba4:	b003      	add	sp, #12
 8002ba6:	f85d fb04 	ldr.w	pc, [sp], #4
 8002baa:	bf00      	nop
 8002bac:	40000800 	.word	0x40000800

08002bb0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002bb0:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM7)
 8002bb2:	4b0d      	ldr	r3, [pc, #52]	; (8002be8 <HAL_TIM_Base_MspInit+0x38>)
 8002bb4:	6802      	ldr	r2, [r0, #0]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d112      	bne.n	8002be0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002bba:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
 8002bbe:	69da      	ldr	r2, [r3, #28]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002bc0:	2037      	movs	r0, #55	; 0x37
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002bc2:	f042 0220 	orr.w	r2, r2, #32
 8002bc6:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002bc8:	2200      	movs	r2, #0
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002bca:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002bcc:	4611      	mov	r1, r2
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002bce:	f003 0320 	and.w	r3, r3, #32
 8002bd2:	9301      	str	r3, [sp, #4]
 8002bd4:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002bd6:	f7fe fa8f 	bl	80010f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002bda:	2037      	movs	r0, #55	; 0x37
 8002bdc:	f7fe fac0 	bl	8001160 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002be0:	b003      	add	sp, #12
 8002be2:	f85d fb04 	ldr.w	pc, [sp], #4
 8002be6:	bf00      	nop
 8002be8:	40001400 	.word	0x40001400

08002bec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002bec:	b510      	push	{r4, lr}
 8002bee:	4604      	mov	r4, r0
 8002bf0:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bf2:	2210      	movs	r2, #16
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	a802      	add	r0, sp, #8
 8002bf8:	f000 f9e8 	bl	8002fcc <memset>
  if(huart->Instance==USART2)
 8002bfc:	6822      	ldr	r2, [r4, #0]
 8002bfe:	4b1a      	ldr	r3, [pc, #104]	; (8002c68 <HAL_UART_MspInit+0x7c>)
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d12f      	bne.n	8002c64 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c04:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8002c08:	69da      	ldr	r2, [r3, #28]
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c0a:	a902      	add	r1, sp, #8
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c0c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002c10:	61da      	str	r2, [r3, #28]
 8002c12:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c14:	4815      	ldr	r0, [pc, #84]	; (8002c6c <HAL_UART_MspInit+0x80>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c16:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002c1a:	9200      	str	r2, [sp, #0]
 8002c1c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c1e:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c20:	2400      	movs	r4, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c22:	f042 0204 	orr.w	r2, r2, #4
 8002c26:	619a      	str	r2, [r3, #24]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	f003 0304 	and.w	r3, r3, #4
 8002c2e:	9301      	str	r3, [sp, #4]
 8002c30:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002c32:	2304      	movs	r3, #4
 8002c34:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c36:	2302      	movs	r3, #2
 8002c38:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c3e:	f7fe fafb 	bl	8001238 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002c42:	2308      	movs	r3, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c44:	4809      	ldr	r0, [pc, #36]	; (8002c6c <HAL_UART_MspInit+0x80>)
 8002c46:	eb0d 0103 	add.w	r1, sp, r3
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002c4a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c4c:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4e:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c50:	f7fe faf2 	bl	8001238 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002c54:	2026      	movs	r0, #38	; 0x26
 8002c56:	4622      	mov	r2, r4
 8002c58:	4621      	mov	r1, r4
 8002c5a:	f7fe fa4d 	bl	80010f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002c5e:	2026      	movs	r0, #38	; 0x26
 8002c60:	f7fe fa7e 	bl	8001160 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002c64:	b006      	add	sp, #24
 8002c66:	bd10      	pop	{r4, pc}
 8002c68:	40004400 	.word	0x40004400
 8002c6c:	40010800 	.word	0x40010800

08002c70 <NMI_Handler>:
 8002c70:	4770      	bx	lr

08002c72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c72:	e7fe      	b.n	8002c72 <HardFault_Handler>

08002c74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c74:	e7fe      	b.n	8002c74 <MemManage_Handler>

08002c76 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c76:	e7fe      	b.n	8002c76 <BusFault_Handler>

08002c78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c78:	e7fe      	b.n	8002c78 <UsageFault_Handler>

08002c7a <SVC_Handler>:
 8002c7a:	4770      	bx	lr

08002c7c <DebugMon_Handler>:
 8002c7c:	4770      	bx	lr

08002c7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c7e:	4770      	bx	lr

08002c80 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c80:	f7fe ba04 	b.w	800108c <HAL_IncTick>

08002c84 <TIM4_IRQHandler>:
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */
	debouncer = 0;
 8002c84:	2200      	movs	r2, #0
{
 8002c86:	b510      	push	{r4, lr}
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002c88:	4c05      	ldr	r4, [pc, #20]	; (8002ca0 <TIM4_IRQHandler+0x1c>)
	debouncer = 0;
 8002c8a:	4b06      	ldr	r3, [pc, #24]	; (8002ca4 <TIM4_IRQHandler+0x20>)
  HAL_TIM_IRQHandler(&htim4);
 8002c8c:	4620      	mov	r0, r4
	debouncer = 0;
 8002c8e:	601a      	str	r2, [r3, #0]
  HAL_TIM_IRQHandler(&htim4);
 8002c90:	f7fe ff18 	bl	8001ac4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */
	HAL_TIM_Base_Stop_IT(&htim4);
 8002c94:	4620      	mov	r0, r4

  /* USER CODE END TIM4_IRQn 1 */
}
 8002c96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_TIM_Base_Stop_IT(&htim4);
 8002c9a:	f7fe bef9 	b.w	8001a90 <HAL_TIM_Base_Stop_IT>
 8002c9e:	bf00      	nop
 8002ca0:	20000118 	.word	0x20000118
 8002ca4:	20000114 	.word	0x20000114

08002ca8 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002ca8:	4801      	ldr	r0, [pc, #4]	; (8002cb0 <USART2_IRQHandler+0x8>)
 8002caa:	f7ff ba1d 	b.w	80020e8 <HAL_UART_IRQHandler>
 8002cae:	bf00      	nop
 8002cb0:	20000168 	.word	0x20000168

08002cb4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if(debouncer == 0)
 8002cb6:	4b5b      	ldr	r3, [pc, #364]	; (8002e24 <EXTI15_10_IRQHandler+0x170>)
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	2a00      	cmp	r2, #0
 8002cbc:	f040 809c 	bne.w	8002df8 <EXTI15_10_IRQHandler+0x144>
	{
		debouncer = 1;
 8002cc0:	2701      	movs	r7, #1

		int read_10 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10);
 8002cc2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002cc6:	4858      	ldr	r0, [pc, #352]	; (8002e28 <EXTI15_10_IRQHandler+0x174>)
		debouncer = 1;
 8002cc8:	601f      	str	r7, [r3, #0]
		int read_10 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10);
 8002cca:	f7fe fb97 	bl	80013fc <HAL_GPIO_ReadPin>
		int read_11 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11);
 8002cce:	f44f 6100 	mov.w	r1, #2048	; 0x800
		int read_10 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10);
 8002cd2:	4605      	mov	r5, r0
		int read_11 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11);
 8002cd4:	4854      	ldr	r0, [pc, #336]	; (8002e28 <EXTI15_10_IRQHandler+0x174>)
 8002cd6:	f7fe fb91 	bl	80013fc <HAL_GPIO_ReadPin>
		int read_12 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_12);
 8002cda:	f44f 5180 	mov.w	r1, #4096	; 0x1000
		int read_11 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11);
 8002cde:	4604      	mov	r4, r0
		int read_12 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_12);
 8002ce0:	4851      	ldr	r0, [pc, #324]	; (8002e28 <EXTI15_10_IRQHandler+0x174>)
 8002ce2:	f7fe fb8b 	bl	80013fc <HAL_GPIO_ReadPin>
		int read_15 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8002ce6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
		int read_12 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_12);
 8002cea:	4606      	mov	r6, r0
		int read_15 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8002cec:	484e      	ldr	r0, [pc, #312]	; (8002e28 <EXTI15_10_IRQHandler+0x174>)
 8002cee:	f7fe fb85 	bl	80013fc <HAL_GPIO_ReadPin>

		if(read_10)
 8002cf2:	b135      	cbz	r5, 8002d02 <EXTI15_10_IRQHandler+0x4e>
		{

			currentTimerVal--;
 8002cf4:	4a4d      	ldr	r2, [pc, #308]	; (8002e2c <EXTI15_10_IRQHandler+0x178>)
 8002cf6:	7813      	ldrb	r3, [r2, #0]
 8002cf8:	3b01      	subs	r3, #1
 8002cfa:	b2db      	uxtb	r3, r3
			if(currentTimerVal == 255)//hours place
 8002cfc:	2bff      	cmp	r3, #255	; 0xff
 8002cfe:	d02e      	beq.n	8002d5e <EXTI15_10_IRQHandler+0xaa>
			currentTimerVal--;
 8002d00:	7013      	strb	r3, [r2, #0]
						currentTimer = timerCount - 1;
					}
				}
			}
		}
		if(read_11)
 8002d02:	b184      	cbz	r4, 8002d26 <EXTI15_10_IRQHandler+0x72>
		{
			currentTimerVal++;
 8002d04:	4a49      	ldr	r2, [pc, #292]	; (8002e2c <EXTI15_10_IRQHandler+0x178>)
 8002d06:	7813      	ldrb	r3, [r2, #0]
 8002d08:	3301      	adds	r3, #1
 8002d0a:	b2db      	uxtb	r3, r3
			if(currentTimerVal > 3)//hours place
 8002d0c:	2b03      	cmp	r3, #3
			currentTimerVal++;
 8002d0e:	7013      	strb	r3, [r2, #0]
			if(currentTimerVal > 3)//hours place
 8002d10:	d909      	bls.n	8002d26 <EXTI15_10_IRQHandler+0x72>
			{
				currentTimerVal = 0;
 8002d12:	2100      	movs	r1, #0
 8002d14:	4b45      	ldr	r3, [pc, #276]	; (8002e2c <EXTI15_10_IRQHandler+0x178>)
				currectTimerState++;
 8002d16:	4a46      	ldr	r2, [pc, #280]	; (8002e30 <EXTI15_10_IRQHandler+0x17c>)
				currentTimerVal = 0;
 8002d18:	7019      	strb	r1, [r3, #0]
				currectTimerState++;
 8002d1a:	7813      	ldrb	r3, [r2, #0]
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	b2db      	uxtb	r3, r3
				if(currectTimerState > 1)//on
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d833      	bhi.n	8002d8c <EXTI15_10_IRQHandler+0xd8>
				currectTimerState++;
 8002d24:	7013      	strb	r3, [r2, #0]
						currentTimer = 0;
					}
				}
			}
		}
		if(read_12)
 8002d26:	2e00      	cmp	r6, #0
 8002d28:	d05a      	beq.n	8002de0 <EXTI15_10_IRQHandler+0x12c>
		{
			timer[currectTimerState][currentTimer][currentTimerVal]--;
 8002d2a:	4b41      	ldr	r3, [pc, #260]	; (8002e30 <EXTI15_10_IRQHandler+0x17c>)
 8002d2c:	4c41      	ldr	r4, [pc, #260]	; (8002e34 <EXTI15_10_IRQHandler+0x180>)
 8002d2e:	781d      	ldrb	r5, [r3, #0]
 8002d30:	4b41      	ldr	r3, [pc, #260]	; (8002e38 <EXTI15_10_IRQHandler+0x184>)
 8002d32:	781a      	ldrb	r2, [r3, #0]
 8002d34:	4b3d      	ldr	r3, [pc, #244]	; (8002e2c <EXTI15_10_IRQHandler+0x178>)
 8002d36:	eb02 0185 	add.w	r1, r2, r5, lsl #2
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8002d40:	5ce1      	ldrb	r1, [r4, r3]
 8002d42:	18e6      	adds	r6, r4, r3
 8002d44:	3901      	subs	r1, #1
 8002d46:	b2c9      	uxtb	r1, r1
			if(timer[currectTimerState][currentTimer][currentTimerVal] == 255)
 8002d48:	29ff      	cmp	r1, #255	; 0xff
			timer[currectTimerState][currentTimer][currentTimerVal]--;
 8002d4a:	54e1      	strb	r1, [r4, r3]
			if(timer[currectTimerState][currentTimer][currentTimerVal] == 255)
 8002d4c:	d12a      	bne.n	8002da4 <EXTI15_10_IRQHandler+0xf0>
				timer[currectTimerState][currentTimer][currentTimerVal] = 99;
		}

		if(read_15)
 8002d4e:	2800      	cmp	r0, #0
 8002d50:	d143      	bne.n	8002dda <EXTI15_10_IRQHandler+0x126>
				timer[currectTimerState][currentTimer][currentTimerVal] = 99;
 8002d52:	2363      	movs	r3, #99	; 0x63
 8002d54:	7033      	strb	r3, [r6, #0]
				timer[currectTimerState][currentTimer][currentTimerVal] = 0;
		}

		if(read_15 || read_12 || read_11 || read_10)
		{
			displayChange = true;
 8002d56:	2201      	movs	r2, #1
 8002d58:	4b38      	ldr	r3, [pc, #224]	; (8002e3c <EXTI15_10_IRQHandler+0x188>)
 8002d5a:	701a      	strb	r2, [r3, #0]
 8002d5c:	e046      	b.n	8002dec <EXTI15_10_IRQHandler+0x138>
				currentTimerVal = 3;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	7013      	strb	r3, [r2, #0]
				currectTimerState--;
 8002d62:	4a33      	ldr	r2, [pc, #204]	; (8002e30 <EXTI15_10_IRQHandler+0x17c>)
 8002d64:	7813      	ldrb	r3, [r2, #0]
 8002d66:	3b01      	subs	r3, #1
 8002d68:	b2db      	uxtb	r3, r3
				if(currectTimerState == 255)//on
 8002d6a:	2bff      	cmp	r3, #255	; 0xff
 8002d6c:	d10a      	bne.n	8002d84 <EXTI15_10_IRQHandler+0xd0>
					currectTimerState = 1;
 8002d6e:	7017      	strb	r7, [r2, #0]
					currentTimer--;
 8002d70:	4a31      	ldr	r2, [pc, #196]	; (8002e38 <EXTI15_10_IRQHandler+0x184>)
 8002d72:	7813      	ldrb	r3, [r2, #0]
 8002d74:	3b01      	subs	r3, #1
 8002d76:	b2db      	uxtb	r3, r3
					if(currentTimer == 255)
 8002d78:	2bff      	cmp	r3, #255	; 0xff
					currentTimer--;
 8002d7a:	7013      	strb	r3, [r2, #0]
					if(currentTimer == 255)
 8002d7c:	d103      	bne.n	8002d86 <EXTI15_10_IRQHandler+0xd2>
						currentTimer = timerCount - 1;
 8002d7e:	4b30      	ldr	r3, [pc, #192]	; (8002e40 <EXTI15_10_IRQHandler+0x18c>)
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	3b01      	subs	r3, #1
				currectTimerState--;
 8002d84:	7013      	strb	r3, [r2, #0]
		if(read_11)
 8002d86:	2c00      	cmp	r4, #0
 8002d88:	d0cd      	beq.n	8002d26 <EXTI15_10_IRQHandler+0x72>
 8002d8a:	e7c2      	b.n	8002d12 <EXTI15_10_IRQHandler+0x5e>
					currectTimerState = 0;
 8002d8c:	7011      	strb	r1, [r2, #0]
					currentTimer++;
 8002d8e:	4a2a      	ldr	r2, [pc, #168]	; (8002e38 <EXTI15_10_IRQHandler+0x184>)
					if(currentTimer >= timerCount)
 8002d90:	4f2b      	ldr	r7, [pc, #172]	; (8002e40 <EXTI15_10_IRQHandler+0x18c>)
					currentTimer++;
 8002d92:	7813      	ldrb	r3, [r2, #0]
					if(currentTimer >= timerCount)
 8002d94:	783f      	ldrb	r7, [r7, #0]
					currentTimer++;
 8002d96:	3301      	adds	r3, #1
 8002d98:	b2db      	uxtb	r3, r3
					if(currentTimer >= timerCount)
 8002d9a:	429f      	cmp	r7, r3
					currentTimer++;
 8002d9c:	7013      	strb	r3, [r2, #0]
						currentTimer = 0;
 8002d9e:	bf98      	it	ls
 8002da0:	7011      	strbls	r1, [r2, #0]
 8002da2:	e7c0      	b.n	8002d26 <EXTI15_10_IRQHandler+0x72>
		if(read_15)
 8002da4:	2800      	cmp	r0, #0
 8002da6:	d0d6      	beq.n	8002d56 <EXTI15_10_IRQHandler+0xa2>
			timer[currectTimerState][currentTimer][currentTimerVal]++;
 8002da8:	4b21      	ldr	r3, [pc, #132]	; (8002e30 <EXTI15_10_IRQHandler+0x17c>)
 8002daa:	4822      	ldr	r0, [pc, #136]	; (8002e34 <EXTI15_10_IRQHandler+0x180>)
 8002dac:	781d      	ldrb	r5, [r3, #0]
 8002dae:	4b22      	ldr	r3, [pc, #136]	; (8002e38 <EXTI15_10_IRQHandler+0x184>)
 8002db0:	781a      	ldrb	r2, [r3, #0]
 8002db2:	4b1e      	ldr	r3, [pc, #120]	; (8002e2c <EXTI15_10_IRQHandler+0x178>)
 8002db4:	eb02 0185 	add.w	r1, r2, r5, lsl #2
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8002dbe:	5cc1      	ldrb	r1, [r0, r3]
 8002dc0:	3101      	adds	r1, #1
 8002dc2:	b2c9      	uxtb	r1, r1
			if(timer[currectTimerState][currentTimer][currentTimerVal] > 99)
 8002dc4:	2963      	cmp	r1, #99	; 0x63
			timer[currectTimerState][currentTimer][currentTimerVal]++;
 8002dc6:	54c1      	strb	r1, [r0, r3]
			if(timer[currectTimerState][currentTimer][currentTimerVal] > 99)
 8002dc8:	d9c5      	bls.n	8002d56 <EXTI15_10_IRQHandler+0xa2>
				timer[currectTimerState][currentTimer][currentTimerVal] = 0;
 8002dca:	491a      	ldr	r1, [pc, #104]	; (8002e34 <EXTI15_10_IRQHandler+0x180>)
 8002dcc:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8002dd0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8002dd4:	2100      	movs	r1, #0
 8002dd6:	54d1      	strb	r1, [r2, r3]
 8002dd8:	e7bd      	b.n	8002d56 <EXTI15_10_IRQHandler+0xa2>
			timer[currectTimerState][currentTimer][currentTimerVal]++;
 8002dda:	2164      	movs	r1, #100	; 0x64
 8002ddc:	7031      	strb	r1, [r6, #0]
 8002dde:	e7f4      	b.n	8002dca <EXTI15_10_IRQHandler+0x116>
		if(read_15)
 8002de0:	2800      	cmp	r0, #0
 8002de2:	d1e1      	bne.n	8002da8 <EXTI15_10_IRQHandler+0xf4>
		if(read_15 || read_12 || read_11 || read_10)
 8002de4:	2c00      	cmp	r4, #0
 8002de6:	d1b6      	bne.n	8002d56 <EXTI15_10_IRQHandler+0xa2>
 8002de8:	2d00      	cmp	r5, #0
 8002dea:	d1b4      	bne.n	8002d56 <EXTI15_10_IRQHandler+0xa2>
		}

		TIM4->ARR = GetDesiredPeriodandPrescaler(.15,8000000);
 8002dec:	4915      	ldr	r1, [pc, #84]	; (8002e44 <EXTI15_10_IRQHandler+0x190>)
 8002dee:	4816      	ldr	r0, [pc, #88]	; (8002e48 <EXTI15_10_IRQHandler+0x194>)
 8002df0:	f7ff fc80 	bl	80026f4 <GetDesiredPeriodandPrescaler>
 8002df4:	4b15      	ldr	r3, [pc, #84]	; (8002e4c <EXTI15_10_IRQHandler+0x198>)
 8002df6:	62d8      	str	r0, [r3, #44]	; 0x2c
		//TIM4->ARR *= TIM4->ARR;
	}

	HAL_TIM_Base_Start_IT(&htim4);
 8002df8:	4815      	ldr	r0, [pc, #84]	; (8002e50 <EXTI15_10_IRQHandler+0x19c>)
 8002dfa:	f7fe fe39 	bl	8001a70 <HAL_TIM_Base_Start_IT>
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002dfe:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002e02:	f7fe fb0d 	bl	8001420 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002e06:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002e0a:	f7fe fb09 	bl	8001420 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002e0e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002e12:	f7fe fb05 	bl	8001420 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002e16:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002e1a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002e1e:	f7fe baff 	b.w	8001420 <HAL_GPIO_EXTI_IRQHandler>
 8002e22:	bf00      	nop
 8002e24:	20000114 	.word	0x20000114
 8002e28:	40011000 	.word	0x40011000
 8002e2c:	20000165 	.word	0x20000165
 8002e30:	200000c5 	.word	0x200000c5
 8002e34:	20000009 	.word	0x20000009
 8002e38:	200000c6 	.word	0x200000c6
 8002e3c:	20000162 	.word	0x20000162
 8002e40:	20000029 	.word	0x20000029
 8002e44:	007a1200 	.word	0x007a1200
 8002e48:	3e19999a 	.word	0x3e19999a
 8002e4c:	40000800 	.word	0x40000800
 8002e50:	20000118 	.word	0x20000118

08002e54 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* USER CODE BEGIN TIM7_IRQn 0 */
	for(int timerNumber = 0; timerNumber < 2; timerNumber++)
 8002e58:	2400      	movs	r4, #0
	{
		int read = HAL_GPIO_ReadPin(GPIOC,timerPin[timerNumber]);
 8002e5a:	4d0f      	ldr	r5, [pc, #60]	; (8002e98 <TIM7_IRQHandler+0x44>)
 8002e5c:	4f0f      	ldr	r7, [pc, #60]	; (8002e9c <TIM7_IRQHandler+0x48>)
		if(UpdateTimer(timerNumber, read) == 1)
		{
			HAL_GPIO_TogglePin(GPIOC,timerPin[timerNumber]);
			displayChange = true;
 8002e5e:	f8df 8044 	ldr.w	r8, [pc, #68]	; 8002ea4 <TIM7_IRQHandler+0x50>
		int read = HAL_GPIO_ReadPin(GPIOC,timerPin[timerNumber]);
 8002e62:	f835 1024 	ldrh.w	r1, [r5, r4, lsl #2]
 8002e66:	480d      	ldr	r0, [pc, #52]	; (8002e9c <TIM7_IRQHandler+0x48>)
 8002e68:	f7fe fac8 	bl	80013fc <HAL_GPIO_ReadPin>
		if(UpdateTimer(timerNumber, read) == 1)
 8002e6c:	4601      	mov	r1, r0
 8002e6e:	4620      	mov	r0, r4
 8002e70:	f7ff fc60 	bl	8002734 <UpdateTimer>
 8002e74:	2801      	cmp	r0, #1
 8002e76:	4606      	mov	r6, r0
 8002e78:	d106      	bne.n	8002e88 <TIM7_IRQHandler+0x34>
			HAL_GPIO_TogglePin(GPIOC,timerPin[timerNumber]);
 8002e7a:	f835 1024 	ldrh.w	r1, [r5, r4, lsl #2]
 8002e7e:	4638      	mov	r0, r7
 8002e80:	f7fe fac7 	bl	8001412 <HAL_GPIO_TogglePin>
			displayChange = true;
 8002e84:	f888 6000 	strb.w	r6, [r8]
	for(int timerNumber = 0; timerNumber < 2; timerNumber++)
 8002e88:	3401      	adds	r4, #1
 8002e8a:	2c02      	cmp	r4, #2
 8002e8c:	d1e9      	bne.n	8002e62 <TIM7_IRQHandler+0xe>
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002e8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_TIM_IRQHandler(&htim7);
 8002e92:	4803      	ldr	r0, [pc, #12]	; (8002ea0 <TIM7_IRQHandler+0x4c>)
 8002e94:	f7fe be16 	b.w	8001ac4 <HAL_TIM_IRQHandler>
 8002e98:	2000002c 	.word	0x2000002c
 8002e9c:	40011000 	.word	0x40011000
 8002ea0:	200001a8 	.word	0x200001a8
 8002ea4:	20000162 	.word	0x20000162

08002ea8 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8002ea8:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002eaa:	4b0a      	ldr	r3, [pc, #40]	; (8002ed4 <_sbrk+0x2c>)
{
 8002eac:	4602      	mov	r2, r0
	if (heap_end == 0)
 8002eae:	6819      	ldr	r1, [r3, #0]
 8002eb0:	b909      	cbnz	r1, 8002eb6 <_sbrk+0xe>
		heap_end = &end;
 8002eb2:	4909      	ldr	r1, [pc, #36]	; (8002ed8 <_sbrk+0x30>)
 8002eb4:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8002eb6:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8002eb8:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8002eba:	4402      	add	r2, r0
 8002ebc:	428a      	cmp	r2, r1
 8002ebe:	d906      	bls.n	8002ece <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8002ec0:	f000 f85a 	bl	8002f78 <__errno>
 8002ec4:	230c      	movs	r3, #12
 8002ec6:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8002ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8002ecc:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8002ece:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8002ed0:	bd08      	pop	{r3, pc}
 8002ed2:	bf00      	nop
 8002ed4:	200000d8 	.word	0x200000d8
 8002ed8:	200001ec 	.word	0x200001ec

08002edc <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002edc:	4b10      	ldr	r3, [pc, #64]	; (8002f20 <SystemInit+0x44>)
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	f042 0201 	orr.w	r2, r2, #1
 8002ee4:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002ee6:	6859      	ldr	r1, [r3, #4]
 8002ee8:	4a0e      	ldr	r2, [pc, #56]	; (8002f24 <SystemInit+0x48>)
 8002eea:	400a      	ands	r2, r1
 8002eec:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002ef4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002ef8:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f00:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002f02:	685a      	ldr	r2, [r3, #4]
 8002f04:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002f08:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;
#elif defined(STM32F100xB) || defined(STM32F100xE)
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002f0a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002f0e:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
 8002f10:	2200      	movs	r2, #0
 8002f12:	62da      	str	r2, [r3, #44]	; 0x2c
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002f14:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002f18:	4b03      	ldr	r3, [pc, #12]	; (8002f28 <SystemInit+0x4c>)
 8002f1a:	609a      	str	r2, [r3, #8]
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	40021000 	.word	0x40021000
 8002f24:	f8ff0000 	.word	0xf8ff0000
 8002f28:	e000ed00 	.word	0xe000ed00

08002f2c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002f2c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002f2e:	e003      	b.n	8002f38 <LoopCopyDataInit>

08002f30 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002f30:	4b0b      	ldr	r3, [pc, #44]	; (8002f60 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002f32:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002f34:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002f36:	3104      	adds	r1, #4

08002f38 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002f38:	480a      	ldr	r0, [pc, #40]	; (8002f64 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002f3a:	4b0b      	ldr	r3, [pc, #44]	; (8002f68 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002f3c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002f3e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002f40:	d3f6      	bcc.n	8002f30 <CopyDataInit>
  ldr r2, =_sbss
 8002f42:	4a0a      	ldr	r2, [pc, #40]	; (8002f6c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002f44:	e002      	b.n	8002f4c <LoopFillZerobss>

08002f46 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002f46:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002f48:	f842 3b04 	str.w	r3, [r2], #4

08002f4c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002f4c:	4b08      	ldr	r3, [pc, #32]	; (8002f70 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002f4e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002f50:	d3f9      	bcc.n	8002f46 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002f52:	f7ff ffc3 	bl	8002edc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f56:	f000 f815 	bl	8002f84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002f5a:	f7ff fc8f 	bl	800287c <main>
  bx lr
 8002f5e:	4770      	bx	lr
  ldr r3, =_sidata
 8002f60:	08003afc 	.word	0x08003afc
  ldr r0, =_sdata
 8002f64:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002f68:	200000a8 	.word	0x200000a8
  ldr r2, =_sbss
 8002f6c:	200000a8 	.word	0x200000a8
  ldr r3, = _ebss
 8002f70:	200001ec 	.word	0x200001ec

08002f74 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002f74:	e7fe      	b.n	8002f74 <ADC1_IRQHandler>
	...

08002f78 <__errno>:
 8002f78:	4b01      	ldr	r3, [pc, #4]	; (8002f80 <__errno+0x8>)
 8002f7a:	6818      	ldr	r0, [r3, #0]
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	20000040 	.word	0x20000040

08002f84 <__libc_init_array>:
 8002f84:	b570      	push	{r4, r5, r6, lr}
 8002f86:	2500      	movs	r5, #0
 8002f88:	4e0c      	ldr	r6, [pc, #48]	; (8002fbc <__libc_init_array+0x38>)
 8002f8a:	4c0d      	ldr	r4, [pc, #52]	; (8002fc0 <__libc_init_array+0x3c>)
 8002f8c:	1ba4      	subs	r4, r4, r6
 8002f8e:	10a4      	asrs	r4, r4, #2
 8002f90:	42a5      	cmp	r5, r4
 8002f92:	d109      	bne.n	8002fa8 <__libc_init_array+0x24>
 8002f94:	f000 fd50 	bl	8003a38 <_init>
 8002f98:	2500      	movs	r5, #0
 8002f9a:	4e0a      	ldr	r6, [pc, #40]	; (8002fc4 <__libc_init_array+0x40>)
 8002f9c:	4c0a      	ldr	r4, [pc, #40]	; (8002fc8 <__libc_init_array+0x44>)
 8002f9e:	1ba4      	subs	r4, r4, r6
 8002fa0:	10a4      	asrs	r4, r4, #2
 8002fa2:	42a5      	cmp	r5, r4
 8002fa4:	d105      	bne.n	8002fb2 <__libc_init_array+0x2e>
 8002fa6:	bd70      	pop	{r4, r5, r6, pc}
 8002fa8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002fac:	4798      	blx	r3
 8002fae:	3501      	adds	r5, #1
 8002fb0:	e7ee      	b.n	8002f90 <__libc_init_array+0xc>
 8002fb2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002fb6:	4798      	blx	r3
 8002fb8:	3501      	adds	r5, #1
 8002fba:	e7f2      	b.n	8002fa2 <__libc_init_array+0x1e>
 8002fbc:	08003af4 	.word	0x08003af4
 8002fc0:	08003af4 	.word	0x08003af4
 8002fc4:	08003af4 	.word	0x08003af4
 8002fc8:	08003af8 	.word	0x08003af8

08002fcc <memset>:
 8002fcc:	4603      	mov	r3, r0
 8002fce:	4402      	add	r2, r0
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d100      	bne.n	8002fd6 <memset+0xa>
 8002fd4:	4770      	bx	lr
 8002fd6:	f803 1b01 	strb.w	r1, [r3], #1
 8002fda:	e7f9      	b.n	8002fd0 <memset+0x4>

08002fdc <siprintf>:
 8002fdc:	b40e      	push	{r1, r2, r3}
 8002fde:	f44f 7102 	mov.w	r1, #520	; 0x208
 8002fe2:	b500      	push	{lr}
 8002fe4:	b09c      	sub	sp, #112	; 0x70
 8002fe6:	f8ad 1014 	strh.w	r1, [sp, #20]
 8002fea:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002fee:	9104      	str	r1, [sp, #16]
 8002ff0:	9107      	str	r1, [sp, #28]
 8002ff2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002ff6:	ab1d      	add	r3, sp, #116	; 0x74
 8002ff8:	9002      	str	r0, [sp, #8]
 8002ffa:	9006      	str	r0, [sp, #24]
 8002ffc:	4808      	ldr	r0, [pc, #32]	; (8003020 <siprintf+0x44>)
 8002ffe:	f853 2b04 	ldr.w	r2, [r3], #4
 8003002:	f8ad 1016 	strh.w	r1, [sp, #22]
 8003006:	6800      	ldr	r0, [r0, #0]
 8003008:	a902      	add	r1, sp, #8
 800300a:	9301      	str	r3, [sp, #4]
 800300c:	f000 f866 	bl	80030dc <_svfiprintf_r>
 8003010:	2200      	movs	r2, #0
 8003012:	9b02      	ldr	r3, [sp, #8]
 8003014:	701a      	strb	r2, [r3, #0]
 8003016:	b01c      	add	sp, #112	; 0x70
 8003018:	f85d eb04 	ldr.w	lr, [sp], #4
 800301c:	b003      	add	sp, #12
 800301e:	4770      	bx	lr
 8003020:	20000040 	.word	0x20000040

08003024 <__ssputs_r>:
 8003024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003028:	688e      	ldr	r6, [r1, #8]
 800302a:	4682      	mov	sl, r0
 800302c:	429e      	cmp	r6, r3
 800302e:	460c      	mov	r4, r1
 8003030:	4691      	mov	r9, r2
 8003032:	4698      	mov	r8, r3
 8003034:	d835      	bhi.n	80030a2 <__ssputs_r+0x7e>
 8003036:	898a      	ldrh	r2, [r1, #12]
 8003038:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800303c:	d031      	beq.n	80030a2 <__ssputs_r+0x7e>
 800303e:	2302      	movs	r3, #2
 8003040:	6825      	ldr	r5, [r4, #0]
 8003042:	6909      	ldr	r1, [r1, #16]
 8003044:	1a6f      	subs	r7, r5, r1
 8003046:	6965      	ldr	r5, [r4, #20]
 8003048:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800304c:	fb95 f5f3 	sdiv	r5, r5, r3
 8003050:	f108 0301 	add.w	r3, r8, #1
 8003054:	443b      	add	r3, r7
 8003056:	429d      	cmp	r5, r3
 8003058:	bf38      	it	cc
 800305a:	461d      	movcc	r5, r3
 800305c:	0553      	lsls	r3, r2, #21
 800305e:	d531      	bpl.n	80030c4 <__ssputs_r+0xa0>
 8003060:	4629      	mov	r1, r5
 8003062:	f000 fb47 	bl	80036f4 <_malloc_r>
 8003066:	4606      	mov	r6, r0
 8003068:	b950      	cbnz	r0, 8003080 <__ssputs_r+0x5c>
 800306a:	230c      	movs	r3, #12
 800306c:	f8ca 3000 	str.w	r3, [sl]
 8003070:	89a3      	ldrh	r3, [r4, #12]
 8003072:	f04f 30ff 	mov.w	r0, #4294967295
 8003076:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800307a:	81a3      	strh	r3, [r4, #12]
 800307c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003080:	463a      	mov	r2, r7
 8003082:	6921      	ldr	r1, [r4, #16]
 8003084:	f000 fac4 	bl	8003610 <memcpy>
 8003088:	89a3      	ldrh	r3, [r4, #12]
 800308a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800308e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003092:	81a3      	strh	r3, [r4, #12]
 8003094:	6126      	str	r6, [r4, #16]
 8003096:	443e      	add	r6, r7
 8003098:	6026      	str	r6, [r4, #0]
 800309a:	4646      	mov	r6, r8
 800309c:	6165      	str	r5, [r4, #20]
 800309e:	1bed      	subs	r5, r5, r7
 80030a0:	60a5      	str	r5, [r4, #8]
 80030a2:	4546      	cmp	r6, r8
 80030a4:	bf28      	it	cs
 80030a6:	4646      	movcs	r6, r8
 80030a8:	4649      	mov	r1, r9
 80030aa:	4632      	mov	r2, r6
 80030ac:	6820      	ldr	r0, [r4, #0]
 80030ae:	f000 faba 	bl	8003626 <memmove>
 80030b2:	68a3      	ldr	r3, [r4, #8]
 80030b4:	2000      	movs	r0, #0
 80030b6:	1b9b      	subs	r3, r3, r6
 80030b8:	60a3      	str	r3, [r4, #8]
 80030ba:	6823      	ldr	r3, [r4, #0]
 80030bc:	441e      	add	r6, r3
 80030be:	6026      	str	r6, [r4, #0]
 80030c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030c4:	462a      	mov	r2, r5
 80030c6:	f000 fb73 	bl	80037b0 <_realloc_r>
 80030ca:	4606      	mov	r6, r0
 80030cc:	2800      	cmp	r0, #0
 80030ce:	d1e1      	bne.n	8003094 <__ssputs_r+0x70>
 80030d0:	6921      	ldr	r1, [r4, #16]
 80030d2:	4650      	mov	r0, sl
 80030d4:	f000 fac2 	bl	800365c <_free_r>
 80030d8:	e7c7      	b.n	800306a <__ssputs_r+0x46>
	...

080030dc <_svfiprintf_r>:
 80030dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030e0:	b09d      	sub	sp, #116	; 0x74
 80030e2:	9303      	str	r3, [sp, #12]
 80030e4:	898b      	ldrh	r3, [r1, #12]
 80030e6:	4680      	mov	r8, r0
 80030e8:	061c      	lsls	r4, r3, #24
 80030ea:	460d      	mov	r5, r1
 80030ec:	4616      	mov	r6, r2
 80030ee:	d50f      	bpl.n	8003110 <_svfiprintf_r+0x34>
 80030f0:	690b      	ldr	r3, [r1, #16]
 80030f2:	b96b      	cbnz	r3, 8003110 <_svfiprintf_r+0x34>
 80030f4:	2140      	movs	r1, #64	; 0x40
 80030f6:	f000 fafd 	bl	80036f4 <_malloc_r>
 80030fa:	6028      	str	r0, [r5, #0]
 80030fc:	6128      	str	r0, [r5, #16]
 80030fe:	b928      	cbnz	r0, 800310c <_svfiprintf_r+0x30>
 8003100:	230c      	movs	r3, #12
 8003102:	f8c8 3000 	str.w	r3, [r8]
 8003106:	f04f 30ff 	mov.w	r0, #4294967295
 800310a:	e0c4      	b.n	8003296 <_svfiprintf_r+0x1ba>
 800310c:	2340      	movs	r3, #64	; 0x40
 800310e:	616b      	str	r3, [r5, #20]
 8003110:	2300      	movs	r3, #0
 8003112:	9309      	str	r3, [sp, #36]	; 0x24
 8003114:	2320      	movs	r3, #32
 8003116:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800311a:	2330      	movs	r3, #48	; 0x30
 800311c:	f04f 0b01 	mov.w	fp, #1
 8003120:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003124:	4637      	mov	r7, r6
 8003126:	463c      	mov	r4, r7
 8003128:	f814 3b01 	ldrb.w	r3, [r4], #1
 800312c:	2b00      	cmp	r3, #0
 800312e:	d13c      	bne.n	80031aa <_svfiprintf_r+0xce>
 8003130:	ebb7 0a06 	subs.w	sl, r7, r6
 8003134:	d00b      	beq.n	800314e <_svfiprintf_r+0x72>
 8003136:	4653      	mov	r3, sl
 8003138:	4632      	mov	r2, r6
 800313a:	4629      	mov	r1, r5
 800313c:	4640      	mov	r0, r8
 800313e:	f7ff ff71 	bl	8003024 <__ssputs_r>
 8003142:	3001      	adds	r0, #1
 8003144:	f000 80a2 	beq.w	800328c <_svfiprintf_r+0x1b0>
 8003148:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800314a:	4453      	add	r3, sl
 800314c:	9309      	str	r3, [sp, #36]	; 0x24
 800314e:	783b      	ldrb	r3, [r7, #0]
 8003150:	2b00      	cmp	r3, #0
 8003152:	f000 809b 	beq.w	800328c <_svfiprintf_r+0x1b0>
 8003156:	2300      	movs	r3, #0
 8003158:	f04f 32ff 	mov.w	r2, #4294967295
 800315c:	9304      	str	r3, [sp, #16]
 800315e:	9307      	str	r3, [sp, #28]
 8003160:	9205      	str	r2, [sp, #20]
 8003162:	9306      	str	r3, [sp, #24]
 8003164:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003168:	931a      	str	r3, [sp, #104]	; 0x68
 800316a:	2205      	movs	r2, #5
 800316c:	7821      	ldrb	r1, [r4, #0]
 800316e:	4850      	ldr	r0, [pc, #320]	; (80032b0 <_svfiprintf_r+0x1d4>)
 8003170:	f000 fa40 	bl	80035f4 <memchr>
 8003174:	1c67      	adds	r7, r4, #1
 8003176:	9b04      	ldr	r3, [sp, #16]
 8003178:	b9d8      	cbnz	r0, 80031b2 <_svfiprintf_r+0xd6>
 800317a:	06d9      	lsls	r1, r3, #27
 800317c:	bf44      	itt	mi
 800317e:	2220      	movmi	r2, #32
 8003180:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003184:	071a      	lsls	r2, r3, #28
 8003186:	bf44      	itt	mi
 8003188:	222b      	movmi	r2, #43	; 0x2b
 800318a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800318e:	7822      	ldrb	r2, [r4, #0]
 8003190:	2a2a      	cmp	r2, #42	; 0x2a
 8003192:	d016      	beq.n	80031c2 <_svfiprintf_r+0xe6>
 8003194:	2100      	movs	r1, #0
 8003196:	200a      	movs	r0, #10
 8003198:	9a07      	ldr	r2, [sp, #28]
 800319a:	4627      	mov	r7, r4
 800319c:	783b      	ldrb	r3, [r7, #0]
 800319e:	3401      	adds	r4, #1
 80031a0:	3b30      	subs	r3, #48	; 0x30
 80031a2:	2b09      	cmp	r3, #9
 80031a4:	d950      	bls.n	8003248 <_svfiprintf_r+0x16c>
 80031a6:	b1c9      	cbz	r1, 80031dc <_svfiprintf_r+0x100>
 80031a8:	e011      	b.n	80031ce <_svfiprintf_r+0xf2>
 80031aa:	2b25      	cmp	r3, #37	; 0x25
 80031ac:	d0c0      	beq.n	8003130 <_svfiprintf_r+0x54>
 80031ae:	4627      	mov	r7, r4
 80031b0:	e7b9      	b.n	8003126 <_svfiprintf_r+0x4a>
 80031b2:	4a3f      	ldr	r2, [pc, #252]	; (80032b0 <_svfiprintf_r+0x1d4>)
 80031b4:	463c      	mov	r4, r7
 80031b6:	1a80      	subs	r0, r0, r2
 80031b8:	fa0b f000 	lsl.w	r0, fp, r0
 80031bc:	4318      	orrs	r0, r3
 80031be:	9004      	str	r0, [sp, #16]
 80031c0:	e7d3      	b.n	800316a <_svfiprintf_r+0x8e>
 80031c2:	9a03      	ldr	r2, [sp, #12]
 80031c4:	1d11      	adds	r1, r2, #4
 80031c6:	6812      	ldr	r2, [r2, #0]
 80031c8:	9103      	str	r1, [sp, #12]
 80031ca:	2a00      	cmp	r2, #0
 80031cc:	db01      	blt.n	80031d2 <_svfiprintf_r+0xf6>
 80031ce:	9207      	str	r2, [sp, #28]
 80031d0:	e004      	b.n	80031dc <_svfiprintf_r+0x100>
 80031d2:	4252      	negs	r2, r2
 80031d4:	f043 0302 	orr.w	r3, r3, #2
 80031d8:	9207      	str	r2, [sp, #28]
 80031da:	9304      	str	r3, [sp, #16]
 80031dc:	783b      	ldrb	r3, [r7, #0]
 80031de:	2b2e      	cmp	r3, #46	; 0x2e
 80031e0:	d10d      	bne.n	80031fe <_svfiprintf_r+0x122>
 80031e2:	787b      	ldrb	r3, [r7, #1]
 80031e4:	1c79      	adds	r1, r7, #1
 80031e6:	2b2a      	cmp	r3, #42	; 0x2a
 80031e8:	d132      	bne.n	8003250 <_svfiprintf_r+0x174>
 80031ea:	9b03      	ldr	r3, [sp, #12]
 80031ec:	3702      	adds	r7, #2
 80031ee:	1d1a      	adds	r2, r3, #4
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	9203      	str	r2, [sp, #12]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	bfb8      	it	lt
 80031f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80031fc:	9305      	str	r3, [sp, #20]
 80031fe:	4c2d      	ldr	r4, [pc, #180]	; (80032b4 <_svfiprintf_r+0x1d8>)
 8003200:	2203      	movs	r2, #3
 8003202:	7839      	ldrb	r1, [r7, #0]
 8003204:	4620      	mov	r0, r4
 8003206:	f000 f9f5 	bl	80035f4 <memchr>
 800320a:	b138      	cbz	r0, 800321c <_svfiprintf_r+0x140>
 800320c:	2340      	movs	r3, #64	; 0x40
 800320e:	1b00      	subs	r0, r0, r4
 8003210:	fa03 f000 	lsl.w	r0, r3, r0
 8003214:	9b04      	ldr	r3, [sp, #16]
 8003216:	3701      	adds	r7, #1
 8003218:	4303      	orrs	r3, r0
 800321a:	9304      	str	r3, [sp, #16]
 800321c:	7839      	ldrb	r1, [r7, #0]
 800321e:	2206      	movs	r2, #6
 8003220:	4825      	ldr	r0, [pc, #148]	; (80032b8 <_svfiprintf_r+0x1dc>)
 8003222:	1c7e      	adds	r6, r7, #1
 8003224:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003228:	f000 f9e4 	bl	80035f4 <memchr>
 800322c:	2800      	cmp	r0, #0
 800322e:	d035      	beq.n	800329c <_svfiprintf_r+0x1c0>
 8003230:	4b22      	ldr	r3, [pc, #136]	; (80032bc <_svfiprintf_r+0x1e0>)
 8003232:	b9fb      	cbnz	r3, 8003274 <_svfiprintf_r+0x198>
 8003234:	9b03      	ldr	r3, [sp, #12]
 8003236:	3307      	adds	r3, #7
 8003238:	f023 0307 	bic.w	r3, r3, #7
 800323c:	3308      	adds	r3, #8
 800323e:	9303      	str	r3, [sp, #12]
 8003240:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003242:	444b      	add	r3, r9
 8003244:	9309      	str	r3, [sp, #36]	; 0x24
 8003246:	e76d      	b.n	8003124 <_svfiprintf_r+0x48>
 8003248:	fb00 3202 	mla	r2, r0, r2, r3
 800324c:	2101      	movs	r1, #1
 800324e:	e7a4      	b.n	800319a <_svfiprintf_r+0xbe>
 8003250:	2300      	movs	r3, #0
 8003252:	240a      	movs	r4, #10
 8003254:	4618      	mov	r0, r3
 8003256:	9305      	str	r3, [sp, #20]
 8003258:	460f      	mov	r7, r1
 800325a:	783a      	ldrb	r2, [r7, #0]
 800325c:	3101      	adds	r1, #1
 800325e:	3a30      	subs	r2, #48	; 0x30
 8003260:	2a09      	cmp	r2, #9
 8003262:	d903      	bls.n	800326c <_svfiprintf_r+0x190>
 8003264:	2b00      	cmp	r3, #0
 8003266:	d0ca      	beq.n	80031fe <_svfiprintf_r+0x122>
 8003268:	9005      	str	r0, [sp, #20]
 800326a:	e7c8      	b.n	80031fe <_svfiprintf_r+0x122>
 800326c:	fb04 2000 	mla	r0, r4, r0, r2
 8003270:	2301      	movs	r3, #1
 8003272:	e7f1      	b.n	8003258 <_svfiprintf_r+0x17c>
 8003274:	ab03      	add	r3, sp, #12
 8003276:	9300      	str	r3, [sp, #0]
 8003278:	462a      	mov	r2, r5
 800327a:	4b11      	ldr	r3, [pc, #68]	; (80032c0 <_svfiprintf_r+0x1e4>)
 800327c:	a904      	add	r1, sp, #16
 800327e:	4640      	mov	r0, r8
 8003280:	f3af 8000 	nop.w
 8003284:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003288:	4681      	mov	r9, r0
 800328a:	d1d9      	bne.n	8003240 <_svfiprintf_r+0x164>
 800328c:	89ab      	ldrh	r3, [r5, #12]
 800328e:	065b      	lsls	r3, r3, #25
 8003290:	f53f af39 	bmi.w	8003106 <_svfiprintf_r+0x2a>
 8003294:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003296:	b01d      	add	sp, #116	; 0x74
 8003298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800329c:	ab03      	add	r3, sp, #12
 800329e:	9300      	str	r3, [sp, #0]
 80032a0:	462a      	mov	r2, r5
 80032a2:	4b07      	ldr	r3, [pc, #28]	; (80032c0 <_svfiprintf_r+0x1e4>)
 80032a4:	a904      	add	r1, sp, #16
 80032a6:	4640      	mov	r0, r8
 80032a8:	f000 f884 	bl	80033b4 <_printf_i>
 80032ac:	e7ea      	b.n	8003284 <_svfiprintf_r+0x1a8>
 80032ae:	bf00      	nop
 80032b0:	08003abc 	.word	0x08003abc
 80032b4:	08003ac2 	.word	0x08003ac2
 80032b8:	08003ac6 	.word	0x08003ac6
 80032bc:	00000000 	.word	0x00000000
 80032c0:	08003025 	.word	0x08003025

080032c4 <_printf_common>:
 80032c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032c8:	4691      	mov	r9, r2
 80032ca:	461f      	mov	r7, r3
 80032cc:	688a      	ldr	r2, [r1, #8]
 80032ce:	690b      	ldr	r3, [r1, #16]
 80032d0:	4606      	mov	r6, r0
 80032d2:	4293      	cmp	r3, r2
 80032d4:	bfb8      	it	lt
 80032d6:	4613      	movlt	r3, r2
 80032d8:	f8c9 3000 	str.w	r3, [r9]
 80032dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80032e0:	460c      	mov	r4, r1
 80032e2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80032e6:	b112      	cbz	r2, 80032ee <_printf_common+0x2a>
 80032e8:	3301      	adds	r3, #1
 80032ea:	f8c9 3000 	str.w	r3, [r9]
 80032ee:	6823      	ldr	r3, [r4, #0]
 80032f0:	0699      	lsls	r1, r3, #26
 80032f2:	bf42      	ittt	mi
 80032f4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80032f8:	3302      	addmi	r3, #2
 80032fa:	f8c9 3000 	strmi.w	r3, [r9]
 80032fe:	6825      	ldr	r5, [r4, #0]
 8003300:	f015 0506 	ands.w	r5, r5, #6
 8003304:	d107      	bne.n	8003316 <_printf_common+0x52>
 8003306:	f104 0a19 	add.w	sl, r4, #25
 800330a:	68e3      	ldr	r3, [r4, #12]
 800330c:	f8d9 2000 	ldr.w	r2, [r9]
 8003310:	1a9b      	subs	r3, r3, r2
 8003312:	429d      	cmp	r5, r3
 8003314:	db2a      	blt.n	800336c <_printf_common+0xa8>
 8003316:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800331a:	6822      	ldr	r2, [r4, #0]
 800331c:	3300      	adds	r3, #0
 800331e:	bf18      	it	ne
 8003320:	2301      	movne	r3, #1
 8003322:	0692      	lsls	r2, r2, #26
 8003324:	d42f      	bmi.n	8003386 <_printf_common+0xc2>
 8003326:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800332a:	4639      	mov	r1, r7
 800332c:	4630      	mov	r0, r6
 800332e:	47c0      	blx	r8
 8003330:	3001      	adds	r0, #1
 8003332:	d022      	beq.n	800337a <_printf_common+0xb6>
 8003334:	6823      	ldr	r3, [r4, #0]
 8003336:	68e5      	ldr	r5, [r4, #12]
 8003338:	f003 0306 	and.w	r3, r3, #6
 800333c:	2b04      	cmp	r3, #4
 800333e:	bf18      	it	ne
 8003340:	2500      	movne	r5, #0
 8003342:	f8d9 2000 	ldr.w	r2, [r9]
 8003346:	f04f 0900 	mov.w	r9, #0
 800334a:	bf08      	it	eq
 800334c:	1aad      	subeq	r5, r5, r2
 800334e:	68a3      	ldr	r3, [r4, #8]
 8003350:	6922      	ldr	r2, [r4, #16]
 8003352:	bf08      	it	eq
 8003354:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003358:	4293      	cmp	r3, r2
 800335a:	bfc4      	itt	gt
 800335c:	1a9b      	subgt	r3, r3, r2
 800335e:	18ed      	addgt	r5, r5, r3
 8003360:	341a      	adds	r4, #26
 8003362:	454d      	cmp	r5, r9
 8003364:	d11b      	bne.n	800339e <_printf_common+0xda>
 8003366:	2000      	movs	r0, #0
 8003368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800336c:	2301      	movs	r3, #1
 800336e:	4652      	mov	r2, sl
 8003370:	4639      	mov	r1, r7
 8003372:	4630      	mov	r0, r6
 8003374:	47c0      	blx	r8
 8003376:	3001      	adds	r0, #1
 8003378:	d103      	bne.n	8003382 <_printf_common+0xbe>
 800337a:	f04f 30ff 	mov.w	r0, #4294967295
 800337e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003382:	3501      	adds	r5, #1
 8003384:	e7c1      	b.n	800330a <_printf_common+0x46>
 8003386:	2030      	movs	r0, #48	; 0x30
 8003388:	18e1      	adds	r1, r4, r3
 800338a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800338e:	1c5a      	adds	r2, r3, #1
 8003390:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003394:	4422      	add	r2, r4
 8003396:	3302      	adds	r3, #2
 8003398:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800339c:	e7c3      	b.n	8003326 <_printf_common+0x62>
 800339e:	2301      	movs	r3, #1
 80033a0:	4622      	mov	r2, r4
 80033a2:	4639      	mov	r1, r7
 80033a4:	4630      	mov	r0, r6
 80033a6:	47c0      	blx	r8
 80033a8:	3001      	adds	r0, #1
 80033aa:	d0e6      	beq.n	800337a <_printf_common+0xb6>
 80033ac:	f109 0901 	add.w	r9, r9, #1
 80033b0:	e7d7      	b.n	8003362 <_printf_common+0x9e>
	...

080033b4 <_printf_i>:
 80033b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80033b8:	4617      	mov	r7, r2
 80033ba:	7e0a      	ldrb	r2, [r1, #24]
 80033bc:	b085      	sub	sp, #20
 80033be:	2a6e      	cmp	r2, #110	; 0x6e
 80033c0:	4698      	mov	r8, r3
 80033c2:	4606      	mov	r6, r0
 80033c4:	460c      	mov	r4, r1
 80033c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80033c8:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80033cc:	f000 80bc 	beq.w	8003548 <_printf_i+0x194>
 80033d0:	d81a      	bhi.n	8003408 <_printf_i+0x54>
 80033d2:	2a63      	cmp	r2, #99	; 0x63
 80033d4:	d02e      	beq.n	8003434 <_printf_i+0x80>
 80033d6:	d80a      	bhi.n	80033ee <_printf_i+0x3a>
 80033d8:	2a00      	cmp	r2, #0
 80033da:	f000 80c8 	beq.w	800356e <_printf_i+0x1ba>
 80033de:	2a58      	cmp	r2, #88	; 0x58
 80033e0:	f000 808a 	beq.w	80034f8 <_printf_i+0x144>
 80033e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80033e8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80033ec:	e02a      	b.n	8003444 <_printf_i+0x90>
 80033ee:	2a64      	cmp	r2, #100	; 0x64
 80033f0:	d001      	beq.n	80033f6 <_printf_i+0x42>
 80033f2:	2a69      	cmp	r2, #105	; 0x69
 80033f4:	d1f6      	bne.n	80033e4 <_printf_i+0x30>
 80033f6:	6821      	ldr	r1, [r4, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	f011 0f80 	tst.w	r1, #128	; 0x80
 80033fe:	d023      	beq.n	8003448 <_printf_i+0x94>
 8003400:	1d11      	adds	r1, r2, #4
 8003402:	6019      	str	r1, [r3, #0]
 8003404:	6813      	ldr	r3, [r2, #0]
 8003406:	e027      	b.n	8003458 <_printf_i+0xa4>
 8003408:	2a73      	cmp	r2, #115	; 0x73
 800340a:	f000 80b4 	beq.w	8003576 <_printf_i+0x1c2>
 800340e:	d808      	bhi.n	8003422 <_printf_i+0x6e>
 8003410:	2a6f      	cmp	r2, #111	; 0x6f
 8003412:	d02a      	beq.n	800346a <_printf_i+0xb6>
 8003414:	2a70      	cmp	r2, #112	; 0x70
 8003416:	d1e5      	bne.n	80033e4 <_printf_i+0x30>
 8003418:	680a      	ldr	r2, [r1, #0]
 800341a:	f042 0220 	orr.w	r2, r2, #32
 800341e:	600a      	str	r2, [r1, #0]
 8003420:	e003      	b.n	800342a <_printf_i+0x76>
 8003422:	2a75      	cmp	r2, #117	; 0x75
 8003424:	d021      	beq.n	800346a <_printf_i+0xb6>
 8003426:	2a78      	cmp	r2, #120	; 0x78
 8003428:	d1dc      	bne.n	80033e4 <_printf_i+0x30>
 800342a:	2278      	movs	r2, #120	; 0x78
 800342c:	496f      	ldr	r1, [pc, #444]	; (80035ec <_printf_i+0x238>)
 800342e:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8003432:	e064      	b.n	80034fe <_printf_i+0x14a>
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800343a:	1d11      	adds	r1, r2, #4
 800343c:	6019      	str	r1, [r3, #0]
 800343e:	6813      	ldr	r3, [r2, #0]
 8003440:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003444:	2301      	movs	r3, #1
 8003446:	e0a3      	b.n	8003590 <_printf_i+0x1dc>
 8003448:	f011 0f40 	tst.w	r1, #64	; 0x40
 800344c:	f102 0104 	add.w	r1, r2, #4
 8003450:	6019      	str	r1, [r3, #0]
 8003452:	d0d7      	beq.n	8003404 <_printf_i+0x50>
 8003454:	f9b2 3000 	ldrsh.w	r3, [r2]
 8003458:	2b00      	cmp	r3, #0
 800345a:	da03      	bge.n	8003464 <_printf_i+0xb0>
 800345c:	222d      	movs	r2, #45	; 0x2d
 800345e:	425b      	negs	r3, r3
 8003460:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003464:	4962      	ldr	r1, [pc, #392]	; (80035f0 <_printf_i+0x23c>)
 8003466:	220a      	movs	r2, #10
 8003468:	e017      	b.n	800349a <_printf_i+0xe6>
 800346a:	6820      	ldr	r0, [r4, #0]
 800346c:	6819      	ldr	r1, [r3, #0]
 800346e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003472:	d003      	beq.n	800347c <_printf_i+0xc8>
 8003474:	1d08      	adds	r0, r1, #4
 8003476:	6018      	str	r0, [r3, #0]
 8003478:	680b      	ldr	r3, [r1, #0]
 800347a:	e006      	b.n	800348a <_printf_i+0xd6>
 800347c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003480:	f101 0004 	add.w	r0, r1, #4
 8003484:	6018      	str	r0, [r3, #0]
 8003486:	d0f7      	beq.n	8003478 <_printf_i+0xc4>
 8003488:	880b      	ldrh	r3, [r1, #0]
 800348a:	2a6f      	cmp	r2, #111	; 0x6f
 800348c:	bf14      	ite	ne
 800348e:	220a      	movne	r2, #10
 8003490:	2208      	moveq	r2, #8
 8003492:	4957      	ldr	r1, [pc, #348]	; (80035f0 <_printf_i+0x23c>)
 8003494:	2000      	movs	r0, #0
 8003496:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800349a:	6865      	ldr	r5, [r4, #4]
 800349c:	2d00      	cmp	r5, #0
 800349e:	60a5      	str	r5, [r4, #8]
 80034a0:	f2c0 809c 	blt.w	80035dc <_printf_i+0x228>
 80034a4:	6820      	ldr	r0, [r4, #0]
 80034a6:	f020 0004 	bic.w	r0, r0, #4
 80034aa:	6020      	str	r0, [r4, #0]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d13f      	bne.n	8003530 <_printf_i+0x17c>
 80034b0:	2d00      	cmp	r5, #0
 80034b2:	f040 8095 	bne.w	80035e0 <_printf_i+0x22c>
 80034b6:	4675      	mov	r5, lr
 80034b8:	2a08      	cmp	r2, #8
 80034ba:	d10b      	bne.n	80034d4 <_printf_i+0x120>
 80034bc:	6823      	ldr	r3, [r4, #0]
 80034be:	07da      	lsls	r2, r3, #31
 80034c0:	d508      	bpl.n	80034d4 <_printf_i+0x120>
 80034c2:	6923      	ldr	r3, [r4, #16]
 80034c4:	6862      	ldr	r2, [r4, #4]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	bfde      	ittt	le
 80034ca:	2330      	movle	r3, #48	; 0x30
 80034cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80034d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80034d4:	ebae 0305 	sub.w	r3, lr, r5
 80034d8:	6123      	str	r3, [r4, #16]
 80034da:	f8cd 8000 	str.w	r8, [sp]
 80034de:	463b      	mov	r3, r7
 80034e0:	aa03      	add	r2, sp, #12
 80034e2:	4621      	mov	r1, r4
 80034e4:	4630      	mov	r0, r6
 80034e6:	f7ff feed 	bl	80032c4 <_printf_common>
 80034ea:	3001      	adds	r0, #1
 80034ec:	d155      	bne.n	800359a <_printf_i+0x1e6>
 80034ee:	f04f 30ff 	mov.w	r0, #4294967295
 80034f2:	b005      	add	sp, #20
 80034f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80034f8:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80034fc:	493c      	ldr	r1, [pc, #240]	; (80035f0 <_printf_i+0x23c>)
 80034fe:	6822      	ldr	r2, [r4, #0]
 8003500:	6818      	ldr	r0, [r3, #0]
 8003502:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003506:	f100 0504 	add.w	r5, r0, #4
 800350a:	601d      	str	r5, [r3, #0]
 800350c:	d001      	beq.n	8003512 <_printf_i+0x15e>
 800350e:	6803      	ldr	r3, [r0, #0]
 8003510:	e002      	b.n	8003518 <_printf_i+0x164>
 8003512:	0655      	lsls	r5, r2, #25
 8003514:	d5fb      	bpl.n	800350e <_printf_i+0x15a>
 8003516:	8803      	ldrh	r3, [r0, #0]
 8003518:	07d0      	lsls	r0, r2, #31
 800351a:	bf44      	itt	mi
 800351c:	f042 0220 	orrmi.w	r2, r2, #32
 8003520:	6022      	strmi	r2, [r4, #0]
 8003522:	b91b      	cbnz	r3, 800352c <_printf_i+0x178>
 8003524:	6822      	ldr	r2, [r4, #0]
 8003526:	f022 0220 	bic.w	r2, r2, #32
 800352a:	6022      	str	r2, [r4, #0]
 800352c:	2210      	movs	r2, #16
 800352e:	e7b1      	b.n	8003494 <_printf_i+0xe0>
 8003530:	4675      	mov	r5, lr
 8003532:	fbb3 f0f2 	udiv	r0, r3, r2
 8003536:	fb02 3310 	mls	r3, r2, r0, r3
 800353a:	5ccb      	ldrb	r3, [r1, r3]
 800353c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003540:	4603      	mov	r3, r0
 8003542:	2800      	cmp	r0, #0
 8003544:	d1f5      	bne.n	8003532 <_printf_i+0x17e>
 8003546:	e7b7      	b.n	80034b8 <_printf_i+0x104>
 8003548:	6808      	ldr	r0, [r1, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003550:	6949      	ldr	r1, [r1, #20]
 8003552:	d004      	beq.n	800355e <_printf_i+0x1aa>
 8003554:	1d10      	adds	r0, r2, #4
 8003556:	6018      	str	r0, [r3, #0]
 8003558:	6813      	ldr	r3, [r2, #0]
 800355a:	6019      	str	r1, [r3, #0]
 800355c:	e007      	b.n	800356e <_printf_i+0x1ba>
 800355e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003562:	f102 0004 	add.w	r0, r2, #4
 8003566:	6018      	str	r0, [r3, #0]
 8003568:	6813      	ldr	r3, [r2, #0]
 800356a:	d0f6      	beq.n	800355a <_printf_i+0x1a6>
 800356c:	8019      	strh	r1, [r3, #0]
 800356e:	2300      	movs	r3, #0
 8003570:	4675      	mov	r5, lr
 8003572:	6123      	str	r3, [r4, #16]
 8003574:	e7b1      	b.n	80034da <_printf_i+0x126>
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	1d11      	adds	r1, r2, #4
 800357a:	6019      	str	r1, [r3, #0]
 800357c:	6815      	ldr	r5, [r2, #0]
 800357e:	2100      	movs	r1, #0
 8003580:	6862      	ldr	r2, [r4, #4]
 8003582:	4628      	mov	r0, r5
 8003584:	f000 f836 	bl	80035f4 <memchr>
 8003588:	b108      	cbz	r0, 800358e <_printf_i+0x1da>
 800358a:	1b40      	subs	r0, r0, r5
 800358c:	6060      	str	r0, [r4, #4]
 800358e:	6863      	ldr	r3, [r4, #4]
 8003590:	6123      	str	r3, [r4, #16]
 8003592:	2300      	movs	r3, #0
 8003594:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003598:	e79f      	b.n	80034da <_printf_i+0x126>
 800359a:	6923      	ldr	r3, [r4, #16]
 800359c:	462a      	mov	r2, r5
 800359e:	4639      	mov	r1, r7
 80035a0:	4630      	mov	r0, r6
 80035a2:	47c0      	blx	r8
 80035a4:	3001      	adds	r0, #1
 80035a6:	d0a2      	beq.n	80034ee <_printf_i+0x13a>
 80035a8:	6823      	ldr	r3, [r4, #0]
 80035aa:	079b      	lsls	r3, r3, #30
 80035ac:	d507      	bpl.n	80035be <_printf_i+0x20a>
 80035ae:	2500      	movs	r5, #0
 80035b0:	f104 0919 	add.w	r9, r4, #25
 80035b4:	68e3      	ldr	r3, [r4, #12]
 80035b6:	9a03      	ldr	r2, [sp, #12]
 80035b8:	1a9b      	subs	r3, r3, r2
 80035ba:	429d      	cmp	r5, r3
 80035bc:	db05      	blt.n	80035ca <_printf_i+0x216>
 80035be:	68e0      	ldr	r0, [r4, #12]
 80035c0:	9b03      	ldr	r3, [sp, #12]
 80035c2:	4298      	cmp	r0, r3
 80035c4:	bfb8      	it	lt
 80035c6:	4618      	movlt	r0, r3
 80035c8:	e793      	b.n	80034f2 <_printf_i+0x13e>
 80035ca:	2301      	movs	r3, #1
 80035cc:	464a      	mov	r2, r9
 80035ce:	4639      	mov	r1, r7
 80035d0:	4630      	mov	r0, r6
 80035d2:	47c0      	blx	r8
 80035d4:	3001      	adds	r0, #1
 80035d6:	d08a      	beq.n	80034ee <_printf_i+0x13a>
 80035d8:	3501      	adds	r5, #1
 80035da:	e7eb      	b.n	80035b4 <_printf_i+0x200>
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1a7      	bne.n	8003530 <_printf_i+0x17c>
 80035e0:	780b      	ldrb	r3, [r1, #0]
 80035e2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80035e6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80035ea:	e765      	b.n	80034b8 <_printf_i+0x104>
 80035ec:	08003ade 	.word	0x08003ade
 80035f0:	08003acd 	.word	0x08003acd

080035f4 <memchr>:
 80035f4:	b510      	push	{r4, lr}
 80035f6:	b2c9      	uxtb	r1, r1
 80035f8:	4402      	add	r2, r0
 80035fa:	4290      	cmp	r0, r2
 80035fc:	4603      	mov	r3, r0
 80035fe:	d101      	bne.n	8003604 <memchr+0x10>
 8003600:	2000      	movs	r0, #0
 8003602:	bd10      	pop	{r4, pc}
 8003604:	781c      	ldrb	r4, [r3, #0]
 8003606:	3001      	adds	r0, #1
 8003608:	428c      	cmp	r4, r1
 800360a:	d1f6      	bne.n	80035fa <memchr+0x6>
 800360c:	4618      	mov	r0, r3
 800360e:	bd10      	pop	{r4, pc}

08003610 <memcpy>:
 8003610:	b510      	push	{r4, lr}
 8003612:	1e43      	subs	r3, r0, #1
 8003614:	440a      	add	r2, r1
 8003616:	4291      	cmp	r1, r2
 8003618:	d100      	bne.n	800361c <memcpy+0xc>
 800361a:	bd10      	pop	{r4, pc}
 800361c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003620:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003624:	e7f7      	b.n	8003616 <memcpy+0x6>

08003626 <memmove>:
 8003626:	4288      	cmp	r0, r1
 8003628:	b510      	push	{r4, lr}
 800362a:	eb01 0302 	add.w	r3, r1, r2
 800362e:	d803      	bhi.n	8003638 <memmove+0x12>
 8003630:	1e42      	subs	r2, r0, #1
 8003632:	4299      	cmp	r1, r3
 8003634:	d10c      	bne.n	8003650 <memmove+0x2a>
 8003636:	bd10      	pop	{r4, pc}
 8003638:	4298      	cmp	r0, r3
 800363a:	d2f9      	bcs.n	8003630 <memmove+0xa>
 800363c:	1881      	adds	r1, r0, r2
 800363e:	1ad2      	subs	r2, r2, r3
 8003640:	42d3      	cmn	r3, r2
 8003642:	d100      	bne.n	8003646 <memmove+0x20>
 8003644:	bd10      	pop	{r4, pc}
 8003646:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800364a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800364e:	e7f7      	b.n	8003640 <memmove+0x1a>
 8003650:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003654:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003658:	e7eb      	b.n	8003632 <memmove+0xc>
	...

0800365c <_free_r>:
 800365c:	b538      	push	{r3, r4, r5, lr}
 800365e:	4605      	mov	r5, r0
 8003660:	2900      	cmp	r1, #0
 8003662:	d043      	beq.n	80036ec <_free_r+0x90>
 8003664:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003668:	1f0c      	subs	r4, r1, #4
 800366a:	2b00      	cmp	r3, #0
 800366c:	bfb8      	it	lt
 800366e:	18e4      	addlt	r4, r4, r3
 8003670:	f000 f8d4 	bl	800381c <__malloc_lock>
 8003674:	4a1e      	ldr	r2, [pc, #120]	; (80036f0 <_free_r+0x94>)
 8003676:	6813      	ldr	r3, [r2, #0]
 8003678:	4610      	mov	r0, r2
 800367a:	b933      	cbnz	r3, 800368a <_free_r+0x2e>
 800367c:	6063      	str	r3, [r4, #4]
 800367e:	6014      	str	r4, [r2, #0]
 8003680:	4628      	mov	r0, r5
 8003682:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003686:	f000 b8ca 	b.w	800381e <__malloc_unlock>
 800368a:	42a3      	cmp	r3, r4
 800368c:	d90b      	bls.n	80036a6 <_free_r+0x4a>
 800368e:	6821      	ldr	r1, [r4, #0]
 8003690:	1862      	adds	r2, r4, r1
 8003692:	4293      	cmp	r3, r2
 8003694:	bf01      	itttt	eq
 8003696:	681a      	ldreq	r2, [r3, #0]
 8003698:	685b      	ldreq	r3, [r3, #4]
 800369a:	1852      	addeq	r2, r2, r1
 800369c:	6022      	streq	r2, [r4, #0]
 800369e:	6063      	str	r3, [r4, #4]
 80036a0:	6004      	str	r4, [r0, #0]
 80036a2:	e7ed      	b.n	8003680 <_free_r+0x24>
 80036a4:	4613      	mov	r3, r2
 80036a6:	685a      	ldr	r2, [r3, #4]
 80036a8:	b10a      	cbz	r2, 80036ae <_free_r+0x52>
 80036aa:	42a2      	cmp	r2, r4
 80036ac:	d9fa      	bls.n	80036a4 <_free_r+0x48>
 80036ae:	6819      	ldr	r1, [r3, #0]
 80036b0:	1858      	adds	r0, r3, r1
 80036b2:	42a0      	cmp	r0, r4
 80036b4:	d10b      	bne.n	80036ce <_free_r+0x72>
 80036b6:	6820      	ldr	r0, [r4, #0]
 80036b8:	4401      	add	r1, r0
 80036ba:	1858      	adds	r0, r3, r1
 80036bc:	4282      	cmp	r2, r0
 80036be:	6019      	str	r1, [r3, #0]
 80036c0:	d1de      	bne.n	8003680 <_free_r+0x24>
 80036c2:	6810      	ldr	r0, [r2, #0]
 80036c4:	6852      	ldr	r2, [r2, #4]
 80036c6:	4401      	add	r1, r0
 80036c8:	6019      	str	r1, [r3, #0]
 80036ca:	605a      	str	r2, [r3, #4]
 80036cc:	e7d8      	b.n	8003680 <_free_r+0x24>
 80036ce:	d902      	bls.n	80036d6 <_free_r+0x7a>
 80036d0:	230c      	movs	r3, #12
 80036d2:	602b      	str	r3, [r5, #0]
 80036d4:	e7d4      	b.n	8003680 <_free_r+0x24>
 80036d6:	6820      	ldr	r0, [r4, #0]
 80036d8:	1821      	adds	r1, r4, r0
 80036da:	428a      	cmp	r2, r1
 80036dc:	bf01      	itttt	eq
 80036de:	6811      	ldreq	r1, [r2, #0]
 80036e0:	6852      	ldreq	r2, [r2, #4]
 80036e2:	1809      	addeq	r1, r1, r0
 80036e4:	6021      	streq	r1, [r4, #0]
 80036e6:	6062      	str	r2, [r4, #4]
 80036e8:	605c      	str	r4, [r3, #4]
 80036ea:	e7c9      	b.n	8003680 <_free_r+0x24>
 80036ec:	bd38      	pop	{r3, r4, r5, pc}
 80036ee:	bf00      	nop
 80036f0:	200000dc 	.word	0x200000dc

080036f4 <_malloc_r>:
 80036f4:	b570      	push	{r4, r5, r6, lr}
 80036f6:	1ccd      	adds	r5, r1, #3
 80036f8:	f025 0503 	bic.w	r5, r5, #3
 80036fc:	3508      	adds	r5, #8
 80036fe:	2d0c      	cmp	r5, #12
 8003700:	bf38      	it	cc
 8003702:	250c      	movcc	r5, #12
 8003704:	2d00      	cmp	r5, #0
 8003706:	4606      	mov	r6, r0
 8003708:	db01      	blt.n	800370e <_malloc_r+0x1a>
 800370a:	42a9      	cmp	r1, r5
 800370c:	d903      	bls.n	8003716 <_malloc_r+0x22>
 800370e:	230c      	movs	r3, #12
 8003710:	6033      	str	r3, [r6, #0]
 8003712:	2000      	movs	r0, #0
 8003714:	bd70      	pop	{r4, r5, r6, pc}
 8003716:	f000 f881 	bl	800381c <__malloc_lock>
 800371a:	4a23      	ldr	r2, [pc, #140]	; (80037a8 <_malloc_r+0xb4>)
 800371c:	6814      	ldr	r4, [r2, #0]
 800371e:	4621      	mov	r1, r4
 8003720:	b991      	cbnz	r1, 8003748 <_malloc_r+0x54>
 8003722:	4c22      	ldr	r4, [pc, #136]	; (80037ac <_malloc_r+0xb8>)
 8003724:	6823      	ldr	r3, [r4, #0]
 8003726:	b91b      	cbnz	r3, 8003730 <_malloc_r+0x3c>
 8003728:	4630      	mov	r0, r6
 800372a:	f000 f867 	bl	80037fc <_sbrk_r>
 800372e:	6020      	str	r0, [r4, #0]
 8003730:	4629      	mov	r1, r5
 8003732:	4630      	mov	r0, r6
 8003734:	f000 f862 	bl	80037fc <_sbrk_r>
 8003738:	1c43      	adds	r3, r0, #1
 800373a:	d126      	bne.n	800378a <_malloc_r+0x96>
 800373c:	230c      	movs	r3, #12
 800373e:	4630      	mov	r0, r6
 8003740:	6033      	str	r3, [r6, #0]
 8003742:	f000 f86c 	bl	800381e <__malloc_unlock>
 8003746:	e7e4      	b.n	8003712 <_malloc_r+0x1e>
 8003748:	680b      	ldr	r3, [r1, #0]
 800374a:	1b5b      	subs	r3, r3, r5
 800374c:	d41a      	bmi.n	8003784 <_malloc_r+0x90>
 800374e:	2b0b      	cmp	r3, #11
 8003750:	d90f      	bls.n	8003772 <_malloc_r+0x7e>
 8003752:	600b      	str	r3, [r1, #0]
 8003754:	18cc      	adds	r4, r1, r3
 8003756:	50cd      	str	r5, [r1, r3]
 8003758:	4630      	mov	r0, r6
 800375a:	f000 f860 	bl	800381e <__malloc_unlock>
 800375e:	f104 000b 	add.w	r0, r4, #11
 8003762:	1d23      	adds	r3, r4, #4
 8003764:	f020 0007 	bic.w	r0, r0, #7
 8003768:	1ac3      	subs	r3, r0, r3
 800376a:	d01b      	beq.n	80037a4 <_malloc_r+0xb0>
 800376c:	425a      	negs	r2, r3
 800376e:	50e2      	str	r2, [r4, r3]
 8003770:	bd70      	pop	{r4, r5, r6, pc}
 8003772:	428c      	cmp	r4, r1
 8003774:	bf0b      	itete	eq
 8003776:	6863      	ldreq	r3, [r4, #4]
 8003778:	684b      	ldrne	r3, [r1, #4]
 800377a:	6013      	streq	r3, [r2, #0]
 800377c:	6063      	strne	r3, [r4, #4]
 800377e:	bf18      	it	ne
 8003780:	460c      	movne	r4, r1
 8003782:	e7e9      	b.n	8003758 <_malloc_r+0x64>
 8003784:	460c      	mov	r4, r1
 8003786:	6849      	ldr	r1, [r1, #4]
 8003788:	e7ca      	b.n	8003720 <_malloc_r+0x2c>
 800378a:	1cc4      	adds	r4, r0, #3
 800378c:	f024 0403 	bic.w	r4, r4, #3
 8003790:	42a0      	cmp	r0, r4
 8003792:	d005      	beq.n	80037a0 <_malloc_r+0xac>
 8003794:	1a21      	subs	r1, r4, r0
 8003796:	4630      	mov	r0, r6
 8003798:	f000 f830 	bl	80037fc <_sbrk_r>
 800379c:	3001      	adds	r0, #1
 800379e:	d0cd      	beq.n	800373c <_malloc_r+0x48>
 80037a0:	6025      	str	r5, [r4, #0]
 80037a2:	e7d9      	b.n	8003758 <_malloc_r+0x64>
 80037a4:	bd70      	pop	{r4, r5, r6, pc}
 80037a6:	bf00      	nop
 80037a8:	200000dc 	.word	0x200000dc
 80037ac:	200000e0 	.word	0x200000e0

080037b0 <_realloc_r>:
 80037b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037b2:	4607      	mov	r7, r0
 80037b4:	4614      	mov	r4, r2
 80037b6:	460e      	mov	r6, r1
 80037b8:	b921      	cbnz	r1, 80037c4 <_realloc_r+0x14>
 80037ba:	4611      	mov	r1, r2
 80037bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80037c0:	f7ff bf98 	b.w	80036f4 <_malloc_r>
 80037c4:	b922      	cbnz	r2, 80037d0 <_realloc_r+0x20>
 80037c6:	f7ff ff49 	bl	800365c <_free_r>
 80037ca:	4625      	mov	r5, r4
 80037cc:	4628      	mov	r0, r5
 80037ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037d0:	f000 f826 	bl	8003820 <_malloc_usable_size_r>
 80037d4:	4284      	cmp	r4, r0
 80037d6:	d90f      	bls.n	80037f8 <_realloc_r+0x48>
 80037d8:	4621      	mov	r1, r4
 80037da:	4638      	mov	r0, r7
 80037dc:	f7ff ff8a 	bl	80036f4 <_malloc_r>
 80037e0:	4605      	mov	r5, r0
 80037e2:	2800      	cmp	r0, #0
 80037e4:	d0f2      	beq.n	80037cc <_realloc_r+0x1c>
 80037e6:	4631      	mov	r1, r6
 80037e8:	4622      	mov	r2, r4
 80037ea:	f7ff ff11 	bl	8003610 <memcpy>
 80037ee:	4631      	mov	r1, r6
 80037f0:	4638      	mov	r0, r7
 80037f2:	f7ff ff33 	bl	800365c <_free_r>
 80037f6:	e7e9      	b.n	80037cc <_realloc_r+0x1c>
 80037f8:	4635      	mov	r5, r6
 80037fa:	e7e7      	b.n	80037cc <_realloc_r+0x1c>

080037fc <_sbrk_r>:
 80037fc:	b538      	push	{r3, r4, r5, lr}
 80037fe:	2300      	movs	r3, #0
 8003800:	4c05      	ldr	r4, [pc, #20]	; (8003818 <_sbrk_r+0x1c>)
 8003802:	4605      	mov	r5, r0
 8003804:	4608      	mov	r0, r1
 8003806:	6023      	str	r3, [r4, #0]
 8003808:	f7ff fb4e 	bl	8002ea8 <_sbrk>
 800380c:	1c43      	adds	r3, r0, #1
 800380e:	d102      	bne.n	8003816 <_sbrk_r+0x1a>
 8003810:	6823      	ldr	r3, [r4, #0]
 8003812:	b103      	cbz	r3, 8003816 <_sbrk_r+0x1a>
 8003814:	602b      	str	r3, [r5, #0]
 8003816:	bd38      	pop	{r3, r4, r5, pc}
 8003818:	200001e8 	.word	0x200001e8

0800381c <__malloc_lock>:
 800381c:	4770      	bx	lr

0800381e <__malloc_unlock>:
 800381e:	4770      	bx	lr

08003820 <_malloc_usable_size_r>:
 8003820:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8003824:	2800      	cmp	r0, #0
 8003826:	f1a0 0004 	sub.w	r0, r0, #4
 800382a:	bfbc      	itt	lt
 800382c:	580b      	ldrlt	r3, [r1, r0]
 800382e:	18c0      	addlt	r0, r0, r3
 8003830:	4770      	bx	lr
	...

08003834 <sqrt>:
 8003834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003838:	b08b      	sub	sp, #44	; 0x2c
 800383a:	4604      	mov	r4, r0
 800383c:	460d      	mov	r5, r1
 800383e:	f000 f84d 	bl	80038dc <__ieee754_sqrt>
 8003842:	4b24      	ldr	r3, [pc, #144]	; (80038d4 <sqrt+0xa0>)
 8003844:	4680      	mov	r8, r0
 8003846:	f993 a000 	ldrsb.w	sl, [r3]
 800384a:	4689      	mov	r9, r1
 800384c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8003850:	d02b      	beq.n	80038aa <sqrt+0x76>
 8003852:	4622      	mov	r2, r4
 8003854:	462b      	mov	r3, r5
 8003856:	4620      	mov	r0, r4
 8003858:	4629      	mov	r1, r5
 800385a:	f7fd f933 	bl	8000ac4 <__aeabi_dcmpun>
 800385e:	4683      	mov	fp, r0
 8003860:	bb18      	cbnz	r0, 80038aa <sqrt+0x76>
 8003862:	2600      	movs	r6, #0
 8003864:	2700      	movs	r7, #0
 8003866:	4632      	mov	r2, r6
 8003868:	463b      	mov	r3, r7
 800386a:	4620      	mov	r0, r4
 800386c:	4629      	mov	r1, r5
 800386e:	f7fd f901 	bl	8000a74 <__aeabi_dcmplt>
 8003872:	b1d0      	cbz	r0, 80038aa <sqrt+0x76>
 8003874:	2301      	movs	r3, #1
 8003876:	9300      	str	r3, [sp, #0]
 8003878:	4b17      	ldr	r3, [pc, #92]	; (80038d8 <sqrt+0xa4>)
 800387a:	f8cd b020 	str.w	fp, [sp, #32]
 800387e:	9301      	str	r3, [sp, #4]
 8003880:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8003884:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003888:	f1ba 0f00 	cmp.w	sl, #0
 800388c:	d112      	bne.n	80038b4 <sqrt+0x80>
 800388e:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8003892:	4668      	mov	r0, sp
 8003894:	f000 f8ce 	bl	8003a34 <matherr>
 8003898:	b1b8      	cbz	r0, 80038ca <sqrt+0x96>
 800389a:	9b08      	ldr	r3, [sp, #32]
 800389c:	b11b      	cbz	r3, 80038a6 <sqrt+0x72>
 800389e:	f7ff fb6b 	bl	8002f78 <__errno>
 80038a2:	9b08      	ldr	r3, [sp, #32]
 80038a4:	6003      	str	r3, [r0, #0]
 80038a6:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 80038aa:	4640      	mov	r0, r8
 80038ac:	4649      	mov	r1, r9
 80038ae:	b00b      	add	sp, #44	; 0x2c
 80038b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038b4:	4632      	mov	r2, r6
 80038b6:	463b      	mov	r3, r7
 80038b8:	4630      	mov	r0, r6
 80038ba:	4639      	mov	r1, r7
 80038bc:	f7fc ff92 	bl	80007e4 <__aeabi_ddiv>
 80038c0:	f1ba 0f02 	cmp.w	sl, #2
 80038c4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80038c8:	d1e3      	bne.n	8003892 <sqrt+0x5e>
 80038ca:	f7ff fb55 	bl	8002f78 <__errno>
 80038ce:	2321      	movs	r3, #33	; 0x21
 80038d0:	6003      	str	r3, [r0, #0]
 80038d2:	e7e2      	b.n	800389a <sqrt+0x66>
 80038d4:	200000a4 	.word	0x200000a4
 80038d8:	08003aef 	.word	0x08003aef

080038dc <__ieee754_sqrt>:
 80038dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038e0:	f8df e14c 	ldr.w	lr, [pc, #332]	; 8003a30 <__ieee754_sqrt+0x154>
 80038e4:	4606      	mov	r6, r0
 80038e6:	ea3e 0e01 	bics.w	lr, lr, r1
 80038ea:	460d      	mov	r5, r1
 80038ec:	4607      	mov	r7, r0
 80038ee:	460a      	mov	r2, r1
 80038f0:	460c      	mov	r4, r1
 80038f2:	4603      	mov	r3, r0
 80038f4:	d10f      	bne.n	8003916 <__ieee754_sqrt+0x3a>
 80038f6:	4602      	mov	r2, r0
 80038f8:	460b      	mov	r3, r1
 80038fa:	f7fc fe49 	bl	8000590 <__aeabi_dmul>
 80038fe:	4602      	mov	r2, r0
 8003900:	460b      	mov	r3, r1
 8003902:	4630      	mov	r0, r6
 8003904:	4629      	mov	r1, r5
 8003906:	f7fc fc91 	bl	800022c <__adddf3>
 800390a:	4606      	mov	r6, r0
 800390c:	460d      	mov	r5, r1
 800390e:	4630      	mov	r0, r6
 8003910:	4629      	mov	r1, r5
 8003912:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003916:	2900      	cmp	r1, #0
 8003918:	dc0e      	bgt.n	8003938 <__ieee754_sqrt+0x5c>
 800391a:	f021 4e00 	bic.w	lr, r1, #2147483648	; 0x80000000
 800391e:	ea5e 0707 	orrs.w	r7, lr, r7
 8003922:	d0f4      	beq.n	800390e <__ieee754_sqrt+0x32>
 8003924:	b141      	cbz	r1, 8003938 <__ieee754_sqrt+0x5c>
 8003926:	4602      	mov	r2, r0
 8003928:	460b      	mov	r3, r1
 800392a:	f7fc fc7d 	bl	8000228 <__aeabi_dsub>
 800392e:	4602      	mov	r2, r0
 8003930:	460b      	mov	r3, r1
 8003932:	f7fc ff57 	bl	80007e4 <__aeabi_ddiv>
 8003936:	e7e8      	b.n	800390a <__ieee754_sqrt+0x2e>
 8003938:	1512      	asrs	r2, r2, #20
 800393a:	d10c      	bne.n	8003956 <__ieee754_sqrt+0x7a>
 800393c:	2c00      	cmp	r4, #0
 800393e:	d06e      	beq.n	8003a1e <__ieee754_sqrt+0x142>
 8003940:	2100      	movs	r1, #0
 8003942:	02e6      	lsls	r6, r4, #11
 8003944:	d56f      	bpl.n	8003a26 <__ieee754_sqrt+0x14a>
 8003946:	1e48      	subs	r0, r1, #1
 8003948:	1a12      	subs	r2, r2, r0
 800394a:	f1c1 0020 	rsb	r0, r1, #32
 800394e:	fa23 f000 	lsr.w	r0, r3, r0
 8003952:	4304      	orrs	r4, r0
 8003954:	408b      	lsls	r3, r1
 8003956:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800395a:	07d5      	lsls	r5, r2, #31
 800395c:	f04f 0500 	mov.w	r5, #0
 8003960:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8003964:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8003968:	bf42      	ittt	mi
 800396a:	0064      	lslmi	r4, r4, #1
 800396c:	eb04 74d3 	addmi.w	r4, r4, r3, lsr #31
 8003970:	005b      	lslmi	r3, r3, #1
 8003972:	eb04 71d3 	add.w	r1, r4, r3, lsr #31
 8003976:	1050      	asrs	r0, r2, #1
 8003978:	4421      	add	r1, r4
 800397a:	2216      	movs	r2, #22
 800397c:	462c      	mov	r4, r5
 800397e:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8003982:	005b      	lsls	r3, r3, #1
 8003984:	19a7      	adds	r7, r4, r6
 8003986:	428f      	cmp	r7, r1
 8003988:	bfde      	ittt	le
 800398a:	1bc9      	suble	r1, r1, r7
 800398c:	19bc      	addle	r4, r7, r6
 800398e:	19ad      	addle	r5, r5, r6
 8003990:	0049      	lsls	r1, r1, #1
 8003992:	3a01      	subs	r2, #1
 8003994:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8003998:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800399c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80039a0:	d1f0      	bne.n	8003984 <__ieee754_sqrt+0xa8>
 80039a2:	f04f 0e20 	mov.w	lr, #32
 80039a6:	4694      	mov	ip, r2
 80039a8:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80039ac:	42a1      	cmp	r1, r4
 80039ae:	eb06 070c 	add.w	r7, r6, ip
 80039b2:	dc02      	bgt.n	80039ba <__ieee754_sqrt+0xde>
 80039b4:	d112      	bne.n	80039dc <__ieee754_sqrt+0x100>
 80039b6:	429f      	cmp	r7, r3
 80039b8:	d810      	bhi.n	80039dc <__ieee754_sqrt+0x100>
 80039ba:	2f00      	cmp	r7, #0
 80039bc:	eb07 0c06 	add.w	ip, r7, r6
 80039c0:	da34      	bge.n	8003a2c <__ieee754_sqrt+0x150>
 80039c2:	f1bc 0f00 	cmp.w	ip, #0
 80039c6:	db31      	blt.n	8003a2c <__ieee754_sqrt+0x150>
 80039c8:	f104 0801 	add.w	r8, r4, #1
 80039cc:	1b09      	subs	r1, r1, r4
 80039ce:	4644      	mov	r4, r8
 80039d0:	429f      	cmp	r7, r3
 80039d2:	bf88      	it	hi
 80039d4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80039d8:	1bdb      	subs	r3, r3, r7
 80039da:	4432      	add	r2, r6
 80039dc:	eb01 77d3 	add.w	r7, r1, r3, lsr #31
 80039e0:	f1be 0e01 	subs.w	lr, lr, #1
 80039e4:	4439      	add	r1, r7
 80039e6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80039ea:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80039ee:	d1dd      	bne.n	80039ac <__ieee754_sqrt+0xd0>
 80039f0:	430b      	orrs	r3, r1
 80039f2:	d006      	beq.n	8003a02 <__ieee754_sqrt+0x126>
 80039f4:	1c54      	adds	r4, r2, #1
 80039f6:	bf0b      	itete	eq
 80039f8:	4672      	moveq	r2, lr
 80039fa:	3201      	addne	r2, #1
 80039fc:	3501      	addeq	r5, #1
 80039fe:	f022 0201 	bicne.w	r2, r2, #1
 8003a02:	106b      	asrs	r3, r5, #1
 8003a04:	0852      	lsrs	r2, r2, #1
 8003a06:	07e9      	lsls	r1, r5, #31
 8003a08:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8003a0c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8003a10:	bf48      	it	mi
 8003a12:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8003a16:	eb03 5500 	add.w	r5, r3, r0, lsl #20
 8003a1a:	4616      	mov	r6, r2
 8003a1c:	e777      	b.n	800390e <__ieee754_sqrt+0x32>
 8003a1e:	0adc      	lsrs	r4, r3, #11
 8003a20:	3a15      	subs	r2, #21
 8003a22:	055b      	lsls	r3, r3, #21
 8003a24:	e78a      	b.n	800393c <__ieee754_sqrt+0x60>
 8003a26:	0064      	lsls	r4, r4, #1
 8003a28:	3101      	adds	r1, #1
 8003a2a:	e78a      	b.n	8003942 <__ieee754_sqrt+0x66>
 8003a2c:	46a0      	mov	r8, r4
 8003a2e:	e7cd      	b.n	80039cc <__ieee754_sqrt+0xf0>
 8003a30:	7ff00000 	.word	0x7ff00000

08003a34 <matherr>:
 8003a34:	2000      	movs	r0, #0
 8003a36:	4770      	bx	lr

08003a38 <_init>:
 8003a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a3a:	bf00      	nop
 8003a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a3e:	bc08      	pop	{r3}
 8003a40:	469e      	mov	lr, r3
 8003a42:	4770      	bx	lr

08003a44 <_fini>:
 8003a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a46:	bf00      	nop
 8003a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a4a:	bc08      	pop	{r3}
 8003a4c:	469e      	mov	lr, r3
 8003a4e:	4770      	bx	lr
