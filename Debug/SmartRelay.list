
SmartRelay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001dcc  080001d0  080001d0  000101d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08001f9c  08001f9c  00011f9c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800202c  0800202c  0001202c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002030  08002030  00012030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000080  20000000  08002034  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000cc  20000080  080020b4  00020080  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000014c  080020b4  0002014c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000bc3a  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001f2a  00000000  00000000  0002bce3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000055f1  00000000  00000000  0002dc0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000888  00000000  00000000  00033200  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000ac8  00000000  00000000  00033a88  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003ff6  00000000  00000000  00034550  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000328f  00000000  00000000  00038546  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003b7d5  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001bc8  00000000  00000000  0003b854  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000080 	.word	0x20000080
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08001f84 	.word	0x08001f84

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000084 	.word	0x20000084
 800020c:	08001f84 	.word	0x08001f84

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000220:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000222:	4b0e      	ldr	r3, [pc, #56]	; (800025c <HAL_InitTick+0x3c>)
{
 8000224:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000226:	7818      	ldrb	r0, [r3, #0]
 8000228:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800022c:	fbb3 f3f0 	udiv	r3, r3, r0
 8000230:	4a0b      	ldr	r2, [pc, #44]	; (8000260 <HAL_InitTick+0x40>)
 8000232:	6810      	ldr	r0, [r2, #0]
 8000234:	fbb0 f0f3 	udiv	r0, r0, r3
 8000238:	f000 f89a 	bl	8000370 <HAL_SYSTICK_Config>
 800023c:	4604      	mov	r4, r0
 800023e:	b958      	cbnz	r0, 8000258 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000240:	2d0f      	cmp	r5, #15
 8000242:	d809      	bhi.n	8000258 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000244:	4602      	mov	r2, r0
 8000246:	4629      	mov	r1, r5
 8000248:	f04f 30ff 	mov.w	r0, #4294967295
 800024c:	f000 f84e 	bl	80002ec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000250:	4b04      	ldr	r3, [pc, #16]	; (8000264 <HAL_InitTick+0x44>)
 8000252:	4620      	mov	r0, r4
 8000254:	601d      	str	r5, [r3, #0]
 8000256:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000258:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800025a:	bd38      	pop	{r3, r4, r5, pc}
 800025c:	20000000 	.word	0x20000000
 8000260:	20000018 	.word	0x20000018
 8000264:	20000004 	.word	0x20000004

08000268 <HAL_Init>:
{
 8000268:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800026a:	2003      	movs	r0, #3
 800026c:	f000 f82c 	bl	80002c8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000270:	2000      	movs	r0, #0
 8000272:	f7ff ffd5 	bl	8000220 <HAL_InitTick>
  HAL_MspInit();
 8000276:	f001 f8b1 	bl	80013dc <HAL_MspInit>
}
 800027a:	2000      	movs	r0, #0
 800027c:	bd08      	pop	{r3, pc}
	...

08000280 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000280:	4a03      	ldr	r2, [pc, #12]	; (8000290 <HAL_IncTick+0x10>)
 8000282:	4b04      	ldr	r3, [pc, #16]	; (8000294 <HAL_IncTick+0x14>)
 8000284:	6811      	ldr	r1, [r2, #0]
 8000286:	781b      	ldrb	r3, [r3, #0]
 8000288:	440b      	add	r3, r1
 800028a:	6013      	str	r3, [r2, #0]
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop
 8000290:	200000cc 	.word	0x200000cc
 8000294:	20000000 	.word	0x20000000

08000298 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000298:	4b01      	ldr	r3, [pc, #4]	; (80002a0 <HAL_GetTick+0x8>)
 800029a:	6818      	ldr	r0, [r3, #0]
}
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop
 80002a0:	200000cc 	.word	0x200000cc

080002a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002a4:	b538      	push	{r3, r4, r5, lr}
 80002a6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80002a8:	f7ff fff6 	bl	8000298 <HAL_GetTick>
 80002ac:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002ae:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80002b0:	bf1e      	ittt	ne
 80002b2:	4b04      	ldrne	r3, [pc, #16]	; (80002c4 <HAL_Delay+0x20>)
 80002b4:	781b      	ldrbne	r3, [r3, #0]
 80002b6:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80002b8:	f7ff ffee 	bl	8000298 <HAL_GetTick>
 80002bc:	1b40      	subs	r0, r0, r5
 80002be:	4284      	cmp	r4, r0
 80002c0:	d8fa      	bhi.n	80002b8 <HAL_Delay+0x14>
  {
  }
}
 80002c2:	bd38      	pop	{r3, r4, r5, pc}
 80002c4:	20000000 	.word	0x20000000

080002c8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002c8:	4a07      	ldr	r2, [pc, #28]	; (80002e8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80002ca:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002cc:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80002ce:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002d2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80002d6:	041b      	lsls	r3, r3, #16
 80002d8:	0c1b      	lsrs	r3, r3, #16
 80002da:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80002de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80002e2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80002e4:	60d3      	str	r3, [r2, #12]
 80002e6:	4770      	bx	lr
 80002e8:	e000ed00 	.word	0xe000ed00

080002ec <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002ec:	4b17      	ldr	r3, [pc, #92]	; (800034c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80002ee:	b530      	push	{r4, r5, lr}
 80002f0:	68dc      	ldr	r4, [r3, #12]
 80002f2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002f6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002fa:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002fc:	2b04      	cmp	r3, #4
 80002fe:	bf28      	it	cs
 8000300:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000302:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000304:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000308:	bf98      	it	ls
 800030a:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800030c:	fa05 f303 	lsl.w	r3, r5, r3
 8000310:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000314:	bf88      	it	hi
 8000316:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000318:	4019      	ands	r1, r3
 800031a:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800031c:	fa05 f404 	lsl.w	r4, r5, r4
 8000320:	3c01      	subs	r4, #1
 8000322:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000324:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000326:	ea42 0201 	orr.w	r2, r2, r1
 800032a:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800032e:	bfa9      	itett	ge
 8000330:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000334:	4b06      	ldrlt	r3, [pc, #24]	; (8000350 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000336:	b2d2      	uxtbge	r2, r2
 8000338:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800033c:	bfbb      	ittet	lt
 800033e:	f000 000f 	andlt.w	r0, r0, #15
 8000342:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000344:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000348:	541a      	strblt	r2, [r3, r0]
 800034a:	bd30      	pop	{r4, r5, pc}
 800034c:	e000ed00 	.word	0xe000ed00
 8000350:	e000ed14 	.word	0xe000ed14

08000354 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000354:	2800      	cmp	r0, #0
 8000356:	db08      	blt.n	800036a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000358:	2301      	movs	r3, #1
 800035a:	0942      	lsrs	r2, r0, #5
 800035c:	f000 001f 	and.w	r0, r0, #31
 8000360:	fa03 f000 	lsl.w	r0, r3, r0
 8000364:	4b01      	ldr	r3, [pc, #4]	; (800036c <HAL_NVIC_EnableIRQ+0x18>)
 8000366:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800036a:	4770      	bx	lr
 800036c:	e000e100 	.word	0xe000e100

08000370 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000370:	3801      	subs	r0, #1
 8000372:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000376:	d20a      	bcs.n	800038e <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000378:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800037a:	4b06      	ldr	r3, [pc, #24]	; (8000394 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800037c:	4a06      	ldr	r2, [pc, #24]	; (8000398 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800037e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000380:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000384:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000386:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000388:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800038a:	601a      	str	r2, [r3, #0]
 800038c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800038e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000390:	4770      	bx	lr
 8000392:	bf00      	nop
 8000394:	e000e010 	.word	0xe000e010
 8000398:	e000ed00 	.word	0xe000ed00

0800039c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800039c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80003a0:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 80003a2:	4626      	mov	r6, r4
 80003a4:	4b66      	ldr	r3, [pc, #408]	; (8000540 <HAL_GPIO_Init+0x1a4>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80003a6:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 8000550 <HAL_GPIO_Init+0x1b4>
 80003aa:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 8000554 <HAL_GPIO_Init+0x1b8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80003ae:	680a      	ldr	r2, [r1, #0]
 80003b0:	fa32 f506 	lsrs.w	r5, r2, r6
 80003b4:	d102      	bne.n	80003bc <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 80003b6:	b003      	add	sp, #12
 80003b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 80003bc:	f04f 0801 	mov.w	r8, #1
 80003c0:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80003c4:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 80003c8:	4590      	cmp	r8, r2
 80003ca:	d17f      	bne.n	80004cc <HAL_GPIO_Init+0x130>
      switch (GPIO_Init->Mode)
 80003cc:	684d      	ldr	r5, [r1, #4]
 80003ce:	2d12      	cmp	r5, #18
 80003d0:	f000 80aa 	beq.w	8000528 <HAL_GPIO_Init+0x18c>
 80003d4:	f200 8083 	bhi.w	80004de <HAL_GPIO_Init+0x142>
 80003d8:	2d02      	cmp	r5, #2
 80003da:	f000 80a2 	beq.w	8000522 <HAL_GPIO_Init+0x186>
 80003de:	d877      	bhi.n	80004d0 <HAL_GPIO_Init+0x134>
 80003e0:	2d00      	cmp	r5, #0
 80003e2:	f000 8089 	beq.w	80004f8 <HAL_GPIO_Init+0x15c>
 80003e6:	2d01      	cmp	r5, #1
 80003e8:	f000 8099 	beq.w	800051e <HAL_GPIO_Init+0x182>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80003ec:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80003f0:	2aff      	cmp	r2, #255	; 0xff
 80003f2:	bf93      	iteet	ls
 80003f4:	4682      	movls	sl, r0
 80003f6:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80003fa:	3d08      	subhi	r5, #8
 80003fc:	f8d0 b000 	ldrls.w	fp, [r0]
 8000400:	bf92      	itee	ls
 8000402:	00b5      	lslls	r5, r6, #2
 8000404:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000408:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800040a:	fa09 f805 	lsl.w	r8, r9, r5
 800040e:	ea2b 0808 	bic.w	r8, fp, r8
 8000412:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000416:	bf88      	it	hi
 8000418:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800041c:	ea48 0505 	orr.w	r5, r8, r5
 8000420:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000424:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000428:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 800042c:	d04e      	beq.n	80004cc <HAL_GPIO_Init+0x130>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800042e:	4d45      	ldr	r5, [pc, #276]	; (8000544 <HAL_GPIO_Init+0x1a8>)
 8000430:	4f44      	ldr	r7, [pc, #272]	; (8000544 <HAL_GPIO_Init+0x1a8>)
 8000432:	69ad      	ldr	r5, [r5, #24]
 8000434:	f026 0803 	bic.w	r8, r6, #3
 8000438:	f045 0501 	orr.w	r5, r5, #1
 800043c:	61bd      	str	r5, [r7, #24]
 800043e:	69bd      	ldr	r5, [r7, #24]
 8000440:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000444:	f005 0501 	and.w	r5, r5, #1
 8000448:	9501      	str	r5, [sp, #4]
 800044a:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800044e:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000452:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000454:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8000458:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800045c:	fa09 f90b 	lsl.w	r9, r9, fp
 8000460:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000464:	4d38      	ldr	r5, [pc, #224]	; (8000548 <HAL_GPIO_Init+0x1ac>)
 8000466:	42a8      	cmp	r0, r5
 8000468:	d063      	beq.n	8000532 <HAL_GPIO_Init+0x196>
 800046a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800046e:	42a8      	cmp	r0, r5
 8000470:	d061      	beq.n	8000536 <HAL_GPIO_Init+0x19a>
 8000472:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000476:	42a8      	cmp	r0, r5
 8000478:	d05f      	beq.n	800053a <HAL_GPIO_Init+0x19e>
 800047a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800047e:	42a8      	cmp	r0, r5
 8000480:	bf0c      	ite	eq
 8000482:	2503      	moveq	r5, #3
 8000484:	2504      	movne	r5, #4
 8000486:	fa05 f50b 	lsl.w	r5, r5, fp
 800048a:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 800048e:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8000492:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000494:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000498:	bf14      	ite	ne
 800049a:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800049c:	4395      	biceq	r5, r2
 800049e:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80004a0:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80004a2:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80004a6:	bf14      	ite	ne
 80004a8:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80004aa:	4395      	biceq	r5, r2
 80004ac:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 80004ae:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80004b0:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80004b4:	bf14      	ite	ne
 80004b6:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80004b8:	4395      	biceq	r5, r2
 80004ba:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 80004bc:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80004be:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80004c2:	bf14      	ite	ne
 80004c4:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80004c6:	ea25 0202 	biceq.w	r2, r5, r2
 80004ca:	60da      	str	r2, [r3, #12]
	position++;
 80004cc:	3601      	adds	r6, #1
 80004ce:	e76e      	b.n	80003ae <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 80004d0:	2d03      	cmp	r5, #3
 80004d2:	d022      	beq.n	800051a <HAL_GPIO_Init+0x17e>
 80004d4:	2d11      	cmp	r5, #17
 80004d6:	d189      	bne.n	80003ec <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80004d8:	68cc      	ldr	r4, [r1, #12]
 80004da:	3404      	adds	r4, #4
          break;
 80004dc:	e786      	b.n	80003ec <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 80004de:	4f1b      	ldr	r7, [pc, #108]	; (800054c <HAL_GPIO_Init+0x1b0>)
 80004e0:	42bd      	cmp	r5, r7
 80004e2:	d009      	beq.n	80004f8 <HAL_GPIO_Init+0x15c>
 80004e4:	d812      	bhi.n	800050c <HAL_GPIO_Init+0x170>
 80004e6:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8000558 <HAL_GPIO_Init+0x1bc>
 80004ea:	454d      	cmp	r5, r9
 80004ec:	d004      	beq.n	80004f8 <HAL_GPIO_Init+0x15c>
 80004ee:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80004f2:	454d      	cmp	r5, r9
 80004f4:	f47f af7a 	bne.w	80003ec <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80004f8:	688c      	ldr	r4, [r1, #8]
 80004fa:	b1c4      	cbz	r4, 800052e <HAL_GPIO_Init+0x192>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80004fc:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 80004fe:	bf0c      	ite	eq
 8000500:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000504:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000508:	2408      	movs	r4, #8
 800050a:	e76f      	b.n	80003ec <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 800050c:	4575      	cmp	r5, lr
 800050e:	d0f3      	beq.n	80004f8 <HAL_GPIO_Init+0x15c>
 8000510:	4565      	cmp	r5, ip
 8000512:	d0f1      	beq.n	80004f8 <HAL_GPIO_Init+0x15c>
 8000514:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800055c <HAL_GPIO_Init+0x1c0>
 8000518:	e7eb      	b.n	80004f2 <HAL_GPIO_Init+0x156>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800051a:	2400      	movs	r4, #0
 800051c:	e766      	b.n	80003ec <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800051e:	68cc      	ldr	r4, [r1, #12]
          break;
 8000520:	e764      	b.n	80003ec <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000522:	68cc      	ldr	r4, [r1, #12]
 8000524:	3408      	adds	r4, #8
          break;
 8000526:	e761      	b.n	80003ec <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000528:	68cc      	ldr	r4, [r1, #12]
 800052a:	340c      	adds	r4, #12
          break;
 800052c:	e75e      	b.n	80003ec <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800052e:	2404      	movs	r4, #4
 8000530:	e75c      	b.n	80003ec <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000532:	2500      	movs	r5, #0
 8000534:	e7a7      	b.n	8000486 <HAL_GPIO_Init+0xea>
 8000536:	2501      	movs	r5, #1
 8000538:	e7a5      	b.n	8000486 <HAL_GPIO_Init+0xea>
 800053a:	2502      	movs	r5, #2
 800053c:	e7a3      	b.n	8000486 <HAL_GPIO_Init+0xea>
 800053e:	bf00      	nop
 8000540:	40010400 	.word	0x40010400
 8000544:	40021000 	.word	0x40021000
 8000548:	40010800 	.word	0x40010800
 800054c:	10210000 	.word	0x10210000
 8000550:	10310000 	.word	0x10310000
 8000554:	10320000 	.word	0x10320000
 8000558:	10110000 	.word	0x10110000
 800055c:	10220000 	.word	0x10220000

08000560 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000560:	6883      	ldr	r3, [r0, #8]
 8000562:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000564:	bf14      	ite	ne
 8000566:	2001      	movne	r0, #1
 8000568:	2000      	moveq	r0, #0
 800056a:	4770      	bx	lr

0800056c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800056c:	b10a      	cbz	r2, 8000572 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800056e:	6101      	str	r1, [r0, #16]
 8000570:	4770      	bx	lr
 8000572:	0409      	lsls	r1, r1, #16
 8000574:	e7fb      	b.n	800056e <HAL_GPIO_WritePin+0x2>

08000576 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8000576:	68c3      	ldr	r3, [r0, #12]
 8000578:	420b      	tst	r3, r1
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800057a:	bf14      	ite	ne
 800057c:	6141      	strne	r1, [r0, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800057e:	6101      	streq	r1, [r0, #16]
 8000580:	4770      	bx	lr

08000582 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000582:	4770      	bx	lr

08000584 <HAL_GPIO_EXTI_IRQHandler>:
{
 8000584:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000586:	4b04      	ldr	r3, [pc, #16]	; (8000598 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000588:	6959      	ldr	r1, [r3, #20]
 800058a:	4201      	tst	r1, r0
 800058c:	d002      	beq.n	8000594 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800058e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000590:	f7ff fff7 	bl	8000582 <HAL_GPIO_EXTI_Callback>
 8000594:	bd08      	pop	{r3, pc}
 8000596:	bf00      	nop
 8000598:	40010400 	.word	0x40010400

0800059c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800059c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80005a0:	4605      	mov	r5, r0
 80005a2:	b908      	cbnz	r0, 80005a8 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 80005a4:	2001      	movs	r0, #1
 80005a6:	e03c      	b.n	8000622 <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80005a8:	6803      	ldr	r3, [r0, #0]
 80005aa:	07db      	lsls	r3, r3, #31
 80005ac:	d410      	bmi.n	80005d0 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80005ae:	682b      	ldr	r3, [r5, #0]
 80005b0:	079f      	lsls	r7, r3, #30
 80005b2:	d45d      	bmi.n	8000670 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80005b4:	682b      	ldr	r3, [r5, #0]
 80005b6:	0719      	lsls	r1, r3, #28
 80005b8:	f100 8094 	bmi.w	80006e4 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80005bc:	682b      	ldr	r3, [r5, #0]
 80005be:	075a      	lsls	r2, r3, #29
 80005c0:	f100 80be 	bmi.w	8000740 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80005c4:	69e8      	ldr	r0, [r5, #28]
 80005c6:	2800      	cmp	r0, #0
 80005c8:	f040 812c 	bne.w	8000824 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 80005cc:	2000      	movs	r0, #0
 80005ce:	e028      	b.n	8000622 <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80005d0:	4c8f      	ldr	r4, [pc, #572]	; (8000810 <HAL_RCC_OscConfig+0x274>)
 80005d2:	6863      	ldr	r3, [r4, #4]
 80005d4:	f003 030c 	and.w	r3, r3, #12
 80005d8:	2b04      	cmp	r3, #4
 80005da:	d007      	beq.n	80005ec <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80005dc:	6863      	ldr	r3, [r4, #4]
 80005de:	f003 030c 	and.w	r3, r3, #12
 80005e2:	2b08      	cmp	r3, #8
 80005e4:	d109      	bne.n	80005fa <HAL_RCC_OscConfig+0x5e>
 80005e6:	6863      	ldr	r3, [r4, #4]
 80005e8:	03de      	lsls	r6, r3, #15
 80005ea:	d506      	bpl.n	80005fa <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80005ec:	6823      	ldr	r3, [r4, #0]
 80005ee:	039c      	lsls	r4, r3, #14
 80005f0:	d5dd      	bpl.n	80005ae <HAL_RCC_OscConfig+0x12>
 80005f2:	686b      	ldr	r3, [r5, #4]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d1da      	bne.n	80005ae <HAL_RCC_OscConfig+0x12>
 80005f8:	e7d4      	b.n	80005a4 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005fa:	686b      	ldr	r3, [r5, #4]
 80005fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000600:	d112      	bne.n	8000628 <HAL_RCC_OscConfig+0x8c>
 8000602:	6823      	ldr	r3, [r4, #0]
 8000604:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000608:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800060a:	f7ff fe45 	bl	8000298 <HAL_GetTick>
 800060e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000610:	6823      	ldr	r3, [r4, #0]
 8000612:	0398      	lsls	r0, r3, #14
 8000614:	d4cb      	bmi.n	80005ae <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000616:	f7ff fe3f 	bl	8000298 <HAL_GetTick>
 800061a:	1b80      	subs	r0, r0, r6
 800061c:	2864      	cmp	r0, #100	; 0x64
 800061e:	d9f7      	bls.n	8000610 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000620:	2003      	movs	r0, #3
}
 8000622:	b002      	add	sp, #8
 8000624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000628:	b99b      	cbnz	r3, 8000652 <HAL_RCC_OscConfig+0xb6>
 800062a:	6823      	ldr	r3, [r4, #0]
 800062c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000630:	6023      	str	r3, [r4, #0]
 8000632:	6823      	ldr	r3, [r4, #0]
 8000634:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000638:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800063a:	f7ff fe2d 	bl	8000298 <HAL_GetTick>
 800063e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000640:	6823      	ldr	r3, [r4, #0]
 8000642:	0399      	lsls	r1, r3, #14
 8000644:	d5b3      	bpl.n	80005ae <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000646:	f7ff fe27 	bl	8000298 <HAL_GetTick>
 800064a:	1b80      	subs	r0, r0, r6
 800064c:	2864      	cmp	r0, #100	; 0x64
 800064e:	d9f7      	bls.n	8000640 <HAL_RCC_OscConfig+0xa4>
 8000650:	e7e6      	b.n	8000620 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000652:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000656:	6823      	ldr	r3, [r4, #0]
 8000658:	d103      	bne.n	8000662 <HAL_RCC_OscConfig+0xc6>
 800065a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800065e:	6023      	str	r3, [r4, #0]
 8000660:	e7cf      	b.n	8000602 <HAL_RCC_OscConfig+0x66>
 8000662:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000666:	6023      	str	r3, [r4, #0]
 8000668:	6823      	ldr	r3, [r4, #0]
 800066a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800066e:	e7cb      	b.n	8000608 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000670:	4c67      	ldr	r4, [pc, #412]	; (8000810 <HAL_RCC_OscConfig+0x274>)
 8000672:	6863      	ldr	r3, [r4, #4]
 8000674:	f013 0f0c 	tst.w	r3, #12
 8000678:	d007      	beq.n	800068a <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800067a:	6863      	ldr	r3, [r4, #4]
 800067c:	f003 030c 	and.w	r3, r3, #12
 8000680:	2b08      	cmp	r3, #8
 8000682:	d110      	bne.n	80006a6 <HAL_RCC_OscConfig+0x10a>
 8000684:	6863      	ldr	r3, [r4, #4]
 8000686:	03da      	lsls	r2, r3, #15
 8000688:	d40d      	bmi.n	80006a6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800068a:	6823      	ldr	r3, [r4, #0]
 800068c:	079b      	lsls	r3, r3, #30
 800068e:	d502      	bpl.n	8000696 <HAL_RCC_OscConfig+0xfa>
 8000690:	692b      	ldr	r3, [r5, #16]
 8000692:	2b01      	cmp	r3, #1
 8000694:	d186      	bne.n	80005a4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000696:	6823      	ldr	r3, [r4, #0]
 8000698:	696a      	ldr	r2, [r5, #20]
 800069a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800069e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80006a2:	6023      	str	r3, [r4, #0]
 80006a4:	e786      	b.n	80005b4 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80006a6:	692a      	ldr	r2, [r5, #16]
 80006a8:	4b5a      	ldr	r3, [pc, #360]	; (8000814 <HAL_RCC_OscConfig+0x278>)
 80006aa:	b16a      	cbz	r2, 80006c8 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 80006ac:	2201      	movs	r2, #1
 80006ae:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80006b0:	f7ff fdf2 	bl	8000298 <HAL_GetTick>
 80006b4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80006b6:	6823      	ldr	r3, [r4, #0]
 80006b8:	079f      	lsls	r7, r3, #30
 80006ba:	d4ec      	bmi.n	8000696 <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80006bc:	f7ff fdec 	bl	8000298 <HAL_GetTick>
 80006c0:	1b80      	subs	r0, r0, r6
 80006c2:	2802      	cmp	r0, #2
 80006c4:	d9f7      	bls.n	80006b6 <HAL_RCC_OscConfig+0x11a>
 80006c6:	e7ab      	b.n	8000620 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80006c8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80006ca:	f7ff fde5 	bl	8000298 <HAL_GetTick>
 80006ce:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80006d0:	6823      	ldr	r3, [r4, #0]
 80006d2:	0798      	lsls	r0, r3, #30
 80006d4:	f57f af6e 	bpl.w	80005b4 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80006d8:	f7ff fdde 	bl	8000298 <HAL_GetTick>
 80006dc:	1b80      	subs	r0, r0, r6
 80006de:	2802      	cmp	r0, #2
 80006e0:	d9f6      	bls.n	80006d0 <HAL_RCC_OscConfig+0x134>
 80006e2:	e79d      	b.n	8000620 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80006e4:	69aa      	ldr	r2, [r5, #24]
 80006e6:	4c4a      	ldr	r4, [pc, #296]	; (8000810 <HAL_RCC_OscConfig+0x274>)
 80006e8:	4b4b      	ldr	r3, [pc, #300]	; (8000818 <HAL_RCC_OscConfig+0x27c>)
 80006ea:	b1da      	cbz	r2, 8000724 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 80006ec:	2201      	movs	r2, #1
 80006ee:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80006f0:	f7ff fdd2 	bl	8000298 <HAL_GetTick>
 80006f4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80006f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80006f8:	079b      	lsls	r3, r3, #30
 80006fa:	d50d      	bpl.n	8000718 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80006fc:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000700:	4b46      	ldr	r3, [pc, #280]	; (800081c <HAL_RCC_OscConfig+0x280>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	fbb3 f3f2 	udiv	r3, r3, r2
 8000708:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800070a:	bf00      	nop
  }
  while (Delay --);
 800070c:	9b01      	ldr	r3, [sp, #4]
 800070e:	1e5a      	subs	r2, r3, #1
 8000710:	9201      	str	r2, [sp, #4]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d1f9      	bne.n	800070a <HAL_RCC_OscConfig+0x16e>
 8000716:	e751      	b.n	80005bc <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000718:	f7ff fdbe 	bl	8000298 <HAL_GetTick>
 800071c:	1b80      	subs	r0, r0, r6
 800071e:	2802      	cmp	r0, #2
 8000720:	d9e9      	bls.n	80006f6 <HAL_RCC_OscConfig+0x15a>
 8000722:	e77d      	b.n	8000620 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000724:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000726:	f7ff fdb7 	bl	8000298 <HAL_GetTick>
 800072a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800072c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800072e:	079f      	lsls	r7, r3, #30
 8000730:	f57f af44 	bpl.w	80005bc <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000734:	f7ff fdb0 	bl	8000298 <HAL_GetTick>
 8000738:	1b80      	subs	r0, r0, r6
 800073a:	2802      	cmp	r0, #2
 800073c:	d9f6      	bls.n	800072c <HAL_RCC_OscConfig+0x190>
 800073e:	e76f      	b.n	8000620 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000740:	4c33      	ldr	r4, [pc, #204]	; (8000810 <HAL_RCC_OscConfig+0x274>)
 8000742:	69e3      	ldr	r3, [r4, #28]
 8000744:	00d8      	lsls	r0, r3, #3
 8000746:	d424      	bmi.n	8000792 <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8000748:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800074a:	69e3      	ldr	r3, [r4, #28]
 800074c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000750:	61e3      	str	r3, [r4, #28]
 8000752:	69e3      	ldr	r3, [r4, #28]
 8000754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000758:	9300      	str	r3, [sp, #0]
 800075a:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800075c:	4e30      	ldr	r6, [pc, #192]	; (8000820 <HAL_RCC_OscConfig+0x284>)
 800075e:	6833      	ldr	r3, [r6, #0]
 8000760:	05d9      	lsls	r1, r3, #23
 8000762:	d518      	bpl.n	8000796 <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000764:	68eb      	ldr	r3, [r5, #12]
 8000766:	2b01      	cmp	r3, #1
 8000768:	d126      	bne.n	80007b8 <HAL_RCC_OscConfig+0x21c>
 800076a:	6a23      	ldr	r3, [r4, #32]
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000772:	f7ff fd91 	bl	8000298 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000776:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800077a:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800077c:	6a23      	ldr	r3, [r4, #32]
 800077e:	079b      	lsls	r3, r3, #30
 8000780:	d53f      	bpl.n	8000802 <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 8000782:	2f00      	cmp	r7, #0
 8000784:	f43f af1e 	beq.w	80005c4 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000788:	69e3      	ldr	r3, [r4, #28]
 800078a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800078e:	61e3      	str	r3, [r4, #28]
 8000790:	e718      	b.n	80005c4 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8000792:	2700      	movs	r7, #0
 8000794:	e7e2      	b.n	800075c <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000796:	6833      	ldr	r3, [r6, #0]
 8000798:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800079c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800079e:	f7ff fd7b 	bl	8000298 <HAL_GetTick>
 80007a2:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80007a4:	6833      	ldr	r3, [r6, #0]
 80007a6:	05da      	lsls	r2, r3, #23
 80007a8:	d4dc      	bmi.n	8000764 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80007aa:	f7ff fd75 	bl	8000298 <HAL_GetTick>
 80007ae:	eba0 0008 	sub.w	r0, r0, r8
 80007b2:	2864      	cmp	r0, #100	; 0x64
 80007b4:	d9f6      	bls.n	80007a4 <HAL_RCC_OscConfig+0x208>
 80007b6:	e733      	b.n	8000620 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007b8:	b9ab      	cbnz	r3, 80007e6 <HAL_RCC_OscConfig+0x24a>
 80007ba:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80007bc:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007c0:	f023 0301 	bic.w	r3, r3, #1
 80007c4:	6223      	str	r3, [r4, #32]
 80007c6:	6a23      	ldr	r3, [r4, #32]
 80007c8:	f023 0304 	bic.w	r3, r3, #4
 80007cc:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80007ce:	f7ff fd63 	bl	8000298 <HAL_GetTick>
 80007d2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80007d4:	6a23      	ldr	r3, [r4, #32]
 80007d6:	0798      	lsls	r0, r3, #30
 80007d8:	d5d3      	bpl.n	8000782 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80007da:	f7ff fd5d 	bl	8000298 <HAL_GetTick>
 80007de:	1b80      	subs	r0, r0, r6
 80007e0:	4540      	cmp	r0, r8
 80007e2:	d9f7      	bls.n	80007d4 <HAL_RCC_OscConfig+0x238>
 80007e4:	e71c      	b.n	8000620 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007e6:	2b05      	cmp	r3, #5
 80007e8:	6a23      	ldr	r3, [r4, #32]
 80007ea:	d103      	bne.n	80007f4 <HAL_RCC_OscConfig+0x258>
 80007ec:	f043 0304 	orr.w	r3, r3, #4
 80007f0:	6223      	str	r3, [r4, #32]
 80007f2:	e7ba      	b.n	800076a <HAL_RCC_OscConfig+0x1ce>
 80007f4:	f023 0301 	bic.w	r3, r3, #1
 80007f8:	6223      	str	r3, [r4, #32]
 80007fa:	6a23      	ldr	r3, [r4, #32]
 80007fc:	f023 0304 	bic.w	r3, r3, #4
 8000800:	e7b6      	b.n	8000770 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000802:	f7ff fd49 	bl	8000298 <HAL_GetTick>
 8000806:	eba0 0008 	sub.w	r0, r0, r8
 800080a:	42b0      	cmp	r0, r6
 800080c:	d9b6      	bls.n	800077c <HAL_RCC_OscConfig+0x1e0>
 800080e:	e707      	b.n	8000620 <HAL_RCC_OscConfig+0x84>
 8000810:	40021000 	.word	0x40021000
 8000814:	42420000 	.word	0x42420000
 8000818:	42420480 	.word	0x42420480
 800081c:	20000018 	.word	0x20000018
 8000820:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000824:	4b2a      	ldr	r3, [pc, #168]	; (80008d0 <HAL_RCC_OscConfig+0x334>)
 8000826:	685a      	ldr	r2, [r3, #4]
 8000828:	461c      	mov	r4, r3
 800082a:	f002 020c 	and.w	r2, r2, #12
 800082e:	2a08      	cmp	r2, #8
 8000830:	d03d      	beq.n	80008ae <HAL_RCC_OscConfig+0x312>
 8000832:	2300      	movs	r3, #0
 8000834:	4e27      	ldr	r6, [pc, #156]	; (80008d4 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000836:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000838:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800083a:	d12b      	bne.n	8000894 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 800083c:	f7ff fd2c 	bl	8000298 <HAL_GetTick>
 8000840:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000842:	6823      	ldr	r3, [r4, #0]
 8000844:	0199      	lsls	r1, r3, #6
 8000846:	d41f      	bmi.n	8000888 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000848:	6a2b      	ldr	r3, [r5, #32]
 800084a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800084e:	d105      	bne.n	800085c <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000850:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000852:	68a9      	ldr	r1, [r5, #8]
 8000854:	f022 020f 	bic.w	r2, r2, #15
 8000858:	430a      	orrs	r2, r1
 800085a:	62e2      	str	r2, [r4, #44]	; 0x2c
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800085c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800085e:	6862      	ldr	r2, [r4, #4]
 8000860:	430b      	orrs	r3, r1
 8000862:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000866:	4313      	orrs	r3, r2
 8000868:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800086a:	2301      	movs	r3, #1
 800086c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800086e:	f7ff fd13 	bl	8000298 <HAL_GetTick>
 8000872:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000874:	6823      	ldr	r3, [r4, #0]
 8000876:	019a      	lsls	r2, r3, #6
 8000878:	f53f aea8 	bmi.w	80005cc <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800087c:	f7ff fd0c 	bl	8000298 <HAL_GetTick>
 8000880:	1b40      	subs	r0, r0, r5
 8000882:	2802      	cmp	r0, #2
 8000884:	d9f6      	bls.n	8000874 <HAL_RCC_OscConfig+0x2d8>
 8000886:	e6cb      	b.n	8000620 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000888:	f7ff fd06 	bl	8000298 <HAL_GetTick>
 800088c:	1bc0      	subs	r0, r0, r7
 800088e:	2802      	cmp	r0, #2
 8000890:	d9d7      	bls.n	8000842 <HAL_RCC_OscConfig+0x2a6>
 8000892:	e6c5      	b.n	8000620 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000894:	f7ff fd00 	bl	8000298 <HAL_GetTick>
 8000898:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800089a:	6823      	ldr	r3, [r4, #0]
 800089c:	019b      	lsls	r3, r3, #6
 800089e:	f57f ae95 	bpl.w	80005cc <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80008a2:	f7ff fcf9 	bl	8000298 <HAL_GetTick>
 80008a6:	1b40      	subs	r0, r0, r5
 80008a8:	2802      	cmp	r0, #2
 80008aa:	d9f6      	bls.n	800089a <HAL_RCC_OscConfig+0x2fe>
 80008ac:	e6b8      	b.n	8000620 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80008ae:	2801      	cmp	r0, #1
 80008b0:	f43f aeb7 	beq.w	8000622 <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 80008b4:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80008b6:	6a2b      	ldr	r3, [r5, #32]
 80008b8:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 80008bc:	429a      	cmp	r2, r3
 80008be:	f47f ae71 	bne.w	80005a4 <HAL_RCC_OscConfig+0x8>
 80008c2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80008c4:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 80008c8:	1ac0      	subs	r0, r0, r3
 80008ca:	bf18      	it	ne
 80008cc:	2001      	movne	r0, #1
 80008ce:	e6a8      	b.n	8000622 <HAL_RCC_OscConfig+0x86>
 80008d0:	40021000 	.word	0x40021000
 80008d4:	42420060 	.word	0x42420060

080008d8 <HAL_RCC_GetSysClockFreq>:
{
 80008d8:	b530      	push	{r4, r5, lr}
 80008da:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80008dc:	466c      	mov	r4, sp
 80008de:	4b1b      	ldr	r3, [pc, #108]	; (800094c <HAL_RCC_GetSysClockFreq+0x74>)
 80008e0:	f103 0510 	add.w	r5, r3, #16
 80008e4:	4622      	mov	r2, r4
 80008e6:	6818      	ldr	r0, [r3, #0]
 80008e8:	6859      	ldr	r1, [r3, #4]
 80008ea:	3308      	adds	r3, #8
 80008ec:	c203      	stmia	r2!, {r0, r1}
 80008ee:	42ab      	cmp	r3, r5
 80008f0:	4614      	mov	r4, r2
 80008f2:	d1f7      	bne.n	80008e4 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 80008f4:	4b16      	ldr	r3, [pc, #88]	; (8000950 <HAL_RCC_GetSysClockFreq+0x78>)
 80008f6:	ac04      	add	r4, sp, #16
 80008f8:	f103 0510 	add.w	r5, r3, #16
 80008fc:	4622      	mov	r2, r4
 80008fe:	6818      	ldr	r0, [r3, #0]
 8000900:	6859      	ldr	r1, [r3, #4]
 8000902:	3308      	adds	r3, #8
 8000904:	c203      	stmia	r2!, {r0, r1}
 8000906:	42ab      	cmp	r3, r5
 8000908:	4614      	mov	r4, r2
 800090a:	d1f7      	bne.n	80008fc <HAL_RCC_GetSysClockFreq+0x24>
  tmpreg = RCC->CFGR;
 800090c:	4911      	ldr	r1, [pc, #68]	; (8000954 <HAL_RCC_GetSysClockFreq+0x7c>)
 800090e:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000910:	f003 020c 	and.w	r2, r3, #12
 8000914:	2a08      	cmp	r2, #8
 8000916:	d117      	bne.n	8000948 <HAL_RCC_GetSysClockFreq+0x70>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000918:	f3c3 4283 	ubfx	r2, r3, #18, #4
 800091c:	a808      	add	r0, sp, #32
 800091e:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000920:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000922:	f812 2c20 	ldrb.w	r2, [r2, #-32]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000926:	d50c      	bpl.n	8000942 <HAL_RCC_GetSysClockFreq+0x6a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8000928:	6acb      	ldr	r3, [r1, #44]	; 0x2c
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800092a:	480b      	ldr	r0, [pc, #44]	; (8000958 <HAL_RCC_GetSysClockFreq+0x80>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 800092c:	f003 030f 	and.w	r3, r3, #15
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000930:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8000932:	aa08      	add	r2, sp, #32
 8000934:	4413      	add	r3, r2
 8000936:	f813 3c10 	ldrb.w	r3, [r3, #-16]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800093a:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800093e:	b009      	add	sp, #36	; 0x24
 8000940:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000942:	4806      	ldr	r0, [pc, #24]	; (800095c <HAL_RCC_GetSysClockFreq+0x84>)
 8000944:	4350      	muls	r0, r2
 8000946:	e7fa      	b.n	800093e <HAL_RCC_GetSysClockFreq+0x66>
      sysclockfreq = HSE_VALUE;
 8000948:	4803      	ldr	r0, [pc, #12]	; (8000958 <HAL_RCC_GetSysClockFreq+0x80>)
  return sysclockfreq;
 800094a:	e7f8      	b.n	800093e <HAL_RCC_GetSysClockFreq+0x66>
 800094c:	08001f9c 	.word	0x08001f9c
 8000950:	08001fac 	.word	0x08001fac
 8000954:	40021000 	.word	0x40021000
 8000958:	007a1200 	.word	0x007a1200
 800095c:	003d0900 	.word	0x003d0900

08000960 <HAL_RCC_ClockConfig>:
{
 8000960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (RCC_ClkInitStruct == NULL)
 8000962:	4605      	mov	r5, r0
 8000964:	b908      	cbnz	r0, 800096a <HAL_RCC_ClockConfig+0xa>
    return HAL_ERROR;
 8000966:	2001      	movs	r0, #1
 8000968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800096a:	6802      	ldr	r2, [r0, #0]
 800096c:	4c30      	ldr	r4, [pc, #192]	; (8000a30 <HAL_RCC_ClockConfig+0xd0>)
 800096e:	f012 0f02 	tst.w	r2, #2
 8000972:	d011      	beq.n	8000998 <HAL_RCC_ClockConfig+0x38>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000974:	0757      	lsls	r7, r2, #29
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000976:	bf42      	ittt	mi
 8000978:	6863      	ldrmi	r3, [r4, #4]
 800097a:	f443 63e0 	orrmi.w	r3, r3, #1792	; 0x700
 800097e:	6063      	strmi	r3, [r4, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000980:	0716      	lsls	r6, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000982:	bf42      	ittt	mi
 8000984:	6863      	ldrmi	r3, [r4, #4]
 8000986:	f443 5360 	orrmi.w	r3, r3, #14336	; 0x3800
 800098a:	6063      	strmi	r3, [r4, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800098c:	6863      	ldr	r3, [r4, #4]
 800098e:	6881      	ldr	r1, [r0, #8]
 8000990:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000994:	430b      	orrs	r3, r1
 8000996:	6063      	str	r3, [r4, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000998:	07d0      	lsls	r0, r2, #31
 800099a:	d41b      	bmi.n	80009d4 <HAL_RCC_ClockConfig+0x74>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800099c:	682a      	ldr	r2, [r5, #0]
 800099e:	0751      	lsls	r1, r2, #29
 80009a0:	d43f      	bmi.n	8000a22 <HAL_RCC_ClockConfig+0xc2>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80009a2:	0713      	lsls	r3, r2, #28
 80009a4:	d506      	bpl.n	80009b4 <HAL_RCC_ClockConfig+0x54>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80009a6:	6863      	ldr	r3, [r4, #4]
 80009a8:	692a      	ldr	r2, [r5, #16]
 80009aa:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80009ae:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80009b2:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80009b4:	f7ff ff90 	bl	80008d8 <HAL_RCC_GetSysClockFreq>
 80009b8:	6863      	ldr	r3, [r4, #4]
 80009ba:	4a1e      	ldr	r2, [pc, #120]	; (8000a34 <HAL_RCC_ClockConfig+0xd4>)
 80009bc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80009c0:	5cd3      	ldrb	r3, [r2, r3]
 80009c2:	40d8      	lsrs	r0, r3
 80009c4:	4b1c      	ldr	r3, [pc, #112]	; (8000a38 <HAL_RCC_ClockConfig+0xd8>)
 80009c6:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80009c8:	4b1c      	ldr	r3, [pc, #112]	; (8000a3c <HAL_RCC_ClockConfig+0xdc>)
 80009ca:	6818      	ldr	r0, [r3, #0]
 80009cc:	f7ff fc28 	bl	8000220 <HAL_InitTick>
  return HAL_OK;
 80009d0:	2000      	movs	r0, #0
 80009d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80009d4:	686a      	ldr	r2, [r5, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009d6:	6823      	ldr	r3, [r4, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80009d8:	2a01      	cmp	r2, #1
 80009da:	d11a      	bne.n	8000a12 <HAL_RCC_ClockConfig+0xb2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009dc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009e0:	d0c1      	beq.n	8000966 <HAL_RCC_ClockConfig+0x6>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80009e2:	6863      	ldr	r3, [r4, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009e4:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80009e8:	f023 0303 	bic.w	r3, r3, #3
 80009ec:	4313      	orrs	r3, r2
 80009ee:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80009f0:	f7ff fc52 	bl	8000298 <HAL_GetTick>
 80009f4:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80009f6:	6863      	ldr	r3, [r4, #4]
 80009f8:	686a      	ldr	r2, [r5, #4]
 80009fa:	f003 030c 	and.w	r3, r3, #12
 80009fe:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000a02:	d0cb      	beq.n	800099c <HAL_RCC_ClockConfig+0x3c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a04:	f7ff fc48 	bl	8000298 <HAL_GetTick>
 8000a08:	1b80      	subs	r0, r0, r6
 8000a0a:	42b8      	cmp	r0, r7
 8000a0c:	d9f3      	bls.n	80009f6 <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 8000a0e:	2003      	movs	r0, #3
}
 8000a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000a12:	2a02      	cmp	r2, #2
 8000a14:	d102      	bne.n	8000a1c <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000a16:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000a1a:	e7e1      	b.n	80009e0 <HAL_RCC_ClockConfig+0x80>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a1c:	f013 0f02 	tst.w	r3, #2
 8000a20:	e7de      	b.n	80009e0 <HAL_RCC_ClockConfig+0x80>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000a22:	6863      	ldr	r3, [r4, #4]
 8000a24:	68e9      	ldr	r1, [r5, #12]
 8000a26:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000a2a:	430b      	orrs	r3, r1
 8000a2c:	6063      	str	r3, [r4, #4]
 8000a2e:	e7b8      	b.n	80009a2 <HAL_RCC_ClockConfig+0x42>
 8000a30:	40021000 	.word	0x40021000
 8000a34:	08001fe6 	.word	0x08001fe6
 8000a38:	20000018 	.word	0x20000018
 8000a3c:	20000004 	.word	0x20000004

08000a40 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000a40:	6803      	ldr	r3, [r0, #0]
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
}
 8000a42:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000a44:	68da      	ldr	r2, [r3, #12]
 8000a46:	f042 0201 	orr.w	r2, r2, #1
 8000a4a:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8000a4c:	689a      	ldr	r2, [r3, #8]
 8000a4e:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000a52:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 8000a54:	bf1e      	ittt	ne
 8000a56:	681a      	ldrne	r2, [r3, #0]
 8000a58:	f042 0201 	orrne.w	r2, r2, #1
 8000a5c:	601a      	strne	r2, [r3, #0]
}
 8000a5e:	4770      	bx	lr

08000a60 <HAL_TIM_PeriodElapsedCallback>:
 8000a60:	4770      	bx	lr

08000a62 <HAL_TIM_OC_DelayElapsedCallback>:
 8000a62:	4770      	bx	lr

08000a64 <HAL_TIM_IC_CaptureCallback>:
 8000a64:	4770      	bx	lr

08000a66 <HAL_TIM_PWM_PulseFinishedCallback>:
 8000a66:	4770      	bx	lr

08000a68 <HAL_TIM_TriggerCallback>:
 8000a68:	4770      	bx	lr

08000a6a <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000a6a:	6803      	ldr	r3, [r0, #0]
{
 8000a6c:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000a6e:	691a      	ldr	r2, [r3, #16]
{
 8000a70:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000a72:	0791      	lsls	r1, r2, #30
 8000a74:	d50e      	bpl.n	8000a94 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8000a76:	68da      	ldr	r2, [r3, #12]
 8000a78:	0792      	lsls	r2, r2, #30
 8000a7a:	d50b      	bpl.n	8000a94 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000a7c:	f06f 0202 	mvn.w	r2, #2
 8000a80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000a82:	2201      	movs	r2, #1

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000a84:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000a86:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000a88:	079b      	lsls	r3, r3, #30
 8000a8a:	d077      	beq.n	8000b7c <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8000a8c:	f7ff ffea 	bl	8000a64 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000a90:	2300      	movs	r3, #0
 8000a92:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000a94:	6823      	ldr	r3, [r4, #0]
 8000a96:	691a      	ldr	r2, [r3, #16]
 8000a98:	0750      	lsls	r0, r2, #29
 8000a9a:	d510      	bpl.n	8000abe <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8000a9c:	68da      	ldr	r2, [r3, #12]
 8000a9e:	0751      	lsls	r1, r2, #29
 8000aa0:	d50d      	bpl.n	8000abe <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000aa2:	f06f 0204 	mvn.w	r2, #4
 8000aa6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000aa8:	2202      	movs	r2, #2
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000aaa:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000aac:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000aae:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000ab2:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000ab4:	d068      	beq.n	8000b88 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8000ab6:	f7ff ffd5 	bl	8000a64 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000aba:	2300      	movs	r3, #0
 8000abc:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000abe:	6823      	ldr	r3, [r4, #0]
 8000ac0:	691a      	ldr	r2, [r3, #16]
 8000ac2:	0712      	lsls	r2, r2, #28
 8000ac4:	d50f      	bpl.n	8000ae6 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8000ac6:	68da      	ldr	r2, [r3, #12]
 8000ac8:	0710      	lsls	r0, r2, #28
 8000aca:	d50c      	bpl.n	8000ae6 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000acc:	f06f 0208 	mvn.w	r2, #8
 8000ad0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000ad2:	2204      	movs	r2, #4
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000ad4:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000ad6:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000ad8:	0799      	lsls	r1, r3, #30
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000ada:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000adc:	d05a      	beq.n	8000b94 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8000ade:	f7ff ffc1 	bl	8000a64 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000ae6:	6823      	ldr	r3, [r4, #0]
 8000ae8:	691a      	ldr	r2, [r3, #16]
 8000aea:	06d2      	lsls	r2, r2, #27
 8000aec:	d510      	bpl.n	8000b10 <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8000aee:	68da      	ldr	r2, [r3, #12]
 8000af0:	06d0      	lsls	r0, r2, #27
 8000af2:	d50d      	bpl.n	8000b10 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000af4:	f06f 0210 	mvn.w	r2, #16
 8000af8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000afa:	2208      	movs	r2, #8
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000afc:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000afe:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000b00:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000b04:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000b06:	d04b      	beq.n	8000ba0 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8000b08:	f7ff ffac 	bl	8000a64 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000b10:	6823      	ldr	r3, [r4, #0]
 8000b12:	691a      	ldr	r2, [r3, #16]
 8000b14:	07d1      	lsls	r1, r2, #31
 8000b16:	d508      	bpl.n	8000b2a <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8000b18:	68da      	ldr	r2, [r3, #12]
 8000b1a:	07d2      	lsls	r2, r2, #31
 8000b1c:	d505      	bpl.n	8000b2a <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000b1e:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8000b22:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000b24:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8000b26:	f7ff ff9b 	bl	8000a60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000b2a:	6823      	ldr	r3, [r4, #0]
 8000b2c:	691a      	ldr	r2, [r3, #16]
 8000b2e:	0610      	lsls	r0, r2, #24
 8000b30:	d508      	bpl.n	8000b44 <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8000b32:	68da      	ldr	r2, [r3, #12]
 8000b34:	0611      	lsls	r1, r2, #24
 8000b36:	d505      	bpl.n	8000b44 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000b38:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8000b3c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000b3e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8000b40:	f000 f8c1 	bl	8000cc6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000b44:	6823      	ldr	r3, [r4, #0]
 8000b46:	691a      	ldr	r2, [r3, #16]
 8000b48:	0652      	lsls	r2, r2, #25
 8000b4a:	d508      	bpl.n	8000b5e <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8000b4c:	68da      	ldr	r2, [r3, #12]
 8000b4e:	0650      	lsls	r0, r2, #25
 8000b50:	d505      	bpl.n	8000b5e <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000b52:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8000b56:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000b58:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8000b5a:	f7ff ff85 	bl	8000a68 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000b5e:	6823      	ldr	r3, [r4, #0]
 8000b60:	691a      	ldr	r2, [r3, #16]
 8000b62:	0691      	lsls	r1, r2, #26
 8000b64:	d522      	bpl.n	8000bac <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8000b66:	68da      	ldr	r2, [r3, #12]
 8000b68:	0692      	lsls	r2, r2, #26
 8000b6a:	d51f      	bpl.n	8000bac <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000b6c:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8000b70:	4620      	mov	r0, r4
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8000b72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000b76:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8000b78:	f000 b8a4 	b.w	8000cc4 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000b7c:	f7ff ff71 	bl	8000a62 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000b80:	4620      	mov	r0, r4
 8000b82:	f7ff ff70 	bl	8000a66 <HAL_TIM_PWM_PulseFinishedCallback>
 8000b86:	e783      	b.n	8000a90 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000b88:	f7ff ff6b 	bl	8000a62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000b8c:	4620      	mov	r0, r4
 8000b8e:	f7ff ff6a 	bl	8000a66 <HAL_TIM_PWM_PulseFinishedCallback>
 8000b92:	e792      	b.n	8000aba <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000b94:	f7ff ff65 	bl	8000a62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000b98:	4620      	mov	r0, r4
 8000b9a:	f7ff ff64 	bl	8000a66 <HAL_TIM_PWM_PulseFinishedCallback>
 8000b9e:	e7a0      	b.n	8000ae2 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000ba0:	f7ff ff5f 	bl	8000a62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000ba4:	4620      	mov	r0, r4
 8000ba6:	f7ff ff5e 	bl	8000a66 <HAL_TIM_PWM_PulseFinishedCallback>
 8000baa:	e7af      	b.n	8000b0c <HAL_TIM_IRQHandler+0xa2>
 8000bac:	bd10      	pop	{r4, pc}
	...

08000bb0 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000bb0:	4a26      	ldr	r2, [pc, #152]	; (8000c4c <TIM_Base_SetConfig+0x9c>)
  tmpcr1 = TIMx->CR1;
 8000bb2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000bb4:	4290      	cmp	r0, r2
 8000bb6:	d00a      	beq.n	8000bce <TIM_Base_SetConfig+0x1e>
 8000bb8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000bbc:	d007      	beq.n	8000bce <TIM_Base_SetConfig+0x1e>
 8000bbe:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000bc2:	4290      	cmp	r0, r2
 8000bc4:	d003      	beq.n	8000bce <TIM_Base_SetConfig+0x1e>
 8000bc6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000bca:	4290      	cmp	r0, r2
 8000bcc:	d111      	bne.n	8000bf2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8000bce:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000bd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000bd4:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000bd6:	4a1d      	ldr	r2, [pc, #116]	; (8000c4c <TIM_Base_SetConfig+0x9c>)
 8000bd8:	4290      	cmp	r0, r2
 8000bda:	d015      	beq.n	8000c08 <TIM_Base_SetConfig+0x58>
 8000bdc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000be0:	d012      	beq.n	8000c08 <TIM_Base_SetConfig+0x58>
 8000be2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000be6:	4290      	cmp	r0, r2
 8000be8:	d00e      	beq.n	8000c08 <TIM_Base_SetConfig+0x58>
 8000bea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000bee:	4290      	cmp	r0, r2
 8000bf0:	d00a      	beq.n	8000c08 <TIM_Base_SetConfig+0x58>
 8000bf2:	4a17      	ldr	r2, [pc, #92]	; (8000c50 <TIM_Base_SetConfig+0xa0>)
 8000bf4:	4290      	cmp	r0, r2
 8000bf6:	d007      	beq.n	8000c08 <TIM_Base_SetConfig+0x58>
 8000bf8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000bfc:	4290      	cmp	r0, r2
 8000bfe:	d003      	beq.n	8000c08 <TIM_Base_SetConfig+0x58>
 8000c00:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000c04:	4290      	cmp	r0, r2
 8000c06:	d103      	bne.n	8000c10 <TIM_Base_SetConfig+0x60>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000c08:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000c0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000c0e:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8000c10:	694a      	ldr	r2, [r1, #20]
 8000c12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000c16:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8000c18:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000c1a:	688b      	ldr	r3, [r1, #8]
 8000c1c:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8000c1e:	680b      	ldr	r3, [r1, #0]
 8000c20:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000c22:	4b0a      	ldr	r3, [pc, #40]	; (8000c4c <TIM_Base_SetConfig+0x9c>)
 8000c24:	4298      	cmp	r0, r3
 8000c26:	d00b      	beq.n	8000c40 <TIM_Base_SetConfig+0x90>
 8000c28:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8000c2c:	4298      	cmp	r0, r3
 8000c2e:	d007      	beq.n	8000c40 <TIM_Base_SetConfig+0x90>
 8000c30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000c34:	4298      	cmp	r0, r3
 8000c36:	d003      	beq.n	8000c40 <TIM_Base_SetConfig+0x90>
 8000c38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000c3c:	4298      	cmp	r0, r3
 8000c3e:	d101      	bne.n	8000c44 <TIM_Base_SetConfig+0x94>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8000c40:	690b      	ldr	r3, [r1, #16]
 8000c42:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8000c44:	2301      	movs	r3, #1
 8000c46:	6143      	str	r3, [r0, #20]
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	40012c00 	.word	0x40012c00
 8000c50:	40014000 	.word	0x40014000

08000c54 <HAL_TIM_Base_Init>:
{
 8000c54:	b510      	push	{r4, lr}
  if (htim == NULL)
 8000c56:	4604      	mov	r4, r0
 8000c58:	b1a0      	cbz	r0, 8000c84 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8000c5a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000c5e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000c62:	b91b      	cbnz	r3, 8000c6c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000c64:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8000c68:	f000 fbda 	bl	8001420 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8000c6c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000c6e:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8000c70:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000c74:	1d21      	adds	r1, r4, #4
 8000c76:	f7ff ff9b 	bl	8000bb0 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8000c7a:	2301      	movs	r3, #1
  return HAL_OK;
 8000c7c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8000c7e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8000c82:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000c84:	2001      	movs	r0, #1
}
 8000c86:	bd10      	pop	{r4, pc}

08000c88 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8000c88:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8000c8c:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8000c8e:	2b01      	cmp	r3, #1
 8000c90:	f04f 0302 	mov.w	r3, #2
 8000c94:	d014      	beq.n	8000cc0 <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8000c96:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8000c98:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8000c9c:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8000c9e:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8000ca0:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8000ca2:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 8000ca4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 8000ca8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8000cac:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8000cae:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8000cb0:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8000cb2:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8000cba:	2300      	movs	r3, #0
 8000cbc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8000cc0:	4618      	mov	r0, r3

  return HAL_OK;
}
 8000cc2:	bd30      	pop	{r4, r5, pc}

08000cc4 <HAL_TIMEx_CommutCallback>:
 8000cc4:	4770      	bx	lr

08000cc6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8000cc6:	4770      	bx	lr

08000cc8 <enableClock>:
}

// enables GPIO RCC Clock
void enableClock(void)
{  
  if(_port == GPIOA)
 8000cc8:	4b24      	ldr	r3, [pc, #144]	; (8000d5c <enableClock+0x94>)
 8000cca:	4a25      	ldr	r2, [pc, #148]	; (8000d60 <enableClock+0x98>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
{  
 8000cce:	b086      	sub	sp, #24
  if(_port == GPIOA)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d10b      	bne.n	8000cec <enableClock+0x24>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd4:	4b23      	ldr	r3, [pc, #140]	; (8000d64 <enableClock+0x9c>)
 8000cd6:	699a      	ldr	r2, [r3, #24]
 8000cd8:	f042 0204 	orr.w	r2, r2, #4
 8000cdc:	619a      	str	r2, [r3, #24]
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	f003 0304 	and.w	r3, r3, #4
 8000ce4:	9301      	str	r3, [sp, #4]
 8000ce6:	9b01      	ldr	r3, [sp, #4]
		__HAL_RCC_GPIOE_CLK_ENABLE();
	//else if(_port == GPIOF)
	//	__HAL_RCC_GPIOF_CLK_ENABLE();

  // if you have a port that is not listed add it below the other else ifs
}
 8000ce8:	b006      	add	sp, #24
 8000cea:	4770      	bx	lr
  else if(_port == GPIOB)
 8000cec:	4a1e      	ldr	r2, [pc, #120]	; (8000d68 <enableClock+0xa0>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d10a      	bne.n	8000d08 <enableClock+0x40>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf2:	4b1c      	ldr	r3, [pc, #112]	; (8000d64 <enableClock+0x9c>)
 8000cf4:	699a      	ldr	r2, [r3, #24]
 8000cf6:	f042 0208 	orr.w	r2, r2, #8
 8000cfa:	619a      	str	r2, [r3, #24]
 8000cfc:	699b      	ldr	r3, [r3, #24]
 8000cfe:	f003 0308 	and.w	r3, r3, #8
 8000d02:	9302      	str	r3, [sp, #8]
 8000d04:	9b02      	ldr	r3, [sp, #8]
 8000d06:	e7ef      	b.n	8000ce8 <enableClock+0x20>
	else if(_port == GPIOC)
 8000d08:	4a18      	ldr	r2, [pc, #96]	; (8000d6c <enableClock+0xa4>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d10a      	bne.n	8000d24 <enableClock+0x5c>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8000d0e:	4b15      	ldr	r3, [pc, #84]	; (8000d64 <enableClock+0x9c>)
 8000d10:	699a      	ldr	r2, [r3, #24]
 8000d12:	f042 0210 	orr.w	r2, r2, #16
 8000d16:	619a      	str	r2, [r3, #24]
 8000d18:	699b      	ldr	r3, [r3, #24]
 8000d1a:	f003 0310 	and.w	r3, r3, #16
 8000d1e:	9303      	str	r3, [sp, #12]
 8000d20:	9b03      	ldr	r3, [sp, #12]
 8000d22:	e7e1      	b.n	8000ce8 <enableClock+0x20>
	else if(_port == GPIOD)
 8000d24:	4a12      	ldr	r2, [pc, #72]	; (8000d70 <enableClock+0xa8>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d10a      	bne.n	8000d40 <enableClock+0x78>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8000d2a:	4b0e      	ldr	r3, [pc, #56]	; (8000d64 <enableClock+0x9c>)
 8000d2c:	699a      	ldr	r2, [r3, #24]
 8000d2e:	f042 0220 	orr.w	r2, r2, #32
 8000d32:	619a      	str	r2, [r3, #24]
 8000d34:	699b      	ldr	r3, [r3, #24]
 8000d36:	f003 0320 	and.w	r3, r3, #32
 8000d3a:	9304      	str	r3, [sp, #16]
 8000d3c:	9b04      	ldr	r3, [sp, #16]
 8000d3e:	e7d3      	b.n	8000ce8 <enableClock+0x20>
	else if(_port == GPIOE)
 8000d40:	4a0c      	ldr	r2, [pc, #48]	; (8000d74 <enableClock+0xac>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d1d0      	bne.n	8000ce8 <enableClock+0x20>
		__HAL_RCC_GPIOE_CLK_ENABLE();
 8000d46:	4b07      	ldr	r3, [pc, #28]	; (8000d64 <enableClock+0x9c>)
 8000d48:	699a      	ldr	r2, [r3, #24]
 8000d4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000d4e:	619a      	str	r2, [r3, #24]
 8000d50:	699b      	ldr	r3, [r3, #24]
 8000d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d56:	9305      	str	r3, [sp, #20]
 8000d58:	9b05      	ldr	r3, [sp, #20]
}
 8000d5a:	e7c5      	b.n	8000ce8 <enableClock+0x20>
 8000d5c:	200000d8 	.word	0x200000d8
 8000d60:	40010800 	.word	0x40010800
 8000d64:	40021000 	.word	0x40021000
 8000d68:	40010c00 	.word	0x40010c00
 8000d6c:	40011000 	.word	0x40011000
 8000d70:	40011400 	.word	0x40011400
 8000d74:	40011800 	.word	0x40011800

08000d78 <pulseEnable>:
    write4bits(value>>4);
    write4bits(value);
  }
}

void pulseEnable(void) {
 8000d78:	b538      	push	{r3, r4, r5, lr}
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8000d7a:	4d0e      	ldr	r5, [pc, #56]	; (8000db4 <pulseEnable+0x3c>)
 8000d7c:	4c0e      	ldr	r4, [pc, #56]	; (8000db8 <pulseEnable+0x40>)
 8000d7e:	8829      	ldrh	r1, [r5, #0]
 8000d80:	2200      	movs	r2, #0
 8000d82:	6820      	ldr	r0, [r4, #0]
 8000d84:	f7ff fbf2 	bl	800056c <HAL_GPIO_WritePin>
  HAL_Delay(1);    
 8000d88:	2001      	movs	r0, #1
 8000d8a:	f7ff fa8b 	bl	80002a4 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_SET);
 8000d8e:	8829      	ldrh	r1, [r5, #0]
 8000d90:	2201      	movs	r2, #1
 8000d92:	6820      	ldr	r0, [r4, #0]
 8000d94:	f7ff fbea 	bl	800056c <HAL_GPIO_WritePin>
  HAL_Delay(1);    // enable pulse must be >450ns
 8000d98:	2001      	movs	r0, #1
 8000d9a:	f7ff fa83 	bl	80002a4 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8000d9e:	6820      	ldr	r0, [r4, #0]
 8000da0:	8829      	ldrh	r1, [r5, #0]
 8000da2:	2200      	movs	r2, #0
 8000da4:	f7ff fbe2 	bl	800056c <HAL_GPIO_WritePin>
  HAL_Delay(1);   // commands need > 37us to settle
}
 8000da8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Delay(1);   // commands need > 37us to settle
 8000dac:	2001      	movs	r0, #1
 8000dae:	f7ff ba79 	b.w	80002a4 <HAL_Delay>
 8000db2:	bf00      	nop
 8000db4:	200000f0 	.word	0x200000f0
 8000db8:	200000d8 	.word	0x200000d8

08000dbc <write4bits>:

void write4bits(uint8_t value) {
 8000dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dbe:	4607      	mov	r7, r0
  for (int i = 0; i < 4; i++) {
 8000dc0:	2400      	movs	r4, #0
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000dc2:	4e09      	ldr	r6, [pc, #36]	; (8000de8 <write4bits+0x2c>)
 8000dc4:	4d09      	ldr	r5, [pc, #36]	; (8000dec <write4bits+0x30>)
 8000dc6:	fa47 f204 	asr.w	r2, r7, r4
 8000dca:	f836 1014 	ldrh.w	r1, [r6, r4, lsl #1]
 8000dce:	f002 0201 	and.w	r2, r2, #1
 8000dd2:	6828      	ldr	r0, [r5, #0]
  for (int i = 0; i < 4; i++) {
 8000dd4:	3401      	adds	r4, #1
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000dd6:	f7ff fbc9 	bl	800056c <HAL_GPIO_WritePin>
  for (int i = 0; i < 4; i++) {
 8000dda:	2c04      	cmp	r4, #4
 8000ddc:	d1f3      	bne.n	8000dc6 <write4bits+0xa>
  }

  pulseEnable();
}
 8000dde:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  pulseEnable();
 8000de2:	f7ff bfc9 	b.w	8000d78 <pulseEnable>
 8000de6:	bf00      	nop
 8000de8:	200000de 	.word	0x200000de
 8000dec:	200000d8 	.word	0x200000d8

08000df0 <write8bits>:

void write8bits(uint8_t value) {
 8000df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000df2:	4607      	mov	r7, r0
  for (int i = 0; i < 8; i++) {
 8000df4:	2400      	movs	r4, #0
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000df6:	4e09      	ldr	r6, [pc, #36]	; (8000e1c <write8bits+0x2c>)
 8000df8:	4d09      	ldr	r5, [pc, #36]	; (8000e20 <write8bits+0x30>)
 8000dfa:	fa47 f204 	asr.w	r2, r7, r4
 8000dfe:	f836 1014 	ldrh.w	r1, [r6, r4, lsl #1]
 8000e02:	f002 0201 	and.w	r2, r2, #1
 8000e06:	6828      	ldr	r0, [r5, #0]
  for (int i = 0; i < 8; i++) {
 8000e08:	3401      	adds	r4, #1
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000e0a:	f7ff fbaf 	bl	800056c <HAL_GPIO_WritePin>
  for (int i = 0; i < 8; i++) {
 8000e0e:	2c08      	cmp	r4, #8
 8000e10:	d1f3      	bne.n	8000dfa <write8bits+0xa>
  }
  
  pulseEnable();
}
 8000e12:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  pulseEnable();
 8000e16:	f7ff bfaf 	b.w	8000d78 <pulseEnable>
 8000e1a:	bf00      	nop
 8000e1c:	200000de 	.word	0x200000de
 8000e20:	200000d8 	.word	0x200000d8

08000e24 <send>:
void send(uint8_t value, GPIO_PinState mode) {
 8000e24:	b538      	push	{r3, r4, r5, lr}
  HAL_GPIO_WritePin(_port, _rs_pin, mode);
 8000e26:	4b10      	ldr	r3, [pc, #64]	; (8000e68 <send+0x44>)
 8000e28:	4d10      	ldr	r5, [pc, #64]	; (8000e6c <send+0x48>)
 8000e2a:	460a      	mov	r2, r1
void send(uint8_t value, GPIO_PinState mode) {
 8000e2c:	4604      	mov	r4, r0
  HAL_GPIO_WritePin(_port, _rs_pin, mode);
 8000e2e:	8819      	ldrh	r1, [r3, #0]
 8000e30:	6828      	ldr	r0, [r5, #0]
 8000e32:	f7ff fb9b 	bl	800056c <HAL_GPIO_WritePin>
  if (_rw_pin != 255) { 
 8000e36:	4b0e      	ldr	r3, [pc, #56]	; (8000e70 <send+0x4c>)
 8000e38:	8819      	ldrh	r1, [r3, #0]
 8000e3a:	29ff      	cmp	r1, #255	; 0xff
 8000e3c:	d003      	beq.n	8000e46 <send+0x22>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	6828      	ldr	r0, [r5, #0]
 8000e42:	f7ff fb93 	bl	800056c <HAL_GPIO_WritePin>
  if (_displayfunction & LCD_8BITMODE) {
 8000e46:	4b0b      	ldr	r3, [pc, #44]	; (8000e74 <send+0x50>)
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	06db      	lsls	r3, r3, #27
 8000e4c:	d504      	bpl.n	8000e58 <send+0x34>
    write8bits(value); 
 8000e4e:	4620      	mov	r0, r4
}
 8000e50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    write8bits(value); 
 8000e54:	f7ff bfcc 	b.w	8000df0 <write8bits>
    write4bits(value>>4);
 8000e58:	0920      	lsrs	r0, r4, #4
 8000e5a:	f7ff ffaf 	bl	8000dbc <write4bits>
    write4bits(value);
 8000e5e:	4620      	mov	r0, r4
}
 8000e60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    write4bits(value);
 8000e64:	f7ff bfaa 	b.w	8000dbc <write4bits>
 8000e68:	200000f2 	.word	0x200000f2
 8000e6c:	200000d8 	.word	0x200000d8
 8000e70:	200000d4 	.word	0x200000d4
 8000e74:	200000ef 	.word	0x200000ef

08000e78 <command>:
  send(value, GPIO_PIN_RESET);
 8000e78:	2100      	movs	r1, #0
 8000e7a:	f7ff bfd3 	b.w	8000e24 <send>

08000e7e <clear>:
{
 8000e7e:	b508      	push	{r3, lr}
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
 8000e80:	2001      	movs	r0, #1
 8000e82:	f7ff fff9 	bl	8000e78 <command>
}
 8000e86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_Delay(2);  // this command takes a long time!
 8000e8a:	2002      	movs	r0, #2
 8000e8c:	f7ff ba0a 	b.w	80002a4 <HAL_Delay>

08000e90 <setCursor>:
{
 8000e90:	2903      	cmp	r1, #3
 8000e92:	bf28      	it	cs
 8000e94:	2103      	movcs	r1, #3
  if ( row >= _numlines ) {
 8000e96:	4b07      	ldr	r3, [pc, #28]	; (8000eb4 <setCursor+0x24>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	428b      	cmp	r3, r1
    row = _numlines - 1;    // we count rows starting w/0
 8000e9c:	bf9c      	itt	ls
 8000e9e:	f103 33ff 	addls.w	r3, r3, #4294967295
 8000ea2:	b2d9      	uxtbls	r1, r3
  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
 8000ea4:	4b04      	ldr	r3, [pc, #16]	; (8000eb8 <setCursor+0x28>)
 8000ea6:	5c5b      	ldrb	r3, [r3, r1]
 8000ea8:	4418      	add	r0, r3
 8000eaa:	f060 007f 	orn	r0, r0, #127	; 0x7f
 8000eae:	b2c0      	uxtb	r0, r0
 8000eb0:	f7ff bfe2 	b.w	8000e78 <command>
 8000eb4:	200000dd 	.word	0x200000dd
 8000eb8:	200000d0 	.word	0x200000d0

08000ebc <display>:
  _displaycontrol |= LCD_DISPLAYON;
 8000ebc:	4b04      	ldr	r3, [pc, #16]	; (8000ed0 <display+0x14>)
 8000ebe:	7818      	ldrb	r0, [r3, #0]
 8000ec0:	f040 0204 	orr.w	r2, r0, #4
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 8000ec4:	f040 000c 	orr.w	r0, r0, #12
  _displaycontrol |= LCD_DISPLAYON;
 8000ec8:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 8000eca:	f7ff bfd5 	b.w	8000e78 <command>
 8000ece:	bf00      	nop
 8000ed0:	200000dc 	.word	0x200000dc

08000ed4 <begin>:
void begin(uint8_t cols, uint8_t lines) {
 8000ed4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  _row_offsets[0] = row0;
 8000ed8:	2200      	movs	r2, #0
 8000eda:	4c55      	ldr	r4, [pc, #340]	; (8001030 <begin+0x15c>)
  if (lines > 1) {
 8000edc:	2901      	cmp	r1, #1
    _displayfunction |= LCD_2LINE;
 8000ede:	bf82      	ittt	hi
 8000ee0:	7823      	ldrbhi	r3, [r4, #0]
 8000ee2:	f043 0308 	orrhi.w	r3, r3, #8
 8000ee6:	7023      	strbhi	r3, [r4, #0]
  _numlines = lines;
 8000ee8:	4b52      	ldr	r3, [pc, #328]	; (8001034 <begin+0x160>)
 8000eea:	7019      	strb	r1, [r3, #0]
  _row_offsets[0] = row0;
 8000eec:	4b52      	ldr	r3, [pc, #328]	; (8001038 <begin+0x164>)
 8000eee:	701a      	strb	r2, [r3, #0]
  _row_offsets[1] = row1;
 8000ef0:	2240      	movs	r2, #64	; 0x40
  _row_offsets[2] = row2;
 8000ef2:	7098      	strb	r0, [r3, #2]
  setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);  
 8000ef4:	4410      	add	r0, r2
  _row_offsets[1] = row1;
 8000ef6:	705a      	strb	r2, [r3, #1]
  _row_offsets[3] = row3;
 8000ef8:	70d8      	strb	r0, [r3, #3]
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 8000efa:	4b50      	ldr	r3, [pc, #320]	; (800103c <begin+0x168>)
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	b12b      	cbz	r3, 8000f0c <begin+0x38>
 8000f00:	2901      	cmp	r1, #1
    _displayfunction |= LCD_5x10DOTS;
 8000f02:	bf02      	ittt	eq
 8000f04:	7823      	ldrbeq	r3, [r4, #0]
 8000f06:	f043 0304 	orreq.w	r3, r3, #4
 8000f0a:	7023      	strbeq	r3, [r4, #0]
  enableClock();
 8000f0c:	f7ff fedc 	bl	8000cc8 <enableClock>
  gpio_init.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f10:	2303      	movs	r3, #3
 8000f12:	9303      	str	r3, [sp, #12]
  gpio_init.Mode = GPIO_MODE_OUTPUT_PP;
 8000f14:	2301      	movs	r3, #1
 8000f16:	9301      	str	r3, [sp, #4]
  if(_fourbit_mode)
 8000f18:	4b49      	ldr	r3, [pc, #292]	; (8001040 <begin+0x16c>)
 8000f1a:	4f4a      	ldr	r7, [pc, #296]	; (8001044 <begin+0x170>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	4d4a      	ldr	r5, [pc, #296]	; (8001048 <begin+0x174>)
 8000f20:	4e4a      	ldr	r6, [pc, #296]	; (800104c <begin+0x178>)
 8000f22:	4a4b      	ldr	r2, [pc, #300]	; (8001050 <begin+0x17c>)
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d059      	beq.n	8000fdc <begin+0x108>
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3];
 8000f28:	8829      	ldrh	r1, [r5, #0]
 8000f2a:	883b      	ldrh	r3, [r7, #0]
 8000f2c:	430b      	orrs	r3, r1
 8000f2e:	8831      	ldrh	r1, [r6, #0]
 8000f30:	430b      	orrs	r3, r1
 8000f32:	8811      	ldrh	r1, [r2, #0]
 8000f34:	430b      	orrs	r3, r1
 8000f36:	8851      	ldrh	r1, [r2, #2]
 8000f38:	430b      	orrs	r3, r1
 8000f3a:	8891      	ldrh	r1, [r2, #4]
 8000f3c:	88d2      	ldrh	r2, [r2, #6]
 8000f3e:	430b      	orrs	r3, r1
  HAL_GPIO_Init(_port, &gpio_init);
 8000f40:	f8df 8118 	ldr.w	r8, [pc, #280]	; 800105c <begin+0x188>
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000f44:	4313      	orrs	r3, r2
 8000f46:	b29b      	uxth	r3, r3
  HAL_GPIO_Init(_port, &gpio_init);
 8000f48:	4669      	mov	r1, sp
 8000f4a:	f8d8 0000 	ldr.w	r0, [r8]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000f4e:	9300      	str	r3, [sp, #0]
  HAL_GPIO_Init(_port, &gpio_init);
 8000f50:	f7ff fa24 	bl	800039c <HAL_GPIO_Init>
  HAL_Delay(50); 
 8000f54:	2032      	movs	r0, #50	; 0x32
 8000f56:	f7ff f9a5 	bl	80002a4 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _rs_pin, GPIO_PIN_RESET);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	8839      	ldrh	r1, [r7, #0]
 8000f5e:	f8d8 0000 	ldr.w	r0, [r8]
 8000f62:	f7ff fb03 	bl	800056c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8000f66:	8831      	ldrh	r1, [r6, #0]
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f8d8 0000 	ldr.w	r0, [r8]
 8000f6e:	f7ff fafd 	bl	800056c <HAL_GPIO_WritePin>
  if (_rw_pin != 255) { 
 8000f72:	8829      	ldrh	r1, [r5, #0]
 8000f74:	29ff      	cmp	r1, #255	; 0xff
 8000f76:	d004      	beq.n	8000f82 <begin+0xae>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	f8d8 0000 	ldr.w	r0, [r8]
 8000f7e:	f7ff faf5 	bl	800056c <HAL_GPIO_WritePin>
  if (! (_displayfunction & LCD_8BITMODE)) {
 8000f82:	7820      	ldrb	r0, [r4, #0]
 8000f84:	06c3      	lsls	r3, r0, #27
 8000f86:	d43e      	bmi.n	8001006 <begin+0x132>
    write4bits(0x03);
 8000f88:	2003      	movs	r0, #3
 8000f8a:	f7ff ff17 	bl	8000dbc <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8000f8e:	2005      	movs	r0, #5
 8000f90:	f7ff f988 	bl	80002a4 <HAL_Delay>
    write4bits(0x03);
 8000f94:	2003      	movs	r0, #3
 8000f96:	f7ff ff11 	bl	8000dbc <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8000f9a:	2005      	movs	r0, #5
 8000f9c:	f7ff f982 	bl	80002a4 <HAL_Delay>
    write4bits(0x03); 
 8000fa0:	2003      	movs	r0, #3
 8000fa2:	f7ff ff0b 	bl	8000dbc <write4bits>
    HAL_Delay(1);
 8000fa6:	2001      	movs	r0, #1
 8000fa8:	f7ff f97c 	bl	80002a4 <HAL_Delay>
    write4bits(0x02); 
 8000fac:	2002      	movs	r0, #2
 8000fae:	f7ff ff05 	bl	8000dbc <write4bits>
  command(LCD_FUNCTIONSET | _displayfunction);  
 8000fb2:	7820      	ldrb	r0, [r4, #0]
 8000fb4:	f040 0020 	orr.w	r0, r0, #32
 8000fb8:	f7ff ff5e 	bl	8000e78 <command>
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;  
 8000fbc:	2204      	movs	r2, #4
 8000fbe:	4b25      	ldr	r3, [pc, #148]	; (8001054 <begin+0x180>)
 8000fc0:	701a      	strb	r2, [r3, #0]
  display();
 8000fc2:	f7ff ff7b 	bl	8000ebc <display>
  clear();
 8000fc6:	f7ff ff5a 	bl	8000e7e <clear>
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000fca:	2202      	movs	r2, #2
 8000fcc:	4b22      	ldr	r3, [pc, #136]	; (8001058 <begin+0x184>)
  command(LCD_ENTRYMODESET | _displaymode);
 8000fce:	2006      	movs	r0, #6
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000fd0:	701a      	strb	r2, [r3, #0]
  command(LCD_ENTRYMODESET | _displaymode);
 8000fd2:	f7ff ff51 	bl	8000e78 <command>
}
 8000fd6:	b004      	add	sp, #16
 8000fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000fdc:	8829      	ldrh	r1, [r5, #0]
 8000fde:	883b      	ldrh	r3, [r7, #0]
 8000fe0:	430b      	orrs	r3, r1
 8000fe2:	8831      	ldrh	r1, [r6, #0]
 8000fe4:	430b      	orrs	r3, r1
 8000fe6:	8811      	ldrh	r1, [r2, #0]
 8000fe8:	430b      	orrs	r3, r1
 8000fea:	8851      	ldrh	r1, [r2, #2]
 8000fec:	430b      	orrs	r3, r1
 8000fee:	8891      	ldrh	r1, [r2, #4]
 8000ff0:	430b      	orrs	r3, r1
 8000ff2:	88d1      	ldrh	r1, [r2, #6]
 8000ff4:	430b      	orrs	r3, r1
 8000ff6:	8911      	ldrh	r1, [r2, #8]
 8000ff8:	430b      	orrs	r3, r1
 8000ffa:	8951      	ldrh	r1, [r2, #10]
 8000ffc:	430b      	orrs	r3, r1
 8000ffe:	8991      	ldrh	r1, [r2, #12]
 8001000:	89d2      	ldrh	r2, [r2, #14]
 8001002:	430b      	orrs	r3, r1
 8001004:	e79c      	b.n	8000f40 <begin+0x6c>
    command(LCD_FUNCTIONSET | _displayfunction);
 8001006:	f040 0020 	orr.w	r0, r0, #32
 800100a:	f7ff ff35 	bl	8000e78 <command>
    HAL_Delay(5);  // wait more than 4.1ms
 800100e:	2005      	movs	r0, #5
 8001010:	f7ff f948 	bl	80002a4 <HAL_Delay>
    command(LCD_FUNCTIONSET | _displayfunction);
 8001014:	7820      	ldrb	r0, [r4, #0]
 8001016:	f040 0020 	orr.w	r0, r0, #32
 800101a:	f7ff ff2d 	bl	8000e78 <command>
    HAL_Delay(1);
 800101e:	2001      	movs	r0, #1
 8001020:	f7ff f940 	bl	80002a4 <HAL_Delay>
    command(LCD_FUNCTIONSET | _displayfunction);
 8001024:	7820      	ldrb	r0, [r4, #0]
 8001026:	f040 0020 	orr.w	r0, r0, #32
 800102a:	f7ff ff25 	bl	8000e78 <command>
 800102e:	e7c0      	b.n	8000fb2 <begin+0xde>
 8001030:	200000ef 	.word	0x200000ef
 8001034:	200000dd 	.word	0x200000dd
 8001038:	200000d0 	.word	0x200000d0
 800103c:	2000009c 	.word	0x2000009c
 8001040:	20000008 	.word	0x20000008
 8001044:	200000f2 	.word	0x200000f2
 8001048:	200000d4 	.word	0x200000d4
 800104c:	200000f0 	.word	0x200000f0
 8001050:	200000de 	.word	0x200000de
 8001054:	200000dc 	.word	0x200000dc
 8001058:	200000ee 	.word	0x200000ee
 800105c:	200000d8 	.word	0x200000d8

08001060 <init>:
{
 8001060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  _rs_pin = rs;
 8001064:	f8df b07c 	ldr.w	fp, [pc, #124]	; 80010e4 <init+0x84>
{
 8001068:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
  _rs_pin = rs;
 800106c:	f8ab 2000 	strh.w	r2, [fp]
  _rw_pin = rw;
 8001070:	4a17      	ldr	r2, [pc, #92]	; (80010d0 <init+0x70>)
{
 8001072:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
  _rw_pin = rw;
 8001076:	8013      	strh	r3, [r2, #0]
  _enable_pin = enable;
 8001078:	4b16      	ldr	r3, [pc, #88]	; (80010d4 <init+0x74>)
{
 800107a:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  _enable_pin = enable;
 800107e:	f8a3 a000 	strh.w	sl, [r3]
  _port = gpioport;
 8001082:	4b15      	ldr	r3, [pc, #84]	; (80010d8 <init+0x78>)
{
 8001084:	f8bd c030 	ldrh.w	ip, [sp, #48]	; 0x30
  _port = gpioport;
 8001088:	6019      	str	r1, [r3, #0]
{
 800108a:	f8bd e034 	ldrh.w	lr, [sp, #52]	; 0x34
  _data_pins[0] = d0;
 800108e:	4b13      	ldr	r3, [pc, #76]	; (80010dc <init+0x7c>)
{
 8001090:	f8bd 7038 	ldrh.w	r7, [sp, #56]	; 0x38
 8001094:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 8001098:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 800109c:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
  _data_pins[0] = d0;
 80010a0:	f8a3 9000 	strh.w	r9, [r3]
  _data_pins[1] = d1;
 80010a4:	f8a3 8002 	strh.w	r8, [r3, #2]
  _data_pins[2] = d2;
 80010a8:	f8a3 c004 	strh.w	ip, [r3, #4]
  _data_pins[3] = d3; 
 80010ac:	f8a3 e006 	strh.w	lr, [r3, #6]
  _data_pins[4] = d4;
 80010b0:	811f      	strh	r7, [r3, #8]
  _data_pins[5] = d5;
 80010b2:	815e      	strh	r6, [r3, #10]
  _data_pins[6] = d6;
 80010b4:	819d      	strh	r5, [r3, #12]
  _data_pins[7] = d7;
 80010b6:	81dc      	strh	r4, [r3, #14]
 80010b8:	4b09      	ldr	r3, [pc, #36]	; (80010e0 <init+0x80>)
  if (fourbitmode)
 80010ba:	b138      	cbz	r0, 80010cc <init+0x6c>
    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80010bc:	2200      	movs	r2, #0
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80010be:	701a      	strb	r2, [r3, #0]
  begin(16, 2);
 80010c0:	2102      	movs	r1, #2
}
 80010c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  begin(16, 2);
 80010c6:	2010      	movs	r0, #16
 80010c8:	f7ff bf04 	b.w	8000ed4 <begin>
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80010cc:	2210      	movs	r2, #16
 80010ce:	e7f6      	b.n	80010be <init+0x5e>
 80010d0:	200000d4 	.word	0x200000d4
 80010d4:	200000f0 	.word	0x200000f0
 80010d8:	200000d8 	.word	0x200000d8
 80010dc:	200000de 	.word	0x200000de
 80010e0:	200000ef 	.word	0x200000ef
 80010e4:	200000f2 	.word	0x200000f2

080010e8 <LiquidCrystal>:
{
 80010e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010ea:	4605      	mov	r5, r0
  if(_fourbit_mode)
 80010ec:	4814      	ldr	r0, [pc, #80]	; (8001140 <LiquidCrystal+0x58>)
{
 80010ee:	b08b      	sub	sp, #44	; 0x2c
  if(_fourbit_mode)
 80010f0:	7800      	ldrb	r0, [r0, #0]
{
 80010f2:	f8bd 6040 	ldrh.w	r6, [sp, #64]	; 0x40
 80010f6:	f8bd 7044 	ldrh.w	r7, [sp, #68]	; 0x44
 80010fa:	f8bd e048 	ldrh.w	lr, [sp, #72]	; 0x48
 80010fe:	f8bd c04c 	ldrh.w	ip, [sp, #76]	; 0x4c
  if(_fourbit_mode)
 8001102:	b180      	cbz	r0, 8001126 <LiquidCrystal+0x3e>
    init(1, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 8001104:	2400      	movs	r4, #0
 8001106:	e88d 40c8 	stmia.w	sp, {r3, r6, r7, lr}
 800110a:	2001      	movs	r0, #1
 800110c:	4613      	mov	r3, r2
 800110e:	460a      	mov	r2, r1
 8001110:	4629      	mov	r1, r5
 8001112:	9408      	str	r4, [sp, #32]
 8001114:	9407      	str	r4, [sp, #28]
 8001116:	9406      	str	r4, [sp, #24]
 8001118:	9405      	str	r4, [sp, #20]
 800111a:	f8cd c010 	str.w	ip, [sp, #16]
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 800111e:	f7ff ff9f 	bl	8001060 <init>
}
 8001122:	b00b      	add	sp, #44	; 0x2c
 8001124:	bdf0      	pop	{r4, r5, r6, r7, pc}
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 8001126:	e88d 40c8 	stmia.w	sp, {r3, r6, r7, lr}
 800112a:	9008      	str	r0, [sp, #32]
 800112c:	4613      	mov	r3, r2
 800112e:	9007      	str	r0, [sp, #28]
 8001130:	460a      	mov	r2, r1
 8001132:	9006      	str	r0, [sp, #24]
 8001134:	9005      	str	r0, [sp, #20]
 8001136:	f8cd c010 	str.w	ip, [sp, #16]
 800113a:	4629      	mov	r1, r5
 800113c:	e7ef      	b.n	800111e <LiquidCrystal+0x36>
 800113e:	bf00      	nop
 8001140:	20000008 	.word	0x20000008

08001144 <blink>:
  _displaycontrol |= LCD_BLINKON;
 8001144:	4b04      	ldr	r3, [pc, #16]	; (8001158 <blink+0x14>)
 8001146:	7818      	ldrb	r0, [r3, #0]
 8001148:	f040 0201 	orr.w	r2, r0, #1
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 800114c:	f040 0009 	orr.w	r0, r0, #9
  _displaycontrol |= LCD_BLINKON;
 8001150:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 8001152:	f7ff be91 	b.w	8000e78 <command>
 8001156:	bf00      	nop
 8001158:	200000dc 	.word	0x200000dc

0800115c <print>:
size_t print(const char str[]) {
 800115c:	b570      	push	{r4, r5, r6, lr}
  if (str == NULL) return 0;
 800115e:	4604      	mov	r4, r0
 8001160:	b168      	cbz	r0, 800117e <print+0x22>
  size_t size = strlen(str);
 8001162:	f7ff f855 	bl	8000210 <strlen>
 8001166:	4605      	mov	r5, r0
 8001168:	1826      	adds	r6, r4, r0
  while (size--) {
 800116a:	42b4      	cmp	r4, r6
 800116c:	d101      	bne.n	8001172 <print+0x16>
}
 800116e:	4628      	mov	r0, r5
 8001170:	bd70      	pop	{r4, r5, r6, pc}
  send(value, GPIO_PIN_SET);
 8001172:	2101      	movs	r1, #1
 8001174:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001178:	f7ff fe54 	bl	8000e24 <send>
 800117c:	e7f5      	b.n	800116a <print+0xe>
  if (str == NULL) return 0;
 800117e:	4605      	mov	r5, r0
 8001180:	e7f5      	b.n	800116e <print+0x12>
	...

08001184 <GetDesiredPeriod>:

int GetDesiredPeriod(int DesiredDelay,int currentPrescaler)//seconds(desired second for period)
{
	int clockspeed = 8000000;//clock speed not sure how to get will change
	int period = 0;
	period = ((DesiredDelay * clockspeed) / (currentPrescaler + 1))-1;
 8001184:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <GetDesiredPeriod+0x1c>)
 8001186:	3101      	adds	r1, #1
 8001188:	4358      	muls	r0, r3
 800118a:	fb90 f0f1 	sdiv	r0, r0, r1

	if(period > INT_16BIT_MAX)
		period = INT_16BIT_MAX - 1;

	return period;
}
 800118e:	f64f 73ff 	movw	r3, #65535	; 0xffff
	period = ((DesiredDelay * clockspeed) / (currentPrescaler + 1))-1;
 8001192:	3801      	subs	r0, #1
}
 8001194:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8001198:	bfc8      	it	gt
 800119a:	4618      	movgt	r0, r3
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	007a1200 	.word	0x007a1200

080011a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011a4:	b500      	push	{lr}
 80011a6:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011a8:	2228      	movs	r2, #40	; 0x28
 80011aa:	2100      	movs	r1, #0
 80011ac:	a806      	add	r0, sp, #24
 80011ae:	f000 fab5 	bl	800171c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011b2:	2214      	movs	r2, #20
 80011b4:	2100      	movs	r1, #0
 80011b6:	a801      	add	r0, sp, #4
 80011b8:	f000 fab0 	bl	800171c <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011bc:	2302      	movs	r3, #2
 80011be:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011c0:	2301      	movs	r3, #1
 80011c2:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011c4:	2310      	movs	r3, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011c6:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011c8:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ca:	f7ff f9e7 	bl	800059c <HAL_RCC_OscConfig>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80011ce:	2100      	movs	r1, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011d0:	230f      	movs	r3, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011d2:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011d4:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80011d6:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011d8:	9103      	str	r1, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011da:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011dc:	9105      	str	r1, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011de:	f7ff fbbf 	bl	8000960 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 80011e2:	b011      	add	sp, #68	; 0x44
 80011e4:	f85d fb04 	ldr.w	pc, [sp], #4

080011e8 <main>:
{
 80011e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011ec:	b094      	sub	sp, #80	; 0x50
  HAL_Init();
 80011ee:	f7ff f83b 	bl	8000268 <HAL_Init>
  SystemClock_Config();
 80011f2:	f7ff ffd7 	bl	80011a4 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f6:	2210      	movs	r2, #16
 80011f8:	2100      	movs	r1, #0
 80011fa:	a807      	add	r0, sp, #28
 80011fc:	f000 fa8e 	bl	800171c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001200:	4b66      	ldr	r3, [pc, #408]	; (800139c <main+0x1b4>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3|LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001202:	f44f 7142 	mov.w	r1, #776	; 0x308
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001206:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3|LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001208:	4865      	ldr	r0, [pc, #404]	; (80013a0 <main+0x1b8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800120a:	f042 0210 	orr.w	r2, r2, #16
 800120e:	619a      	str	r2, [r3, #24]
 8001210:	699a      	ldr	r2, [r3, #24]
                          |GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001212:	2502      	movs	r5, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001214:	f002 0210 	and.w	r2, r2, #16
 8001218:	9204      	str	r2, [sp, #16]
 800121a:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800121c:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : PC3 LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_3|LD4_Pin|LD3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2400      	movs	r4, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001220:	f042 0220 	orr.w	r2, r2, #32
 8001224:	619a      	str	r2, [r3, #24]
 8001226:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001228:	2601      	movs	r6, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800122a:	f002 0220 	and.w	r2, r2, #32
 800122e:	9205      	str	r2, [sp, #20]
 8001230:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001232:	699a      	ldr	r2, [r3, #24]
		int size1 = sprintf(str, "timer%s %-2d %-3d", currectTimerState == 0? "Off" : "On", currentTimer, timersTic[currectTimerState][currentTimer]);
 8001234:	4f5b      	ldr	r7, [pc, #364]	; (80013a4 <main+0x1bc>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001236:	f042 0204 	orr.w	r2, r2, #4
 800123a:	619a      	str	r2, [r3, #24]
 800123c:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3|LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 800123e:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001240:	f003 0304 	and.w	r3, r3, #4
 8001244:	9306      	str	r3, [sp, #24]
 8001246:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3|LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001248:	f7ff f990 	bl	800056c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800124c:	2200      	movs	r2, #0
 800124e:	f44f 411f 	mov.w	r1, #40704	; 0x9f00
 8001252:	4855      	ldr	r0, [pc, #340]	; (80013a8 <main+0x1c0>)
 8001254:	f7ff f98a 	bl	800056c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001258:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800125c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800125e:	4b53      	ldr	r3, [pc, #332]	; (80013ac <main+0x1c4>)
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001260:	a907      	add	r1, sp, #28
 8001262:	484f      	ldr	r0, [pc, #316]	; (80013a0 <main+0x1b8>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001264:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001266:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001268:	f7ff f898 	bl	800039c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_3|LD4_Pin|LD3_Pin;
 800126c:	f44f 7342 	mov.w	r3, #776	; 0x308
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001270:	a907      	add	r1, sp, #28
 8001272:	484b      	ldr	r0, [pc, #300]	; (80013a0 <main+0x1b8>)
  GPIO_InitStruct.Pin = GPIO_PIN_3|LD4_Pin|LD3_Pin;
 8001274:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001278:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127a:	9608      	str	r6, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800127c:	f7ff f88e 	bl	800039c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11 
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8001280:	f44f 431f 	mov.w	r3, #40704	; 0x9f00
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001284:	a907      	add	r1, sp, #28
 8001286:	4848      	ldr	r0, [pc, #288]	; (80013a8 <main+0x1c0>)
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8001288:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128c:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800128e:	9608      	str	r6, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001290:	f7ff f884 	bl	800039c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001294:	4622      	mov	r2, r4
 8001296:	4621      	mov	r1, r4
 8001298:	2028      	movs	r0, #40	; 0x28
 800129a:	f7ff f827 	bl	80002ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800129e:	2028      	movs	r0, #40	; 0x28
 80012a0:	f7ff f858 	bl	8000354 <HAL_NVIC_EnableIRQ>
  int period = GetDesiredPeriod(10,prescaler);
 80012a4:	f242 7110 	movw	r1, #10000	; 0x2710
 80012a8:	200a      	movs	r0, #10
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012aa:	9407      	str	r4, [sp, #28]
 80012ac:	9408      	str	r4, [sp, #32]
  int period = GetDesiredPeriod(10,prescaler);
 80012ae:	f7ff ff69 	bl	8001184 <GetDesiredPeriod>
  htim7.Init.Prescaler = prescaler;
 80012b2:	f242 7310 	movw	r3, #10000	; 0x2710
  htim7.Instance = TIM7;
 80012b6:	4d3e      	ldr	r5, [pc, #248]	; (80013b0 <main+0x1c8>)
  htim7.Init.Prescaler = prescaler;
 80012b8:	4a3e      	ldr	r2, [pc, #248]	; (80013b4 <main+0x1cc>)
  htim7.Init.Period = period;
 80012ba:	60e8      	str	r0, [r5, #12]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80012bc:	4628      	mov	r0, r5
  htim7.Init.Prescaler = prescaler;
 80012be:	e885 000c 	stmia.w	r5, {r2, r3}
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c2:	60ac      	str	r4, [r5, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012c4:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80012c6:	f7ff fcc5 	bl	8000c54 <HAL_TIM_Base_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80012ca:	a907      	add	r1, sp, #28
 80012cc:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ce:	9407      	str	r4, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012d0:	9408      	str	r4, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80012d2:	f7ff fcd9 	bl	8000c88 <HAL_TIMEx_MasterConfigSynchronization>
  HAL_TIM_Base_Start_IT(&htim7);
 80012d6:	4628      	mov	r0, r5
 80012d8:	f7ff fbb2 	bl	8000a40 <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,1);//set high to keep current going through NO(Normally Open)
 80012dc:	4632      	mov	r2, r6
 80012de:	2108      	movs	r1, #8
 80012e0:	482f      	ldr	r0, [pc, #188]	; (80013a0 <main+0x1b8>)
 80012e2:	f7ff f943 	bl	800056c <HAL_GPIO_WritePin>
  LiquidCrystal(GPIOA, GPIO_PIN_15, 0, GPIO_PIN_12, GPIO_PIN_11, GPIO_PIN_10, GPIO_PIN_9, GPIO_PIN_8);
 80012e6:	f44f 7580 	mov.w	r5, #256	; 0x100
 80012ea:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80012ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012f6:	4622      	mov	r2, r4
  displayChange = true;
 80012f8:	4c2f      	ldr	r4, [pc, #188]	; (80013b8 <main+0x1d0>)
  LiquidCrystal(GPIOA, GPIO_PIN_15, 0, GPIO_PIN_12, GPIO_PIN_11, GPIO_PIN_10, GPIO_PIN_9, GPIO_PIN_8);
 80012fa:	e88d 002b 	stmia.w	sp, {r0, r1, r3, r5}
		int size1 = sprintf(str, "timer%s %-2d %-3d", currectTimerState == 0? "Off" : "On", currentTimer, timersTic[currectTimerState][currentTimer]);
 80012fe:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80013d0 <main+0x1e8>
  LiquidCrystal(GPIOA, GPIO_PIN_15, 0, GPIO_PIN_12, GPIO_PIN_11, GPIO_PIN_10, GPIO_PIN_9, GPIO_PIN_8);
 8001302:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001306:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800130a:	4827      	ldr	r0, [pc, #156]	; (80013a8 <main+0x1c0>)
 800130c:	f7ff feec 	bl	80010e8 <LiquidCrystal>
  displayChange = true;
 8001310:	7026      	strb	r6, [r4, #0]
	  if(displayChange)
 8001312:	7823      	ldrb	r3, [r4, #0]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d03e      	beq.n	8001396 <main+0x1ae>
		displayChange = false;
 8001318:	2600      	movs	r6, #0
		int size1 = sprintf(str, "timer%s %-2d %-3d", currectTimerState == 0? "Off" : "On", currentTimer, timersTic[currectTimerState][currentTimer]);
 800131a:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80013d4 <main+0x1ec>
		setCursor(0, 0);
 800131e:	4631      	mov	r1, r6
 8001320:	4630      	mov	r0, r6
		displayChange = false;
 8001322:	7026      	strb	r6, [r4, #0]
		setCursor(0, 0);
 8001324:	f7ff fdb4 	bl	8000e90 <setCursor>
		int size1 = sprintf(str, "timer%s %-2d %-3d", currectTimerState == 0? "Off" : "On", currentTimer, timersTic[currectTimerState][currentTimer]);
 8001328:	f8da 3000 	ldr.w	r3, [sl]
 800132c:	683a      	ldr	r2, [r7, #0]
 800132e:	4923      	ldr	r1, [pc, #140]	; (80013bc <main+0x1d4>)
 8001330:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 8001334:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8001338:	f8df 909c 	ldr.w	r9, [pc, #156]	; 80013d8 <main+0x1f0>
 800133c:	9100      	str	r1, [sp, #0]
 800133e:	42b2      	cmp	r2, r6
 8001340:	bf0c      	ite	eq
 8001342:	4642      	moveq	r2, r8
 8001344:	464a      	movne	r2, r9
 8001346:	491e      	ldr	r1, [pc, #120]	; (80013c0 <main+0x1d8>)
 8001348:	a807      	add	r0, sp, #28
 800134a:	f000 f9ef 	bl	800172c <siprintf>
 800134e:	4605      	mov	r5, r0
		print(str);
 8001350:	a807      	add	r0, sp, #28
 8001352:	f7ff ff03 	bl	800115c <print>
		setCursor(0, 1);
 8001356:	2101      	movs	r1, #1
 8001358:	4630      	mov	r0, r6
 800135a:	f7ff fd99 	bl	8000e90 <setCursor>
		int size2 = sprintf(str, "type%s %-2d %-3d", currectTimerState == 0? "Off" : "On", currentTimer, timersType[currectTimerState][currentTimer]);
 800135e:	683a      	ldr	r2, [r7, #0]
 8001360:	4918      	ldr	r1, [pc, #96]	; (80013c4 <main+0x1dc>)
 8001362:	f8da 3000 	ldr.w	r3, [sl]
 8001366:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800136a:	5cc9      	ldrb	r1, [r1, r3]
 800136c:	42b2      	cmp	r2, r6
 800136e:	bf0c      	ite	eq
 8001370:	4642      	moveq	r2, r8
 8001372:	464a      	movne	r2, r9
 8001374:	9100      	str	r1, [sp, #0]
 8001376:	a807      	add	r0, sp, #28
 8001378:	4913      	ldr	r1, [pc, #76]	; (80013c8 <main+0x1e0>)
 800137a:	f000 f9d7 	bl	800172c <siprintf>
 800137e:	4606      	mov	r6, r0
		print(str);
 8001380:	a807      	add	r0, sp, #28
 8001382:	f7ff feeb 	bl	800115c <print>
		setCursor((timerState? size2 : size1) - 3, timerState);
 8001386:	4b11      	ldr	r3, [pc, #68]	; (80013cc <main+0x1e4>)
 8001388:	7819      	ldrb	r1, [r3, #0]
 800138a:	b129      	cbz	r1, 8001398 <main+0x1b0>
 800138c:	1ef0      	subs	r0, r6, #3
 800138e:	f7ff fd7f 	bl	8000e90 <setCursor>
		blink();
 8001392:	f7ff fed7 	bl	8001144 <blink>
	  if(displayChange)
 8001396:	e7bc      	b.n	8001312 <main+0x12a>
		setCursor((timerState? size2 : size1) - 3, timerState);
 8001398:	1ee8      	subs	r0, r5, #3
 800139a:	e7f8      	b.n	800138e <main+0x1a6>
 800139c:	40021000 	.word	0x40021000
 80013a0:	40011000 	.word	0x40011000
 80013a4:	20000100 	.word	0x20000100
 80013a8:	40010800 	.word	0x40010800
 80013ac:	10110000 	.word	0x10110000
 80013b0:	20000108 	.word	0x20000108
 80013b4:	40001400 	.word	0x40001400
 80013b8:	200000fc 	.word	0x200000fc
 80013bc:	200000a0 	.word	0x200000a0
 80013c0:	08001fc3 	.word	0x08001fc3
 80013c4:	20000010 	.word	0x20000010
 80013c8:	08001fd5 	.word	0x08001fd5
 80013cc:	20000104 	.word	0x20000104
 80013d0:	08001fbc 	.word	0x08001fbc
 80013d4:	200000f8 	.word	0x200000f8
 80013d8:	08001fc0 	.word	0x08001fc0

080013dc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013dc:	4b0e      	ldr	r3, [pc, #56]	; (8001418 <HAL_MspInit+0x3c>)
{
 80013de:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80013e0:	699a      	ldr	r2, [r3, #24]
 80013e2:	f042 0201 	orr.w	r2, r2, #1
 80013e6:	619a      	str	r2, [r3, #24]
 80013e8:	699a      	ldr	r2, [r3, #24]
 80013ea:	f002 0201 	and.w	r2, r2, #1
 80013ee:	9200      	str	r2, [sp, #0]
 80013f0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013f2:	69da      	ldr	r2, [r3, #28]
 80013f4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80013f8:	61da      	str	r2, [r3, #28]
 80013fa:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80013fc:	4a07      	ldr	r2, [pc, #28]	; (800141c <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80013fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001402:	9301      	str	r3, [sp, #4]
 8001404:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001406:	6853      	ldr	r3, [r2, #4]
 8001408:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800140c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001410:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001412:	b002      	add	sp, #8
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	40021000 	.word	0x40021000
 800141c:	40010000 	.word	0x40010000

08001420 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001420:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM7)
 8001422:	4b0d      	ldr	r3, [pc, #52]	; (8001458 <HAL_TIM_Base_MspInit+0x38>)
 8001424:	6802      	ldr	r2, [r0, #0]
 8001426:	429a      	cmp	r2, r3
 8001428:	d112      	bne.n	8001450 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800142a:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
 800142e:	69da      	ldr	r2, [r3, #28]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001430:	2037      	movs	r0, #55	; 0x37
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001432:	f042 0220 	orr.w	r2, r2, #32
 8001436:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001438:	2200      	movs	r2, #0
    __HAL_RCC_TIM7_CLK_ENABLE();
 800143a:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800143c:	4611      	mov	r1, r2
    __HAL_RCC_TIM7_CLK_ENABLE();
 800143e:	f003 0320 	and.w	r3, r3, #32
 8001442:	9301      	str	r3, [sp, #4]
 8001444:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001446:	f7fe ff51 	bl	80002ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800144a:	2037      	movs	r0, #55	; 0x37
 800144c:	f7fe ff82 	bl	8000354 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001450:	b003      	add	sp, #12
 8001452:	f85d fb04 	ldr.w	pc, [sp], #4
 8001456:	bf00      	nop
 8001458:	40001400 	.word	0x40001400

0800145c <NMI_Handler>:
 800145c:	4770      	bx	lr

0800145e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800145e:	e7fe      	b.n	800145e <HardFault_Handler>

08001460 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001460:	e7fe      	b.n	8001460 <MemManage_Handler>

08001462 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001462:	e7fe      	b.n	8001462 <BusFault_Handler>

08001464 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001464:	e7fe      	b.n	8001464 <UsageFault_Handler>

08001466 <SVC_Handler>:
 8001466:	4770      	bx	lr

08001468 <DebugMon_Handler>:
 8001468:	4770      	bx	lr

0800146a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800146a:	4770      	bx	lr

0800146c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800146c:	f7fe bf08 	b.w	8000280 <HAL_IncTick>

08001470 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	int read_10 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10);
 8001472:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001476:	4849      	ldr	r0, [pc, #292]	; (800159c <EXTI15_10_IRQHandler+0x12c>)
 8001478:	f7ff f872 	bl	8000560 <HAL_GPIO_ReadPin>
	int read_11 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11);
 800147c:	f44f 6100 	mov.w	r1, #2048	; 0x800
	int read_10 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10);
 8001480:	4605      	mov	r5, r0
	int read_11 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11);
 8001482:	4846      	ldr	r0, [pc, #280]	; (800159c <EXTI15_10_IRQHandler+0x12c>)
 8001484:	f7ff f86c 	bl	8000560 <HAL_GPIO_ReadPin>
	int read_12 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_12);
 8001488:	f44f 5180 	mov.w	r1, #4096	; 0x1000
	int read_11 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11);
 800148c:	4606      	mov	r6, r0
	int read_12 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_12);
 800148e:	4843      	ldr	r0, [pc, #268]	; (800159c <EXTI15_10_IRQHandler+0x12c>)
 8001490:	f7ff f866 	bl	8000560 <HAL_GPIO_ReadPin>
	int read_15 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8001494:	f44f 5100 	mov.w	r1, #8192	; 0x2000
	int read_12 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_12);
 8001498:	4604      	mov	r4, r0
	int read_15 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 800149a:	4840      	ldr	r0, [pc, #256]	; (800159c <EXTI15_10_IRQHandler+0x12c>)
 800149c:	f7ff f860 	bl	8000560 <HAL_GPIO_ReadPin>

	if(read_10)
 80014a0:	b135      	cbz	r5, 80014b0 <EXTI15_10_IRQHandler+0x40>
	{
		timerState++;
 80014a2:	4a3f      	ldr	r2, [pc, #252]	; (80015a0 <EXTI15_10_IRQHandler+0x130>)
 80014a4:	7813      	ldrb	r3, [r2, #0]
 80014a6:	3301      	adds	r3, #1
 80014a8:	b2db      	uxtb	r3, r3
		if(timerState > type)
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d824      	bhi.n	80014f8 <EXTI15_10_IRQHandler+0x88>
		timerState++;
 80014ae:	7013      	strb	r3, [r2, #0]
					currentTimer = 0;
				}
			}
		}
	}
	if(read_12)
 80014b0:	2c00      	cmp	r4, #0
 80014b2:	d034      	beq.n	800151e <EXTI15_10_IRQHandler+0xae>
	{
		if(timerState == tic)
 80014b4:	4b3a      	ldr	r3, [pc, #232]	; (80015a0 <EXTI15_10_IRQHandler+0x130>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d138      	bne.n	800152e <EXTI15_10_IRQHandler+0xbe>
		{
			timersTic[currectTimerState][currentTimer]++;
 80014bc:	4b39      	ldr	r3, [pc, #228]	; (80015a4 <EXTI15_10_IRQHandler+0x134>)
 80014be:	493a      	ldr	r1, [pc, #232]	; (80015a8 <EXTI15_10_IRQHandler+0x138>)
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	4b3a      	ldr	r3, [pc, #232]	; (80015ac <EXTI15_10_IRQHandler+0x13c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80014ca:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 80014ce:	3201      	adds	r2, #1
 80014d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		{
			timersType[currectTimerState][currentTimer]++;
		}
	}

	if(read_15)
 80014d4:	2800      	cmp	r0, #0
 80014d6:	d043      	beq.n	8001560 <EXTI15_10_IRQHandler+0xf0>
	{
		if(timerState == tic)
		{
			timersTic[currectTimerState][currentTimer]--;
 80014d8:	4b32      	ldr	r3, [pc, #200]	; (80015a4 <EXTI15_10_IRQHandler+0x134>)
 80014da:	4933      	ldr	r1, [pc, #204]	; (80015a8 <EXTI15_10_IRQHandler+0x138>)
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	4b33      	ldr	r3, [pc, #204]	; (80015ac <EXTI15_10_IRQHandler+0x13c>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80014e6:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 80014ea:	3a01      	subs	r2, #1
 80014ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
	}

	if(read_15 || read_12 || read_11 || read_10)
	{
		displayChange = true;
 80014f0:	2201      	movs	r2, #1
 80014f2:	4b2f      	ldr	r3, [pc, #188]	; (80015b0 <EXTI15_10_IRQHandler+0x140>)
 80014f4:	701a      	strb	r2, [r3, #0]
 80014f6:	e039      	b.n	800156c <EXTI15_10_IRQHandler+0xfc>
			timerState = tic;
 80014f8:	2100      	movs	r1, #0
 80014fa:	7011      	strb	r1, [r2, #0]
			currectTimerState++;
 80014fc:	4a29      	ldr	r2, [pc, #164]	; (80015a4 <EXTI15_10_IRQHandler+0x134>)
 80014fe:	6813      	ldr	r3, [r2, #0]
 8001500:	3301      	adds	r3, #1
			if(currectTimerState > 1)
 8001502:	2b01      	cmp	r3, #1
 8001504:	dd44      	ble.n	8001590 <EXTI15_10_IRQHandler+0x120>
				currectTimerState = 0;
 8001506:	6011      	str	r1, [r2, #0]
				currentTimer++;
 8001508:	4a28      	ldr	r2, [pc, #160]	; (80015ac <EXTI15_10_IRQHandler+0x13c>)
				if(currentTimer >= timerCount)
 800150a:	4f2a      	ldr	r7, [pc, #168]	; (80015b4 <EXTI15_10_IRQHandler+0x144>)
				currentTimer++;
 800150c:	6813      	ldr	r3, [r2, #0]
				if(currentTimer >= timerCount)
 800150e:	683f      	ldr	r7, [r7, #0]
				currentTimer++;
 8001510:	3301      	adds	r3, #1
				if(currentTimer >= timerCount)
 8001512:	42bb      	cmp	r3, r7
				currentTimer++;
 8001514:	6013      	str	r3, [r2, #0]
				if(currentTimer >= timerCount)
 8001516:	db00      	blt.n	800151a <EXTI15_10_IRQHandler+0xaa>
					currentTimer = 0;
 8001518:	6011      	str	r1, [r2, #0]
	if(read_12)
 800151a:	2c00      	cmp	r4, #0
 800151c:	d1ce      	bne.n	80014bc <EXTI15_10_IRQHandler+0x4c>
	if(read_15)
 800151e:	b308      	cbz	r0, 8001564 <EXTI15_10_IRQHandler+0xf4>
		if(timerState == tic)
 8001520:	4b1f      	ldr	r3, [pc, #124]	; (80015a0 <EXTI15_10_IRQHandler+0x130>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d0d7      	beq.n	80014d8 <EXTI15_10_IRQHandler+0x68>
		}else if(timerState == type)
 8001528:	2b01      	cmp	r3, #1
 800152a:	d1e1      	bne.n	80014f0 <EXTI15_10_IRQHandler+0x80>
 800152c:	e00d      	b.n	800154a <EXTI15_10_IRQHandler+0xda>
		}else if(timerState == type)
 800152e:	2b01      	cmp	r3, #1
 8001530:	d130      	bne.n	8001594 <EXTI15_10_IRQHandler+0x124>
			timersType[currectTimerState][currentTimer]++;
 8001532:	4b1c      	ldr	r3, [pc, #112]	; (80015a4 <EXTI15_10_IRQHandler+0x134>)
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	4b1d      	ldr	r3, [pc, #116]	; (80015ac <EXTI15_10_IRQHandler+0x13c>)
 8001538:	6819      	ldr	r1, [r3, #0]
 800153a:	4b1f      	ldr	r3, [pc, #124]	; (80015b8 <EXTI15_10_IRQHandler+0x148>)
 800153c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001540:	5c5a      	ldrb	r2, [r3, r1]
 8001542:	3201      	adds	r2, #1
 8001544:	545a      	strb	r2, [r3, r1]
	if(read_15)
 8001546:	2800      	cmp	r0, #0
 8001548:	d0d2      	beq.n	80014f0 <EXTI15_10_IRQHandler+0x80>
			timersType[currectTimerState][currentTimer]--;
 800154a:	4b16      	ldr	r3, [pc, #88]	; (80015a4 <EXTI15_10_IRQHandler+0x134>)
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	4b17      	ldr	r3, [pc, #92]	; (80015ac <EXTI15_10_IRQHandler+0x13c>)
 8001550:	6819      	ldr	r1, [r3, #0]
 8001552:	4b19      	ldr	r3, [pc, #100]	; (80015b8 <EXTI15_10_IRQHandler+0x148>)
 8001554:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001558:	5c5a      	ldrb	r2, [r3, r1]
 800155a:	3a01      	subs	r2, #1
 800155c:	545a      	strb	r2, [r3, r1]
 800155e:	e7c7      	b.n	80014f0 <EXTI15_10_IRQHandler+0x80>
	if(read_15 || read_12 || read_11 || read_10)
 8001560:	2c00      	cmp	r4, #0
 8001562:	d1c5      	bne.n	80014f0 <EXTI15_10_IRQHandler+0x80>
 8001564:	2e00      	cmp	r6, #0
 8001566:	d1c3      	bne.n	80014f0 <EXTI15_10_IRQHandler+0x80>
 8001568:	2d00      	cmp	r5, #0
 800156a:	d1c1      	bne.n	80014f0 <EXTI15_10_IRQHandler+0x80>
	}

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800156c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001570:	f7ff f808 	bl	8000584 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001574:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001578:	f7ff f804 	bl	8000584 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800157c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001580:	f7ff f800 	bl	8000584 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001584:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001588:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800158c:	f7fe bffa 	b.w	8000584 <HAL_GPIO_EXTI_IRQHandler>
			currectTimerState++;
 8001590:	6013      	str	r3, [r2, #0]
 8001592:	e7c2      	b.n	800151a <EXTI15_10_IRQHandler+0xaa>
	if(read_15)
 8001594:	2800      	cmp	r0, #0
 8001596:	d1c3      	bne.n	8001520 <EXTI15_10_IRQHandler+0xb0>
 8001598:	e7aa      	b.n	80014f0 <EXTI15_10_IRQHandler+0x80>
 800159a:	bf00      	nop
 800159c:	40011000 	.word	0x40011000
 80015a0:	20000104 	.word	0x20000104
 80015a4:	20000100 	.word	0x20000100
 80015a8:	200000a0 	.word	0x200000a0
 80015ac:	200000f8 	.word	0x200000f8
 80015b0:	200000fc 	.word	0x200000fc
 80015b4:	2000000c 	.word	0x2000000c
 80015b8:	20000010 	.word	0x20000010

080015bc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80015bc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM7_IRQn 0 */
  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_3);
 80015be:	2108      	movs	r1, #8
 80015c0:	480a      	ldr	r0, [pc, #40]	; (80015ec <TIM7_IRQHandler+0x30>)
 80015c2:	f7fe ffd8 	bl	8000576 <HAL_GPIO_TogglePin>
  int read = HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_3);
 80015c6:	2108      	movs	r1, #8
 80015c8:	4808      	ldr	r0, [pc, #32]	; (80015ec <TIM7_IRQHandler+0x30>)
 80015ca:	f7fe ffc9 	bl	8000560 <HAL_GPIO_ReadPin>
 80015ce:	4c08      	ldr	r4, [pc, #32]	; (80015f0 <TIM7_IRQHandler+0x34>)
  if(read == 1)//timer set when on(relay off)
 80015d0:	2801      	cmp	r0, #1
  {
	  TIM7->ARR = GetDesiredPeriod(30,TIM7->PSC);
 80015d2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80015d4:	bf0c      	ite	eq
 80015d6:	201e      	moveq	r0, #30
	  //TIM7->EGR = TIM_EGR_UG;//does not seem to be needed
  }else//timer set for off(relay on)
  {
	  TIM7->ARR = GetDesiredPeriod(50,TIM7->PSC);
 80015d8:	2032      	movne	r0, #50	; 0x32
 80015da:	f7ff fdd3 	bl	8001184 <GetDesiredPeriod>
 80015de:	62e0      	str	r0, [r4, #44]	; 0x2c
	  //TIM7->EGR = TIM_EGR_UG;//does not seem to be needed
  }
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80015e0:	4804      	ldr	r0, [pc, #16]	; (80015f4 <TIM7_IRQHandler+0x38>)
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80015e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_TIM_IRQHandler(&htim7);
 80015e6:	f7ff ba40 	b.w	8000a6a <HAL_TIM_IRQHandler>
 80015ea:	bf00      	nop
 80015ec:	40011000 	.word	0x40011000
 80015f0:	40001400 	.word	0x40001400
 80015f4:	20000108 	.word	0x20000108

080015f8 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80015f8:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80015fa:	4b0a      	ldr	r3, [pc, #40]	; (8001624 <_sbrk+0x2c>)
{
 80015fc:	4602      	mov	r2, r0
	if (heap_end == 0)
 80015fe:	6819      	ldr	r1, [r3, #0]
 8001600:	b909      	cbnz	r1, 8001606 <_sbrk+0xe>
		heap_end = &end;
 8001602:	4909      	ldr	r1, [pc, #36]	; (8001628 <_sbrk+0x30>)
 8001604:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8001606:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8001608:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 800160a:	4402      	add	r2, r0
 800160c:	428a      	cmp	r2, r1
 800160e:	d906      	bls.n	800161e <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001610:	f000 f85a 	bl	80016c8 <__errno>
 8001614:	230c      	movs	r3, #12
 8001616:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8001618:	f04f 30ff 	mov.w	r0, #4294967295
 800161c:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 800161e:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8001620:	bd08      	pop	{r3, pc}
 8001622:	bf00      	nop
 8001624:	200000c0 	.word	0x200000c0
 8001628:	2000014c 	.word	0x2000014c

0800162c <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800162c:	4b10      	ldr	r3, [pc, #64]	; (8001670 <SystemInit+0x44>)
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	f042 0201 	orr.w	r2, r2, #1
 8001634:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001636:	6859      	ldr	r1, [r3, #4]
 8001638:	4a0e      	ldr	r2, [pc, #56]	; (8001674 <SystemInit+0x48>)
 800163a:	400a      	ands	r2, r1
 800163c:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001644:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001648:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001650:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001652:	685a      	ldr	r2, [r3, #4]
 8001654:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001658:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;
#elif defined(STM32F100xB) || defined(STM32F100xE)
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800165a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800165e:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
 8001660:	2200      	movs	r2, #0
 8001662:	62da      	str	r2, [r3, #44]	; 0x2c
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001664:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001668:	4b03      	ldr	r3, [pc, #12]	; (8001678 <SystemInit+0x4c>)
 800166a:	609a      	str	r2, [r3, #8]
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	40021000 	.word	0x40021000
 8001674:	f8ff0000 	.word	0xf8ff0000
 8001678:	e000ed00 	.word	0xe000ed00

0800167c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800167c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800167e:	e003      	b.n	8001688 <LoopCopyDataInit>

08001680 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001680:	4b0b      	ldr	r3, [pc, #44]	; (80016b0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001682:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001684:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001686:	3104      	adds	r1, #4

08001688 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001688:	480a      	ldr	r0, [pc, #40]	; (80016b4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800168a:	4b0b      	ldr	r3, [pc, #44]	; (80016b8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800168c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800168e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001690:	d3f6      	bcc.n	8001680 <CopyDataInit>
  ldr r2, =_sbss
 8001692:	4a0a      	ldr	r2, [pc, #40]	; (80016bc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001694:	e002      	b.n	800169c <LoopFillZerobss>

08001696 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001696:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001698:	f842 3b04 	str.w	r3, [r2], #4

0800169c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800169c:	4b08      	ldr	r3, [pc, #32]	; (80016c0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800169e:	429a      	cmp	r2, r3
  bcc FillZerobss
 80016a0:	d3f9      	bcc.n	8001696 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80016a2:	f7ff ffc3 	bl	800162c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016a6:	f000 f815 	bl	80016d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016aa:	f7ff fd9d 	bl	80011e8 <main>
  bx lr
 80016ae:	4770      	bx	lr
  ldr r3, =_sidata
 80016b0:	08002034 	.word	0x08002034
  ldr r0, =_sdata
 80016b4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80016b8:	20000080 	.word	0x20000080
  ldr r2, =_sbss
 80016bc:	20000080 	.word	0x20000080
  ldr r3, = _ebss
 80016c0:	2000014c 	.word	0x2000014c

080016c4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016c4:	e7fe      	b.n	80016c4 <ADC1_IRQHandler>
	...

080016c8 <__errno>:
 80016c8:	4b01      	ldr	r3, [pc, #4]	; (80016d0 <__errno+0x8>)
 80016ca:	6818      	ldr	r0, [r3, #0]
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	2000001c 	.word	0x2000001c

080016d4 <__libc_init_array>:
 80016d4:	b570      	push	{r4, r5, r6, lr}
 80016d6:	2500      	movs	r5, #0
 80016d8:	4e0c      	ldr	r6, [pc, #48]	; (800170c <__libc_init_array+0x38>)
 80016da:	4c0d      	ldr	r4, [pc, #52]	; (8001710 <__libc_init_array+0x3c>)
 80016dc:	1ba4      	subs	r4, r4, r6
 80016de:	10a4      	asrs	r4, r4, #2
 80016e0:	42a5      	cmp	r5, r4
 80016e2:	d109      	bne.n	80016f8 <__libc_init_array+0x24>
 80016e4:	f000 fc4e 	bl	8001f84 <_init>
 80016e8:	2500      	movs	r5, #0
 80016ea:	4e0a      	ldr	r6, [pc, #40]	; (8001714 <__libc_init_array+0x40>)
 80016ec:	4c0a      	ldr	r4, [pc, #40]	; (8001718 <__libc_init_array+0x44>)
 80016ee:	1ba4      	subs	r4, r4, r6
 80016f0:	10a4      	asrs	r4, r4, #2
 80016f2:	42a5      	cmp	r5, r4
 80016f4:	d105      	bne.n	8001702 <__libc_init_array+0x2e>
 80016f6:	bd70      	pop	{r4, r5, r6, pc}
 80016f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80016fc:	4798      	blx	r3
 80016fe:	3501      	adds	r5, #1
 8001700:	e7ee      	b.n	80016e0 <__libc_init_array+0xc>
 8001702:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001706:	4798      	blx	r3
 8001708:	3501      	adds	r5, #1
 800170a:	e7f2      	b.n	80016f2 <__libc_init_array+0x1e>
 800170c:	0800202c 	.word	0x0800202c
 8001710:	0800202c 	.word	0x0800202c
 8001714:	0800202c 	.word	0x0800202c
 8001718:	08002030 	.word	0x08002030

0800171c <memset>:
 800171c:	4603      	mov	r3, r0
 800171e:	4402      	add	r2, r0
 8001720:	4293      	cmp	r3, r2
 8001722:	d100      	bne.n	8001726 <memset+0xa>
 8001724:	4770      	bx	lr
 8001726:	f803 1b01 	strb.w	r1, [r3], #1
 800172a:	e7f9      	b.n	8001720 <memset+0x4>

0800172c <siprintf>:
 800172c:	b40e      	push	{r1, r2, r3}
 800172e:	f44f 7102 	mov.w	r1, #520	; 0x208
 8001732:	b500      	push	{lr}
 8001734:	b09c      	sub	sp, #112	; 0x70
 8001736:	f8ad 1014 	strh.w	r1, [sp, #20]
 800173a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800173e:	9104      	str	r1, [sp, #16]
 8001740:	9107      	str	r1, [sp, #28]
 8001742:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001746:	ab1d      	add	r3, sp, #116	; 0x74
 8001748:	9002      	str	r0, [sp, #8]
 800174a:	9006      	str	r0, [sp, #24]
 800174c:	4808      	ldr	r0, [pc, #32]	; (8001770 <siprintf+0x44>)
 800174e:	f853 2b04 	ldr.w	r2, [r3], #4
 8001752:	f8ad 1016 	strh.w	r1, [sp, #22]
 8001756:	6800      	ldr	r0, [r0, #0]
 8001758:	a902      	add	r1, sp, #8
 800175a:	9301      	str	r3, [sp, #4]
 800175c:	f000 f866 	bl	800182c <_svfiprintf_r>
 8001760:	2200      	movs	r2, #0
 8001762:	9b02      	ldr	r3, [sp, #8]
 8001764:	701a      	strb	r2, [r3, #0]
 8001766:	b01c      	add	sp, #112	; 0x70
 8001768:	f85d eb04 	ldr.w	lr, [sp], #4
 800176c:	b003      	add	sp, #12
 800176e:	4770      	bx	lr
 8001770:	2000001c 	.word	0x2000001c

08001774 <__ssputs_r>:
 8001774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001778:	688e      	ldr	r6, [r1, #8]
 800177a:	4682      	mov	sl, r0
 800177c:	429e      	cmp	r6, r3
 800177e:	460c      	mov	r4, r1
 8001780:	4691      	mov	r9, r2
 8001782:	4698      	mov	r8, r3
 8001784:	d835      	bhi.n	80017f2 <__ssputs_r+0x7e>
 8001786:	898a      	ldrh	r2, [r1, #12]
 8001788:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800178c:	d031      	beq.n	80017f2 <__ssputs_r+0x7e>
 800178e:	2302      	movs	r3, #2
 8001790:	6825      	ldr	r5, [r4, #0]
 8001792:	6909      	ldr	r1, [r1, #16]
 8001794:	1a6f      	subs	r7, r5, r1
 8001796:	6965      	ldr	r5, [r4, #20]
 8001798:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800179c:	fb95 f5f3 	sdiv	r5, r5, r3
 80017a0:	f108 0301 	add.w	r3, r8, #1
 80017a4:	443b      	add	r3, r7
 80017a6:	429d      	cmp	r5, r3
 80017a8:	bf38      	it	cc
 80017aa:	461d      	movcc	r5, r3
 80017ac:	0553      	lsls	r3, r2, #21
 80017ae:	d531      	bpl.n	8001814 <__ssputs_r+0xa0>
 80017b0:	4629      	mov	r1, r5
 80017b2:	f000 fb47 	bl	8001e44 <_malloc_r>
 80017b6:	4606      	mov	r6, r0
 80017b8:	b950      	cbnz	r0, 80017d0 <__ssputs_r+0x5c>
 80017ba:	230c      	movs	r3, #12
 80017bc:	f8ca 3000 	str.w	r3, [sl]
 80017c0:	89a3      	ldrh	r3, [r4, #12]
 80017c2:	f04f 30ff 	mov.w	r0, #4294967295
 80017c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017ca:	81a3      	strh	r3, [r4, #12]
 80017cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80017d0:	463a      	mov	r2, r7
 80017d2:	6921      	ldr	r1, [r4, #16]
 80017d4:	f000 fac4 	bl	8001d60 <memcpy>
 80017d8:	89a3      	ldrh	r3, [r4, #12]
 80017da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80017de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017e2:	81a3      	strh	r3, [r4, #12]
 80017e4:	6126      	str	r6, [r4, #16]
 80017e6:	443e      	add	r6, r7
 80017e8:	6026      	str	r6, [r4, #0]
 80017ea:	4646      	mov	r6, r8
 80017ec:	6165      	str	r5, [r4, #20]
 80017ee:	1bed      	subs	r5, r5, r7
 80017f0:	60a5      	str	r5, [r4, #8]
 80017f2:	4546      	cmp	r6, r8
 80017f4:	bf28      	it	cs
 80017f6:	4646      	movcs	r6, r8
 80017f8:	4649      	mov	r1, r9
 80017fa:	4632      	mov	r2, r6
 80017fc:	6820      	ldr	r0, [r4, #0]
 80017fe:	f000 faba 	bl	8001d76 <memmove>
 8001802:	68a3      	ldr	r3, [r4, #8]
 8001804:	2000      	movs	r0, #0
 8001806:	1b9b      	subs	r3, r3, r6
 8001808:	60a3      	str	r3, [r4, #8]
 800180a:	6823      	ldr	r3, [r4, #0]
 800180c:	441e      	add	r6, r3
 800180e:	6026      	str	r6, [r4, #0]
 8001810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001814:	462a      	mov	r2, r5
 8001816:	f000 fb73 	bl	8001f00 <_realloc_r>
 800181a:	4606      	mov	r6, r0
 800181c:	2800      	cmp	r0, #0
 800181e:	d1e1      	bne.n	80017e4 <__ssputs_r+0x70>
 8001820:	6921      	ldr	r1, [r4, #16]
 8001822:	4650      	mov	r0, sl
 8001824:	f000 fac2 	bl	8001dac <_free_r>
 8001828:	e7c7      	b.n	80017ba <__ssputs_r+0x46>
	...

0800182c <_svfiprintf_r>:
 800182c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001830:	b09d      	sub	sp, #116	; 0x74
 8001832:	9303      	str	r3, [sp, #12]
 8001834:	898b      	ldrh	r3, [r1, #12]
 8001836:	4680      	mov	r8, r0
 8001838:	061c      	lsls	r4, r3, #24
 800183a:	460d      	mov	r5, r1
 800183c:	4616      	mov	r6, r2
 800183e:	d50f      	bpl.n	8001860 <_svfiprintf_r+0x34>
 8001840:	690b      	ldr	r3, [r1, #16]
 8001842:	b96b      	cbnz	r3, 8001860 <_svfiprintf_r+0x34>
 8001844:	2140      	movs	r1, #64	; 0x40
 8001846:	f000 fafd 	bl	8001e44 <_malloc_r>
 800184a:	6028      	str	r0, [r5, #0]
 800184c:	6128      	str	r0, [r5, #16]
 800184e:	b928      	cbnz	r0, 800185c <_svfiprintf_r+0x30>
 8001850:	230c      	movs	r3, #12
 8001852:	f8c8 3000 	str.w	r3, [r8]
 8001856:	f04f 30ff 	mov.w	r0, #4294967295
 800185a:	e0c4      	b.n	80019e6 <_svfiprintf_r+0x1ba>
 800185c:	2340      	movs	r3, #64	; 0x40
 800185e:	616b      	str	r3, [r5, #20]
 8001860:	2300      	movs	r3, #0
 8001862:	9309      	str	r3, [sp, #36]	; 0x24
 8001864:	2320      	movs	r3, #32
 8001866:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800186a:	2330      	movs	r3, #48	; 0x30
 800186c:	f04f 0b01 	mov.w	fp, #1
 8001870:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001874:	4637      	mov	r7, r6
 8001876:	463c      	mov	r4, r7
 8001878:	f814 3b01 	ldrb.w	r3, [r4], #1
 800187c:	2b00      	cmp	r3, #0
 800187e:	d13c      	bne.n	80018fa <_svfiprintf_r+0xce>
 8001880:	ebb7 0a06 	subs.w	sl, r7, r6
 8001884:	d00b      	beq.n	800189e <_svfiprintf_r+0x72>
 8001886:	4653      	mov	r3, sl
 8001888:	4632      	mov	r2, r6
 800188a:	4629      	mov	r1, r5
 800188c:	4640      	mov	r0, r8
 800188e:	f7ff ff71 	bl	8001774 <__ssputs_r>
 8001892:	3001      	adds	r0, #1
 8001894:	f000 80a2 	beq.w	80019dc <_svfiprintf_r+0x1b0>
 8001898:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800189a:	4453      	add	r3, sl
 800189c:	9309      	str	r3, [sp, #36]	; 0x24
 800189e:	783b      	ldrb	r3, [r7, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	f000 809b 	beq.w	80019dc <_svfiprintf_r+0x1b0>
 80018a6:	2300      	movs	r3, #0
 80018a8:	f04f 32ff 	mov.w	r2, #4294967295
 80018ac:	9304      	str	r3, [sp, #16]
 80018ae:	9307      	str	r3, [sp, #28]
 80018b0:	9205      	str	r2, [sp, #20]
 80018b2:	9306      	str	r3, [sp, #24]
 80018b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80018b8:	931a      	str	r3, [sp, #104]	; 0x68
 80018ba:	2205      	movs	r2, #5
 80018bc:	7821      	ldrb	r1, [r4, #0]
 80018be:	4850      	ldr	r0, [pc, #320]	; (8001a00 <_svfiprintf_r+0x1d4>)
 80018c0:	f000 fa40 	bl	8001d44 <memchr>
 80018c4:	1c67      	adds	r7, r4, #1
 80018c6:	9b04      	ldr	r3, [sp, #16]
 80018c8:	b9d8      	cbnz	r0, 8001902 <_svfiprintf_r+0xd6>
 80018ca:	06d9      	lsls	r1, r3, #27
 80018cc:	bf44      	itt	mi
 80018ce:	2220      	movmi	r2, #32
 80018d0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80018d4:	071a      	lsls	r2, r3, #28
 80018d6:	bf44      	itt	mi
 80018d8:	222b      	movmi	r2, #43	; 0x2b
 80018da:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80018de:	7822      	ldrb	r2, [r4, #0]
 80018e0:	2a2a      	cmp	r2, #42	; 0x2a
 80018e2:	d016      	beq.n	8001912 <_svfiprintf_r+0xe6>
 80018e4:	2100      	movs	r1, #0
 80018e6:	200a      	movs	r0, #10
 80018e8:	9a07      	ldr	r2, [sp, #28]
 80018ea:	4627      	mov	r7, r4
 80018ec:	783b      	ldrb	r3, [r7, #0]
 80018ee:	3401      	adds	r4, #1
 80018f0:	3b30      	subs	r3, #48	; 0x30
 80018f2:	2b09      	cmp	r3, #9
 80018f4:	d950      	bls.n	8001998 <_svfiprintf_r+0x16c>
 80018f6:	b1c9      	cbz	r1, 800192c <_svfiprintf_r+0x100>
 80018f8:	e011      	b.n	800191e <_svfiprintf_r+0xf2>
 80018fa:	2b25      	cmp	r3, #37	; 0x25
 80018fc:	d0c0      	beq.n	8001880 <_svfiprintf_r+0x54>
 80018fe:	4627      	mov	r7, r4
 8001900:	e7b9      	b.n	8001876 <_svfiprintf_r+0x4a>
 8001902:	4a3f      	ldr	r2, [pc, #252]	; (8001a00 <_svfiprintf_r+0x1d4>)
 8001904:	463c      	mov	r4, r7
 8001906:	1a80      	subs	r0, r0, r2
 8001908:	fa0b f000 	lsl.w	r0, fp, r0
 800190c:	4318      	orrs	r0, r3
 800190e:	9004      	str	r0, [sp, #16]
 8001910:	e7d3      	b.n	80018ba <_svfiprintf_r+0x8e>
 8001912:	9a03      	ldr	r2, [sp, #12]
 8001914:	1d11      	adds	r1, r2, #4
 8001916:	6812      	ldr	r2, [r2, #0]
 8001918:	9103      	str	r1, [sp, #12]
 800191a:	2a00      	cmp	r2, #0
 800191c:	db01      	blt.n	8001922 <_svfiprintf_r+0xf6>
 800191e:	9207      	str	r2, [sp, #28]
 8001920:	e004      	b.n	800192c <_svfiprintf_r+0x100>
 8001922:	4252      	negs	r2, r2
 8001924:	f043 0302 	orr.w	r3, r3, #2
 8001928:	9207      	str	r2, [sp, #28]
 800192a:	9304      	str	r3, [sp, #16]
 800192c:	783b      	ldrb	r3, [r7, #0]
 800192e:	2b2e      	cmp	r3, #46	; 0x2e
 8001930:	d10d      	bne.n	800194e <_svfiprintf_r+0x122>
 8001932:	787b      	ldrb	r3, [r7, #1]
 8001934:	1c79      	adds	r1, r7, #1
 8001936:	2b2a      	cmp	r3, #42	; 0x2a
 8001938:	d132      	bne.n	80019a0 <_svfiprintf_r+0x174>
 800193a:	9b03      	ldr	r3, [sp, #12]
 800193c:	3702      	adds	r7, #2
 800193e:	1d1a      	adds	r2, r3, #4
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	9203      	str	r2, [sp, #12]
 8001944:	2b00      	cmp	r3, #0
 8001946:	bfb8      	it	lt
 8001948:	f04f 33ff 	movlt.w	r3, #4294967295
 800194c:	9305      	str	r3, [sp, #20]
 800194e:	4c2d      	ldr	r4, [pc, #180]	; (8001a04 <_svfiprintf_r+0x1d8>)
 8001950:	2203      	movs	r2, #3
 8001952:	7839      	ldrb	r1, [r7, #0]
 8001954:	4620      	mov	r0, r4
 8001956:	f000 f9f5 	bl	8001d44 <memchr>
 800195a:	b138      	cbz	r0, 800196c <_svfiprintf_r+0x140>
 800195c:	2340      	movs	r3, #64	; 0x40
 800195e:	1b00      	subs	r0, r0, r4
 8001960:	fa03 f000 	lsl.w	r0, r3, r0
 8001964:	9b04      	ldr	r3, [sp, #16]
 8001966:	3701      	adds	r7, #1
 8001968:	4303      	orrs	r3, r0
 800196a:	9304      	str	r3, [sp, #16]
 800196c:	7839      	ldrb	r1, [r7, #0]
 800196e:	2206      	movs	r2, #6
 8001970:	4825      	ldr	r0, [pc, #148]	; (8001a08 <_svfiprintf_r+0x1dc>)
 8001972:	1c7e      	adds	r6, r7, #1
 8001974:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001978:	f000 f9e4 	bl	8001d44 <memchr>
 800197c:	2800      	cmp	r0, #0
 800197e:	d035      	beq.n	80019ec <_svfiprintf_r+0x1c0>
 8001980:	4b22      	ldr	r3, [pc, #136]	; (8001a0c <_svfiprintf_r+0x1e0>)
 8001982:	b9fb      	cbnz	r3, 80019c4 <_svfiprintf_r+0x198>
 8001984:	9b03      	ldr	r3, [sp, #12]
 8001986:	3307      	adds	r3, #7
 8001988:	f023 0307 	bic.w	r3, r3, #7
 800198c:	3308      	adds	r3, #8
 800198e:	9303      	str	r3, [sp, #12]
 8001990:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001992:	444b      	add	r3, r9
 8001994:	9309      	str	r3, [sp, #36]	; 0x24
 8001996:	e76d      	b.n	8001874 <_svfiprintf_r+0x48>
 8001998:	fb00 3202 	mla	r2, r0, r2, r3
 800199c:	2101      	movs	r1, #1
 800199e:	e7a4      	b.n	80018ea <_svfiprintf_r+0xbe>
 80019a0:	2300      	movs	r3, #0
 80019a2:	240a      	movs	r4, #10
 80019a4:	4618      	mov	r0, r3
 80019a6:	9305      	str	r3, [sp, #20]
 80019a8:	460f      	mov	r7, r1
 80019aa:	783a      	ldrb	r2, [r7, #0]
 80019ac:	3101      	adds	r1, #1
 80019ae:	3a30      	subs	r2, #48	; 0x30
 80019b0:	2a09      	cmp	r2, #9
 80019b2:	d903      	bls.n	80019bc <_svfiprintf_r+0x190>
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d0ca      	beq.n	800194e <_svfiprintf_r+0x122>
 80019b8:	9005      	str	r0, [sp, #20]
 80019ba:	e7c8      	b.n	800194e <_svfiprintf_r+0x122>
 80019bc:	fb04 2000 	mla	r0, r4, r0, r2
 80019c0:	2301      	movs	r3, #1
 80019c2:	e7f1      	b.n	80019a8 <_svfiprintf_r+0x17c>
 80019c4:	ab03      	add	r3, sp, #12
 80019c6:	9300      	str	r3, [sp, #0]
 80019c8:	462a      	mov	r2, r5
 80019ca:	4b11      	ldr	r3, [pc, #68]	; (8001a10 <_svfiprintf_r+0x1e4>)
 80019cc:	a904      	add	r1, sp, #16
 80019ce:	4640      	mov	r0, r8
 80019d0:	f3af 8000 	nop.w
 80019d4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80019d8:	4681      	mov	r9, r0
 80019da:	d1d9      	bne.n	8001990 <_svfiprintf_r+0x164>
 80019dc:	89ab      	ldrh	r3, [r5, #12]
 80019de:	065b      	lsls	r3, r3, #25
 80019e0:	f53f af39 	bmi.w	8001856 <_svfiprintf_r+0x2a>
 80019e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80019e6:	b01d      	add	sp, #116	; 0x74
 80019e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80019ec:	ab03      	add	r3, sp, #12
 80019ee:	9300      	str	r3, [sp, #0]
 80019f0:	462a      	mov	r2, r5
 80019f2:	4b07      	ldr	r3, [pc, #28]	; (8001a10 <_svfiprintf_r+0x1e4>)
 80019f4:	a904      	add	r1, sp, #16
 80019f6:	4640      	mov	r0, r8
 80019f8:	f000 f884 	bl	8001b04 <_printf_i>
 80019fc:	e7ea      	b.n	80019d4 <_svfiprintf_r+0x1a8>
 80019fe:	bf00      	nop
 8001a00:	08001ff6 	.word	0x08001ff6
 8001a04:	08001ffc 	.word	0x08001ffc
 8001a08:	08002000 	.word	0x08002000
 8001a0c:	00000000 	.word	0x00000000
 8001a10:	08001775 	.word	0x08001775

08001a14 <_printf_common>:
 8001a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a18:	4691      	mov	r9, r2
 8001a1a:	461f      	mov	r7, r3
 8001a1c:	688a      	ldr	r2, [r1, #8]
 8001a1e:	690b      	ldr	r3, [r1, #16]
 8001a20:	4606      	mov	r6, r0
 8001a22:	4293      	cmp	r3, r2
 8001a24:	bfb8      	it	lt
 8001a26:	4613      	movlt	r3, r2
 8001a28:	f8c9 3000 	str.w	r3, [r9]
 8001a2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001a30:	460c      	mov	r4, r1
 8001a32:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001a36:	b112      	cbz	r2, 8001a3e <_printf_common+0x2a>
 8001a38:	3301      	adds	r3, #1
 8001a3a:	f8c9 3000 	str.w	r3, [r9]
 8001a3e:	6823      	ldr	r3, [r4, #0]
 8001a40:	0699      	lsls	r1, r3, #26
 8001a42:	bf42      	ittt	mi
 8001a44:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001a48:	3302      	addmi	r3, #2
 8001a4a:	f8c9 3000 	strmi.w	r3, [r9]
 8001a4e:	6825      	ldr	r5, [r4, #0]
 8001a50:	f015 0506 	ands.w	r5, r5, #6
 8001a54:	d107      	bne.n	8001a66 <_printf_common+0x52>
 8001a56:	f104 0a19 	add.w	sl, r4, #25
 8001a5a:	68e3      	ldr	r3, [r4, #12]
 8001a5c:	f8d9 2000 	ldr.w	r2, [r9]
 8001a60:	1a9b      	subs	r3, r3, r2
 8001a62:	429d      	cmp	r5, r3
 8001a64:	db2a      	blt.n	8001abc <_printf_common+0xa8>
 8001a66:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001a6a:	6822      	ldr	r2, [r4, #0]
 8001a6c:	3300      	adds	r3, #0
 8001a6e:	bf18      	it	ne
 8001a70:	2301      	movne	r3, #1
 8001a72:	0692      	lsls	r2, r2, #26
 8001a74:	d42f      	bmi.n	8001ad6 <_printf_common+0xc2>
 8001a76:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001a7a:	4639      	mov	r1, r7
 8001a7c:	4630      	mov	r0, r6
 8001a7e:	47c0      	blx	r8
 8001a80:	3001      	adds	r0, #1
 8001a82:	d022      	beq.n	8001aca <_printf_common+0xb6>
 8001a84:	6823      	ldr	r3, [r4, #0]
 8001a86:	68e5      	ldr	r5, [r4, #12]
 8001a88:	f003 0306 	and.w	r3, r3, #6
 8001a8c:	2b04      	cmp	r3, #4
 8001a8e:	bf18      	it	ne
 8001a90:	2500      	movne	r5, #0
 8001a92:	f8d9 2000 	ldr.w	r2, [r9]
 8001a96:	f04f 0900 	mov.w	r9, #0
 8001a9a:	bf08      	it	eq
 8001a9c:	1aad      	subeq	r5, r5, r2
 8001a9e:	68a3      	ldr	r3, [r4, #8]
 8001aa0:	6922      	ldr	r2, [r4, #16]
 8001aa2:	bf08      	it	eq
 8001aa4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	bfc4      	itt	gt
 8001aac:	1a9b      	subgt	r3, r3, r2
 8001aae:	18ed      	addgt	r5, r5, r3
 8001ab0:	341a      	adds	r4, #26
 8001ab2:	454d      	cmp	r5, r9
 8001ab4:	d11b      	bne.n	8001aee <_printf_common+0xda>
 8001ab6:	2000      	movs	r0, #0
 8001ab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001abc:	2301      	movs	r3, #1
 8001abe:	4652      	mov	r2, sl
 8001ac0:	4639      	mov	r1, r7
 8001ac2:	4630      	mov	r0, r6
 8001ac4:	47c0      	blx	r8
 8001ac6:	3001      	adds	r0, #1
 8001ac8:	d103      	bne.n	8001ad2 <_printf_common+0xbe>
 8001aca:	f04f 30ff 	mov.w	r0, #4294967295
 8001ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ad2:	3501      	adds	r5, #1
 8001ad4:	e7c1      	b.n	8001a5a <_printf_common+0x46>
 8001ad6:	2030      	movs	r0, #48	; 0x30
 8001ad8:	18e1      	adds	r1, r4, r3
 8001ada:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001ade:	1c5a      	adds	r2, r3, #1
 8001ae0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001ae4:	4422      	add	r2, r4
 8001ae6:	3302      	adds	r3, #2
 8001ae8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001aec:	e7c3      	b.n	8001a76 <_printf_common+0x62>
 8001aee:	2301      	movs	r3, #1
 8001af0:	4622      	mov	r2, r4
 8001af2:	4639      	mov	r1, r7
 8001af4:	4630      	mov	r0, r6
 8001af6:	47c0      	blx	r8
 8001af8:	3001      	adds	r0, #1
 8001afa:	d0e6      	beq.n	8001aca <_printf_common+0xb6>
 8001afc:	f109 0901 	add.w	r9, r9, #1
 8001b00:	e7d7      	b.n	8001ab2 <_printf_common+0x9e>
	...

08001b04 <_printf_i>:
 8001b04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001b08:	4617      	mov	r7, r2
 8001b0a:	7e0a      	ldrb	r2, [r1, #24]
 8001b0c:	b085      	sub	sp, #20
 8001b0e:	2a6e      	cmp	r2, #110	; 0x6e
 8001b10:	4698      	mov	r8, r3
 8001b12:	4606      	mov	r6, r0
 8001b14:	460c      	mov	r4, r1
 8001b16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001b18:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8001b1c:	f000 80bc 	beq.w	8001c98 <_printf_i+0x194>
 8001b20:	d81a      	bhi.n	8001b58 <_printf_i+0x54>
 8001b22:	2a63      	cmp	r2, #99	; 0x63
 8001b24:	d02e      	beq.n	8001b84 <_printf_i+0x80>
 8001b26:	d80a      	bhi.n	8001b3e <_printf_i+0x3a>
 8001b28:	2a00      	cmp	r2, #0
 8001b2a:	f000 80c8 	beq.w	8001cbe <_printf_i+0x1ba>
 8001b2e:	2a58      	cmp	r2, #88	; 0x58
 8001b30:	f000 808a 	beq.w	8001c48 <_printf_i+0x144>
 8001b34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001b38:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8001b3c:	e02a      	b.n	8001b94 <_printf_i+0x90>
 8001b3e:	2a64      	cmp	r2, #100	; 0x64
 8001b40:	d001      	beq.n	8001b46 <_printf_i+0x42>
 8001b42:	2a69      	cmp	r2, #105	; 0x69
 8001b44:	d1f6      	bne.n	8001b34 <_printf_i+0x30>
 8001b46:	6821      	ldr	r1, [r4, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001b4e:	d023      	beq.n	8001b98 <_printf_i+0x94>
 8001b50:	1d11      	adds	r1, r2, #4
 8001b52:	6019      	str	r1, [r3, #0]
 8001b54:	6813      	ldr	r3, [r2, #0]
 8001b56:	e027      	b.n	8001ba8 <_printf_i+0xa4>
 8001b58:	2a73      	cmp	r2, #115	; 0x73
 8001b5a:	f000 80b4 	beq.w	8001cc6 <_printf_i+0x1c2>
 8001b5e:	d808      	bhi.n	8001b72 <_printf_i+0x6e>
 8001b60:	2a6f      	cmp	r2, #111	; 0x6f
 8001b62:	d02a      	beq.n	8001bba <_printf_i+0xb6>
 8001b64:	2a70      	cmp	r2, #112	; 0x70
 8001b66:	d1e5      	bne.n	8001b34 <_printf_i+0x30>
 8001b68:	680a      	ldr	r2, [r1, #0]
 8001b6a:	f042 0220 	orr.w	r2, r2, #32
 8001b6e:	600a      	str	r2, [r1, #0]
 8001b70:	e003      	b.n	8001b7a <_printf_i+0x76>
 8001b72:	2a75      	cmp	r2, #117	; 0x75
 8001b74:	d021      	beq.n	8001bba <_printf_i+0xb6>
 8001b76:	2a78      	cmp	r2, #120	; 0x78
 8001b78:	d1dc      	bne.n	8001b34 <_printf_i+0x30>
 8001b7a:	2278      	movs	r2, #120	; 0x78
 8001b7c:	496f      	ldr	r1, [pc, #444]	; (8001d3c <_printf_i+0x238>)
 8001b7e:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8001b82:	e064      	b.n	8001c4e <_printf_i+0x14a>
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8001b8a:	1d11      	adds	r1, r2, #4
 8001b8c:	6019      	str	r1, [r3, #0]
 8001b8e:	6813      	ldr	r3, [r2, #0]
 8001b90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001b94:	2301      	movs	r3, #1
 8001b96:	e0a3      	b.n	8001ce0 <_printf_i+0x1dc>
 8001b98:	f011 0f40 	tst.w	r1, #64	; 0x40
 8001b9c:	f102 0104 	add.w	r1, r2, #4
 8001ba0:	6019      	str	r1, [r3, #0]
 8001ba2:	d0d7      	beq.n	8001b54 <_printf_i+0x50>
 8001ba4:	f9b2 3000 	ldrsh.w	r3, [r2]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	da03      	bge.n	8001bb4 <_printf_i+0xb0>
 8001bac:	222d      	movs	r2, #45	; 0x2d
 8001bae:	425b      	negs	r3, r3
 8001bb0:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001bb4:	4962      	ldr	r1, [pc, #392]	; (8001d40 <_printf_i+0x23c>)
 8001bb6:	220a      	movs	r2, #10
 8001bb8:	e017      	b.n	8001bea <_printf_i+0xe6>
 8001bba:	6820      	ldr	r0, [r4, #0]
 8001bbc:	6819      	ldr	r1, [r3, #0]
 8001bbe:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001bc2:	d003      	beq.n	8001bcc <_printf_i+0xc8>
 8001bc4:	1d08      	adds	r0, r1, #4
 8001bc6:	6018      	str	r0, [r3, #0]
 8001bc8:	680b      	ldr	r3, [r1, #0]
 8001bca:	e006      	b.n	8001bda <_printf_i+0xd6>
 8001bcc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001bd0:	f101 0004 	add.w	r0, r1, #4
 8001bd4:	6018      	str	r0, [r3, #0]
 8001bd6:	d0f7      	beq.n	8001bc8 <_printf_i+0xc4>
 8001bd8:	880b      	ldrh	r3, [r1, #0]
 8001bda:	2a6f      	cmp	r2, #111	; 0x6f
 8001bdc:	bf14      	ite	ne
 8001bde:	220a      	movne	r2, #10
 8001be0:	2208      	moveq	r2, #8
 8001be2:	4957      	ldr	r1, [pc, #348]	; (8001d40 <_printf_i+0x23c>)
 8001be4:	2000      	movs	r0, #0
 8001be6:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8001bea:	6865      	ldr	r5, [r4, #4]
 8001bec:	2d00      	cmp	r5, #0
 8001bee:	60a5      	str	r5, [r4, #8]
 8001bf0:	f2c0 809c 	blt.w	8001d2c <_printf_i+0x228>
 8001bf4:	6820      	ldr	r0, [r4, #0]
 8001bf6:	f020 0004 	bic.w	r0, r0, #4
 8001bfa:	6020      	str	r0, [r4, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d13f      	bne.n	8001c80 <_printf_i+0x17c>
 8001c00:	2d00      	cmp	r5, #0
 8001c02:	f040 8095 	bne.w	8001d30 <_printf_i+0x22c>
 8001c06:	4675      	mov	r5, lr
 8001c08:	2a08      	cmp	r2, #8
 8001c0a:	d10b      	bne.n	8001c24 <_printf_i+0x120>
 8001c0c:	6823      	ldr	r3, [r4, #0]
 8001c0e:	07da      	lsls	r2, r3, #31
 8001c10:	d508      	bpl.n	8001c24 <_printf_i+0x120>
 8001c12:	6923      	ldr	r3, [r4, #16]
 8001c14:	6862      	ldr	r2, [r4, #4]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	bfde      	ittt	le
 8001c1a:	2330      	movle	r3, #48	; 0x30
 8001c1c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001c20:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001c24:	ebae 0305 	sub.w	r3, lr, r5
 8001c28:	6123      	str	r3, [r4, #16]
 8001c2a:	f8cd 8000 	str.w	r8, [sp]
 8001c2e:	463b      	mov	r3, r7
 8001c30:	aa03      	add	r2, sp, #12
 8001c32:	4621      	mov	r1, r4
 8001c34:	4630      	mov	r0, r6
 8001c36:	f7ff feed 	bl	8001a14 <_printf_common>
 8001c3a:	3001      	adds	r0, #1
 8001c3c:	d155      	bne.n	8001cea <_printf_i+0x1e6>
 8001c3e:	f04f 30ff 	mov.w	r0, #4294967295
 8001c42:	b005      	add	sp, #20
 8001c44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001c48:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8001c4c:	493c      	ldr	r1, [pc, #240]	; (8001d40 <_printf_i+0x23c>)
 8001c4e:	6822      	ldr	r2, [r4, #0]
 8001c50:	6818      	ldr	r0, [r3, #0]
 8001c52:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001c56:	f100 0504 	add.w	r5, r0, #4
 8001c5a:	601d      	str	r5, [r3, #0]
 8001c5c:	d001      	beq.n	8001c62 <_printf_i+0x15e>
 8001c5e:	6803      	ldr	r3, [r0, #0]
 8001c60:	e002      	b.n	8001c68 <_printf_i+0x164>
 8001c62:	0655      	lsls	r5, r2, #25
 8001c64:	d5fb      	bpl.n	8001c5e <_printf_i+0x15a>
 8001c66:	8803      	ldrh	r3, [r0, #0]
 8001c68:	07d0      	lsls	r0, r2, #31
 8001c6a:	bf44      	itt	mi
 8001c6c:	f042 0220 	orrmi.w	r2, r2, #32
 8001c70:	6022      	strmi	r2, [r4, #0]
 8001c72:	b91b      	cbnz	r3, 8001c7c <_printf_i+0x178>
 8001c74:	6822      	ldr	r2, [r4, #0]
 8001c76:	f022 0220 	bic.w	r2, r2, #32
 8001c7a:	6022      	str	r2, [r4, #0]
 8001c7c:	2210      	movs	r2, #16
 8001c7e:	e7b1      	b.n	8001be4 <_printf_i+0xe0>
 8001c80:	4675      	mov	r5, lr
 8001c82:	fbb3 f0f2 	udiv	r0, r3, r2
 8001c86:	fb02 3310 	mls	r3, r2, r0, r3
 8001c8a:	5ccb      	ldrb	r3, [r1, r3]
 8001c8c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001c90:	4603      	mov	r3, r0
 8001c92:	2800      	cmp	r0, #0
 8001c94:	d1f5      	bne.n	8001c82 <_printf_i+0x17e>
 8001c96:	e7b7      	b.n	8001c08 <_printf_i+0x104>
 8001c98:	6808      	ldr	r0, [r1, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001ca0:	6949      	ldr	r1, [r1, #20]
 8001ca2:	d004      	beq.n	8001cae <_printf_i+0x1aa>
 8001ca4:	1d10      	adds	r0, r2, #4
 8001ca6:	6018      	str	r0, [r3, #0]
 8001ca8:	6813      	ldr	r3, [r2, #0]
 8001caa:	6019      	str	r1, [r3, #0]
 8001cac:	e007      	b.n	8001cbe <_printf_i+0x1ba>
 8001cae:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001cb2:	f102 0004 	add.w	r0, r2, #4
 8001cb6:	6018      	str	r0, [r3, #0]
 8001cb8:	6813      	ldr	r3, [r2, #0]
 8001cba:	d0f6      	beq.n	8001caa <_printf_i+0x1a6>
 8001cbc:	8019      	strh	r1, [r3, #0]
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	4675      	mov	r5, lr
 8001cc2:	6123      	str	r3, [r4, #16]
 8001cc4:	e7b1      	b.n	8001c2a <_printf_i+0x126>
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	1d11      	adds	r1, r2, #4
 8001cca:	6019      	str	r1, [r3, #0]
 8001ccc:	6815      	ldr	r5, [r2, #0]
 8001cce:	2100      	movs	r1, #0
 8001cd0:	6862      	ldr	r2, [r4, #4]
 8001cd2:	4628      	mov	r0, r5
 8001cd4:	f000 f836 	bl	8001d44 <memchr>
 8001cd8:	b108      	cbz	r0, 8001cde <_printf_i+0x1da>
 8001cda:	1b40      	subs	r0, r0, r5
 8001cdc:	6060      	str	r0, [r4, #4]
 8001cde:	6863      	ldr	r3, [r4, #4]
 8001ce0:	6123      	str	r3, [r4, #16]
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001ce8:	e79f      	b.n	8001c2a <_printf_i+0x126>
 8001cea:	6923      	ldr	r3, [r4, #16]
 8001cec:	462a      	mov	r2, r5
 8001cee:	4639      	mov	r1, r7
 8001cf0:	4630      	mov	r0, r6
 8001cf2:	47c0      	blx	r8
 8001cf4:	3001      	adds	r0, #1
 8001cf6:	d0a2      	beq.n	8001c3e <_printf_i+0x13a>
 8001cf8:	6823      	ldr	r3, [r4, #0]
 8001cfa:	079b      	lsls	r3, r3, #30
 8001cfc:	d507      	bpl.n	8001d0e <_printf_i+0x20a>
 8001cfe:	2500      	movs	r5, #0
 8001d00:	f104 0919 	add.w	r9, r4, #25
 8001d04:	68e3      	ldr	r3, [r4, #12]
 8001d06:	9a03      	ldr	r2, [sp, #12]
 8001d08:	1a9b      	subs	r3, r3, r2
 8001d0a:	429d      	cmp	r5, r3
 8001d0c:	db05      	blt.n	8001d1a <_printf_i+0x216>
 8001d0e:	68e0      	ldr	r0, [r4, #12]
 8001d10:	9b03      	ldr	r3, [sp, #12]
 8001d12:	4298      	cmp	r0, r3
 8001d14:	bfb8      	it	lt
 8001d16:	4618      	movlt	r0, r3
 8001d18:	e793      	b.n	8001c42 <_printf_i+0x13e>
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	464a      	mov	r2, r9
 8001d1e:	4639      	mov	r1, r7
 8001d20:	4630      	mov	r0, r6
 8001d22:	47c0      	blx	r8
 8001d24:	3001      	adds	r0, #1
 8001d26:	d08a      	beq.n	8001c3e <_printf_i+0x13a>
 8001d28:	3501      	adds	r5, #1
 8001d2a:	e7eb      	b.n	8001d04 <_printf_i+0x200>
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d1a7      	bne.n	8001c80 <_printf_i+0x17c>
 8001d30:	780b      	ldrb	r3, [r1, #0]
 8001d32:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001d36:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001d3a:	e765      	b.n	8001c08 <_printf_i+0x104>
 8001d3c:	08002018 	.word	0x08002018
 8001d40:	08002007 	.word	0x08002007

08001d44 <memchr>:
 8001d44:	b510      	push	{r4, lr}
 8001d46:	b2c9      	uxtb	r1, r1
 8001d48:	4402      	add	r2, r0
 8001d4a:	4290      	cmp	r0, r2
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	d101      	bne.n	8001d54 <memchr+0x10>
 8001d50:	2000      	movs	r0, #0
 8001d52:	bd10      	pop	{r4, pc}
 8001d54:	781c      	ldrb	r4, [r3, #0]
 8001d56:	3001      	adds	r0, #1
 8001d58:	428c      	cmp	r4, r1
 8001d5a:	d1f6      	bne.n	8001d4a <memchr+0x6>
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	bd10      	pop	{r4, pc}

08001d60 <memcpy>:
 8001d60:	b510      	push	{r4, lr}
 8001d62:	1e43      	subs	r3, r0, #1
 8001d64:	440a      	add	r2, r1
 8001d66:	4291      	cmp	r1, r2
 8001d68:	d100      	bne.n	8001d6c <memcpy+0xc>
 8001d6a:	bd10      	pop	{r4, pc}
 8001d6c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001d70:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001d74:	e7f7      	b.n	8001d66 <memcpy+0x6>

08001d76 <memmove>:
 8001d76:	4288      	cmp	r0, r1
 8001d78:	b510      	push	{r4, lr}
 8001d7a:	eb01 0302 	add.w	r3, r1, r2
 8001d7e:	d803      	bhi.n	8001d88 <memmove+0x12>
 8001d80:	1e42      	subs	r2, r0, #1
 8001d82:	4299      	cmp	r1, r3
 8001d84:	d10c      	bne.n	8001da0 <memmove+0x2a>
 8001d86:	bd10      	pop	{r4, pc}
 8001d88:	4298      	cmp	r0, r3
 8001d8a:	d2f9      	bcs.n	8001d80 <memmove+0xa>
 8001d8c:	1881      	adds	r1, r0, r2
 8001d8e:	1ad2      	subs	r2, r2, r3
 8001d90:	42d3      	cmn	r3, r2
 8001d92:	d100      	bne.n	8001d96 <memmove+0x20>
 8001d94:	bd10      	pop	{r4, pc}
 8001d96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001d9a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8001d9e:	e7f7      	b.n	8001d90 <memmove+0x1a>
 8001da0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001da4:	f802 4f01 	strb.w	r4, [r2, #1]!
 8001da8:	e7eb      	b.n	8001d82 <memmove+0xc>
	...

08001dac <_free_r>:
 8001dac:	b538      	push	{r3, r4, r5, lr}
 8001dae:	4605      	mov	r5, r0
 8001db0:	2900      	cmp	r1, #0
 8001db2:	d043      	beq.n	8001e3c <_free_r+0x90>
 8001db4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001db8:	1f0c      	subs	r4, r1, #4
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	bfb8      	it	lt
 8001dbe:	18e4      	addlt	r4, r4, r3
 8001dc0:	f000 f8d4 	bl	8001f6c <__malloc_lock>
 8001dc4:	4a1e      	ldr	r2, [pc, #120]	; (8001e40 <_free_r+0x94>)
 8001dc6:	6813      	ldr	r3, [r2, #0]
 8001dc8:	4610      	mov	r0, r2
 8001dca:	b933      	cbnz	r3, 8001dda <_free_r+0x2e>
 8001dcc:	6063      	str	r3, [r4, #4]
 8001dce:	6014      	str	r4, [r2, #0]
 8001dd0:	4628      	mov	r0, r5
 8001dd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001dd6:	f000 b8ca 	b.w	8001f6e <__malloc_unlock>
 8001dda:	42a3      	cmp	r3, r4
 8001ddc:	d90b      	bls.n	8001df6 <_free_r+0x4a>
 8001dde:	6821      	ldr	r1, [r4, #0]
 8001de0:	1862      	adds	r2, r4, r1
 8001de2:	4293      	cmp	r3, r2
 8001de4:	bf01      	itttt	eq
 8001de6:	681a      	ldreq	r2, [r3, #0]
 8001de8:	685b      	ldreq	r3, [r3, #4]
 8001dea:	1852      	addeq	r2, r2, r1
 8001dec:	6022      	streq	r2, [r4, #0]
 8001dee:	6063      	str	r3, [r4, #4]
 8001df0:	6004      	str	r4, [r0, #0]
 8001df2:	e7ed      	b.n	8001dd0 <_free_r+0x24>
 8001df4:	4613      	mov	r3, r2
 8001df6:	685a      	ldr	r2, [r3, #4]
 8001df8:	b10a      	cbz	r2, 8001dfe <_free_r+0x52>
 8001dfa:	42a2      	cmp	r2, r4
 8001dfc:	d9fa      	bls.n	8001df4 <_free_r+0x48>
 8001dfe:	6819      	ldr	r1, [r3, #0]
 8001e00:	1858      	adds	r0, r3, r1
 8001e02:	42a0      	cmp	r0, r4
 8001e04:	d10b      	bne.n	8001e1e <_free_r+0x72>
 8001e06:	6820      	ldr	r0, [r4, #0]
 8001e08:	4401      	add	r1, r0
 8001e0a:	1858      	adds	r0, r3, r1
 8001e0c:	4282      	cmp	r2, r0
 8001e0e:	6019      	str	r1, [r3, #0]
 8001e10:	d1de      	bne.n	8001dd0 <_free_r+0x24>
 8001e12:	6810      	ldr	r0, [r2, #0]
 8001e14:	6852      	ldr	r2, [r2, #4]
 8001e16:	4401      	add	r1, r0
 8001e18:	6019      	str	r1, [r3, #0]
 8001e1a:	605a      	str	r2, [r3, #4]
 8001e1c:	e7d8      	b.n	8001dd0 <_free_r+0x24>
 8001e1e:	d902      	bls.n	8001e26 <_free_r+0x7a>
 8001e20:	230c      	movs	r3, #12
 8001e22:	602b      	str	r3, [r5, #0]
 8001e24:	e7d4      	b.n	8001dd0 <_free_r+0x24>
 8001e26:	6820      	ldr	r0, [r4, #0]
 8001e28:	1821      	adds	r1, r4, r0
 8001e2a:	428a      	cmp	r2, r1
 8001e2c:	bf01      	itttt	eq
 8001e2e:	6811      	ldreq	r1, [r2, #0]
 8001e30:	6852      	ldreq	r2, [r2, #4]
 8001e32:	1809      	addeq	r1, r1, r0
 8001e34:	6021      	streq	r1, [r4, #0]
 8001e36:	6062      	str	r2, [r4, #4]
 8001e38:	605c      	str	r4, [r3, #4]
 8001e3a:	e7c9      	b.n	8001dd0 <_free_r+0x24>
 8001e3c:	bd38      	pop	{r3, r4, r5, pc}
 8001e3e:	bf00      	nop
 8001e40:	200000c4 	.word	0x200000c4

08001e44 <_malloc_r>:
 8001e44:	b570      	push	{r4, r5, r6, lr}
 8001e46:	1ccd      	adds	r5, r1, #3
 8001e48:	f025 0503 	bic.w	r5, r5, #3
 8001e4c:	3508      	adds	r5, #8
 8001e4e:	2d0c      	cmp	r5, #12
 8001e50:	bf38      	it	cc
 8001e52:	250c      	movcc	r5, #12
 8001e54:	2d00      	cmp	r5, #0
 8001e56:	4606      	mov	r6, r0
 8001e58:	db01      	blt.n	8001e5e <_malloc_r+0x1a>
 8001e5a:	42a9      	cmp	r1, r5
 8001e5c:	d903      	bls.n	8001e66 <_malloc_r+0x22>
 8001e5e:	230c      	movs	r3, #12
 8001e60:	6033      	str	r3, [r6, #0]
 8001e62:	2000      	movs	r0, #0
 8001e64:	bd70      	pop	{r4, r5, r6, pc}
 8001e66:	f000 f881 	bl	8001f6c <__malloc_lock>
 8001e6a:	4a23      	ldr	r2, [pc, #140]	; (8001ef8 <_malloc_r+0xb4>)
 8001e6c:	6814      	ldr	r4, [r2, #0]
 8001e6e:	4621      	mov	r1, r4
 8001e70:	b991      	cbnz	r1, 8001e98 <_malloc_r+0x54>
 8001e72:	4c22      	ldr	r4, [pc, #136]	; (8001efc <_malloc_r+0xb8>)
 8001e74:	6823      	ldr	r3, [r4, #0]
 8001e76:	b91b      	cbnz	r3, 8001e80 <_malloc_r+0x3c>
 8001e78:	4630      	mov	r0, r6
 8001e7a:	f000 f867 	bl	8001f4c <_sbrk_r>
 8001e7e:	6020      	str	r0, [r4, #0]
 8001e80:	4629      	mov	r1, r5
 8001e82:	4630      	mov	r0, r6
 8001e84:	f000 f862 	bl	8001f4c <_sbrk_r>
 8001e88:	1c43      	adds	r3, r0, #1
 8001e8a:	d126      	bne.n	8001eda <_malloc_r+0x96>
 8001e8c:	230c      	movs	r3, #12
 8001e8e:	4630      	mov	r0, r6
 8001e90:	6033      	str	r3, [r6, #0]
 8001e92:	f000 f86c 	bl	8001f6e <__malloc_unlock>
 8001e96:	e7e4      	b.n	8001e62 <_malloc_r+0x1e>
 8001e98:	680b      	ldr	r3, [r1, #0]
 8001e9a:	1b5b      	subs	r3, r3, r5
 8001e9c:	d41a      	bmi.n	8001ed4 <_malloc_r+0x90>
 8001e9e:	2b0b      	cmp	r3, #11
 8001ea0:	d90f      	bls.n	8001ec2 <_malloc_r+0x7e>
 8001ea2:	600b      	str	r3, [r1, #0]
 8001ea4:	18cc      	adds	r4, r1, r3
 8001ea6:	50cd      	str	r5, [r1, r3]
 8001ea8:	4630      	mov	r0, r6
 8001eaa:	f000 f860 	bl	8001f6e <__malloc_unlock>
 8001eae:	f104 000b 	add.w	r0, r4, #11
 8001eb2:	1d23      	adds	r3, r4, #4
 8001eb4:	f020 0007 	bic.w	r0, r0, #7
 8001eb8:	1ac3      	subs	r3, r0, r3
 8001eba:	d01b      	beq.n	8001ef4 <_malloc_r+0xb0>
 8001ebc:	425a      	negs	r2, r3
 8001ebe:	50e2      	str	r2, [r4, r3]
 8001ec0:	bd70      	pop	{r4, r5, r6, pc}
 8001ec2:	428c      	cmp	r4, r1
 8001ec4:	bf0b      	itete	eq
 8001ec6:	6863      	ldreq	r3, [r4, #4]
 8001ec8:	684b      	ldrne	r3, [r1, #4]
 8001eca:	6013      	streq	r3, [r2, #0]
 8001ecc:	6063      	strne	r3, [r4, #4]
 8001ece:	bf18      	it	ne
 8001ed0:	460c      	movne	r4, r1
 8001ed2:	e7e9      	b.n	8001ea8 <_malloc_r+0x64>
 8001ed4:	460c      	mov	r4, r1
 8001ed6:	6849      	ldr	r1, [r1, #4]
 8001ed8:	e7ca      	b.n	8001e70 <_malloc_r+0x2c>
 8001eda:	1cc4      	adds	r4, r0, #3
 8001edc:	f024 0403 	bic.w	r4, r4, #3
 8001ee0:	42a0      	cmp	r0, r4
 8001ee2:	d005      	beq.n	8001ef0 <_malloc_r+0xac>
 8001ee4:	1a21      	subs	r1, r4, r0
 8001ee6:	4630      	mov	r0, r6
 8001ee8:	f000 f830 	bl	8001f4c <_sbrk_r>
 8001eec:	3001      	adds	r0, #1
 8001eee:	d0cd      	beq.n	8001e8c <_malloc_r+0x48>
 8001ef0:	6025      	str	r5, [r4, #0]
 8001ef2:	e7d9      	b.n	8001ea8 <_malloc_r+0x64>
 8001ef4:	bd70      	pop	{r4, r5, r6, pc}
 8001ef6:	bf00      	nop
 8001ef8:	200000c4 	.word	0x200000c4
 8001efc:	200000c8 	.word	0x200000c8

08001f00 <_realloc_r>:
 8001f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f02:	4607      	mov	r7, r0
 8001f04:	4614      	mov	r4, r2
 8001f06:	460e      	mov	r6, r1
 8001f08:	b921      	cbnz	r1, 8001f14 <_realloc_r+0x14>
 8001f0a:	4611      	mov	r1, r2
 8001f0c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001f10:	f7ff bf98 	b.w	8001e44 <_malloc_r>
 8001f14:	b922      	cbnz	r2, 8001f20 <_realloc_r+0x20>
 8001f16:	f7ff ff49 	bl	8001dac <_free_r>
 8001f1a:	4625      	mov	r5, r4
 8001f1c:	4628      	mov	r0, r5
 8001f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f20:	f000 f826 	bl	8001f70 <_malloc_usable_size_r>
 8001f24:	4284      	cmp	r4, r0
 8001f26:	d90f      	bls.n	8001f48 <_realloc_r+0x48>
 8001f28:	4621      	mov	r1, r4
 8001f2a:	4638      	mov	r0, r7
 8001f2c:	f7ff ff8a 	bl	8001e44 <_malloc_r>
 8001f30:	4605      	mov	r5, r0
 8001f32:	2800      	cmp	r0, #0
 8001f34:	d0f2      	beq.n	8001f1c <_realloc_r+0x1c>
 8001f36:	4631      	mov	r1, r6
 8001f38:	4622      	mov	r2, r4
 8001f3a:	f7ff ff11 	bl	8001d60 <memcpy>
 8001f3e:	4631      	mov	r1, r6
 8001f40:	4638      	mov	r0, r7
 8001f42:	f7ff ff33 	bl	8001dac <_free_r>
 8001f46:	e7e9      	b.n	8001f1c <_realloc_r+0x1c>
 8001f48:	4635      	mov	r5, r6
 8001f4a:	e7e7      	b.n	8001f1c <_realloc_r+0x1c>

08001f4c <_sbrk_r>:
 8001f4c:	b538      	push	{r3, r4, r5, lr}
 8001f4e:	2300      	movs	r3, #0
 8001f50:	4c05      	ldr	r4, [pc, #20]	; (8001f68 <_sbrk_r+0x1c>)
 8001f52:	4605      	mov	r5, r0
 8001f54:	4608      	mov	r0, r1
 8001f56:	6023      	str	r3, [r4, #0]
 8001f58:	f7ff fb4e 	bl	80015f8 <_sbrk>
 8001f5c:	1c43      	adds	r3, r0, #1
 8001f5e:	d102      	bne.n	8001f66 <_sbrk_r+0x1a>
 8001f60:	6823      	ldr	r3, [r4, #0]
 8001f62:	b103      	cbz	r3, 8001f66 <_sbrk_r+0x1a>
 8001f64:	602b      	str	r3, [r5, #0]
 8001f66:	bd38      	pop	{r3, r4, r5, pc}
 8001f68:	20000148 	.word	0x20000148

08001f6c <__malloc_lock>:
 8001f6c:	4770      	bx	lr

08001f6e <__malloc_unlock>:
 8001f6e:	4770      	bx	lr

08001f70 <_malloc_usable_size_r>:
 8001f70:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8001f74:	2800      	cmp	r0, #0
 8001f76:	f1a0 0004 	sub.w	r0, r0, #4
 8001f7a:	bfbc      	itt	lt
 8001f7c:	580b      	ldrlt	r3, [r1, r0]
 8001f7e:	18c0      	addlt	r0, r0, r3
 8001f80:	4770      	bx	lr
	...

08001f84 <_init>:
 8001f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f86:	bf00      	nop
 8001f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f8a:	bc08      	pop	{r3}
 8001f8c:	469e      	mov	lr, r3
 8001f8e:	4770      	bx	lr

08001f90 <_fini>:
 8001f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f92:	bf00      	nop
 8001f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f96:	bc08      	pop	{r3}
 8001f98:	469e      	mov	lr, r3
 8001f9a:	4770      	bx	lr
