
SmartRelay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d3c  080001d0  080001d0  000101d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08001f0c  08001f0c  00011f0c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001f9c  08001f9c  00011f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001fa0  08001fa0  00011fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000080  20000000  08001fa4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000cc  20000080  08002024  00020080  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000014c  08002024  0002014c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000baf8  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001e7c  00000000  00000000  0002bba1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000553e  00000000  00000000  0002da1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000868  00000000  00000000  00032f60  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000ac8  00000000  00000000  000337c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003f90  00000000  00000000  00034290  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003252  00000000  00000000  00038220  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003b472  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001b9c  00000000  00000000  0003b4f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000080 	.word	0x20000080
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08001ef4 	.word	0x08001ef4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000084 	.word	0x20000084
 800020c:	08001ef4 	.word	0x08001ef4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000220:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000222:	4b0e      	ldr	r3, [pc, #56]	; (800025c <HAL_InitTick+0x3c>)
{
 8000224:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000226:	7818      	ldrb	r0, [r3, #0]
 8000228:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800022c:	fbb3 f3f0 	udiv	r3, r3, r0
 8000230:	4a0b      	ldr	r2, [pc, #44]	; (8000260 <HAL_InitTick+0x40>)
 8000232:	6810      	ldr	r0, [r2, #0]
 8000234:	fbb0 f0f3 	udiv	r0, r0, r3
 8000238:	f000 f89a 	bl	8000370 <HAL_SYSTICK_Config>
 800023c:	4604      	mov	r4, r0
 800023e:	b958      	cbnz	r0, 8000258 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000240:	2d0f      	cmp	r5, #15
 8000242:	d809      	bhi.n	8000258 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000244:	4602      	mov	r2, r0
 8000246:	4629      	mov	r1, r5
 8000248:	f04f 30ff 	mov.w	r0, #4294967295
 800024c:	f000 f84e 	bl	80002ec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000250:	4b04      	ldr	r3, [pc, #16]	; (8000264 <HAL_InitTick+0x44>)
 8000252:	4620      	mov	r0, r4
 8000254:	601d      	str	r5, [r3, #0]
 8000256:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000258:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800025a:	bd38      	pop	{r3, r4, r5, pc}
 800025c:	20000000 	.word	0x20000000
 8000260:	20000018 	.word	0x20000018
 8000264:	20000004 	.word	0x20000004

08000268 <HAL_Init>:
{
 8000268:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800026a:	2003      	movs	r0, #3
 800026c:	f000 f82c 	bl	80002c8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000270:	2000      	movs	r0, #0
 8000272:	f7ff ffd5 	bl	8000220 <HAL_InitTick>
  HAL_MspInit();
 8000276:	f001 f881 	bl	800137c <HAL_MspInit>
}
 800027a:	2000      	movs	r0, #0
 800027c:	bd08      	pop	{r3, pc}
	...

08000280 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000280:	4a03      	ldr	r2, [pc, #12]	; (8000290 <HAL_IncTick+0x10>)
 8000282:	4b04      	ldr	r3, [pc, #16]	; (8000294 <HAL_IncTick+0x14>)
 8000284:	6811      	ldr	r1, [r2, #0]
 8000286:	781b      	ldrb	r3, [r3, #0]
 8000288:	440b      	add	r3, r1
 800028a:	6013      	str	r3, [r2, #0]
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop
 8000290:	200000cc 	.word	0x200000cc
 8000294:	20000000 	.word	0x20000000

08000298 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000298:	4b01      	ldr	r3, [pc, #4]	; (80002a0 <HAL_GetTick+0x8>)
 800029a:	6818      	ldr	r0, [r3, #0]
}
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop
 80002a0:	200000cc 	.word	0x200000cc

080002a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002a4:	b538      	push	{r3, r4, r5, lr}
 80002a6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80002a8:	f7ff fff6 	bl	8000298 <HAL_GetTick>
 80002ac:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002ae:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80002b0:	bf1e      	ittt	ne
 80002b2:	4b04      	ldrne	r3, [pc, #16]	; (80002c4 <HAL_Delay+0x20>)
 80002b4:	781b      	ldrbne	r3, [r3, #0]
 80002b6:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80002b8:	f7ff ffee 	bl	8000298 <HAL_GetTick>
 80002bc:	1b40      	subs	r0, r0, r5
 80002be:	4284      	cmp	r4, r0
 80002c0:	d8fa      	bhi.n	80002b8 <HAL_Delay+0x14>
  {
  }
}
 80002c2:	bd38      	pop	{r3, r4, r5, pc}
 80002c4:	20000000 	.word	0x20000000

080002c8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002c8:	4a07      	ldr	r2, [pc, #28]	; (80002e8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80002ca:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002cc:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80002ce:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002d2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80002d6:	041b      	lsls	r3, r3, #16
 80002d8:	0c1b      	lsrs	r3, r3, #16
 80002da:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80002de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80002e2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80002e4:	60d3      	str	r3, [r2, #12]
 80002e6:	4770      	bx	lr
 80002e8:	e000ed00 	.word	0xe000ed00

080002ec <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002ec:	4b17      	ldr	r3, [pc, #92]	; (800034c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80002ee:	b530      	push	{r4, r5, lr}
 80002f0:	68dc      	ldr	r4, [r3, #12]
 80002f2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002f6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002fa:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002fc:	2b04      	cmp	r3, #4
 80002fe:	bf28      	it	cs
 8000300:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000302:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000304:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000308:	bf98      	it	ls
 800030a:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800030c:	fa05 f303 	lsl.w	r3, r5, r3
 8000310:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000314:	bf88      	it	hi
 8000316:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000318:	4019      	ands	r1, r3
 800031a:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800031c:	fa05 f404 	lsl.w	r4, r5, r4
 8000320:	3c01      	subs	r4, #1
 8000322:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000324:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000326:	ea42 0201 	orr.w	r2, r2, r1
 800032a:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800032e:	bfa9      	itett	ge
 8000330:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000334:	4b06      	ldrlt	r3, [pc, #24]	; (8000350 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000336:	b2d2      	uxtbge	r2, r2
 8000338:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800033c:	bfbb      	ittet	lt
 800033e:	f000 000f 	andlt.w	r0, r0, #15
 8000342:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000344:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000348:	541a      	strblt	r2, [r3, r0]
 800034a:	bd30      	pop	{r4, r5, pc}
 800034c:	e000ed00 	.word	0xe000ed00
 8000350:	e000ed14 	.word	0xe000ed14

08000354 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000354:	2800      	cmp	r0, #0
 8000356:	db08      	blt.n	800036a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000358:	2301      	movs	r3, #1
 800035a:	0942      	lsrs	r2, r0, #5
 800035c:	f000 001f 	and.w	r0, r0, #31
 8000360:	fa03 f000 	lsl.w	r0, r3, r0
 8000364:	4b01      	ldr	r3, [pc, #4]	; (800036c <HAL_NVIC_EnableIRQ+0x18>)
 8000366:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800036a:	4770      	bx	lr
 800036c:	e000e100 	.word	0xe000e100

08000370 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000370:	3801      	subs	r0, #1
 8000372:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000376:	d20a      	bcs.n	800038e <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000378:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800037a:	4b06      	ldr	r3, [pc, #24]	; (8000394 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800037c:	4a06      	ldr	r2, [pc, #24]	; (8000398 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800037e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000380:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000384:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000386:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000388:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800038a:	601a      	str	r2, [r3, #0]
 800038c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800038e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000390:	4770      	bx	lr
 8000392:	bf00      	nop
 8000394:	e000e010 	.word	0xe000e010
 8000398:	e000ed00 	.word	0xe000ed00

0800039c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800039c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80003a0:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 80003a2:	4626      	mov	r6, r4
 80003a4:	4b66      	ldr	r3, [pc, #408]	; (8000540 <HAL_GPIO_Init+0x1a4>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80003a6:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 8000550 <HAL_GPIO_Init+0x1b4>
 80003aa:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 8000554 <HAL_GPIO_Init+0x1b8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80003ae:	680a      	ldr	r2, [r1, #0]
 80003b0:	fa32 f506 	lsrs.w	r5, r2, r6
 80003b4:	d102      	bne.n	80003bc <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 80003b6:	b003      	add	sp, #12
 80003b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 80003bc:	f04f 0801 	mov.w	r8, #1
 80003c0:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80003c4:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 80003c8:	4590      	cmp	r8, r2
 80003ca:	d17f      	bne.n	80004cc <HAL_GPIO_Init+0x130>
      switch (GPIO_Init->Mode)
 80003cc:	684d      	ldr	r5, [r1, #4]
 80003ce:	2d12      	cmp	r5, #18
 80003d0:	f000 80aa 	beq.w	8000528 <HAL_GPIO_Init+0x18c>
 80003d4:	f200 8083 	bhi.w	80004de <HAL_GPIO_Init+0x142>
 80003d8:	2d02      	cmp	r5, #2
 80003da:	f000 80a2 	beq.w	8000522 <HAL_GPIO_Init+0x186>
 80003de:	d877      	bhi.n	80004d0 <HAL_GPIO_Init+0x134>
 80003e0:	2d00      	cmp	r5, #0
 80003e2:	f000 8089 	beq.w	80004f8 <HAL_GPIO_Init+0x15c>
 80003e6:	2d01      	cmp	r5, #1
 80003e8:	f000 8099 	beq.w	800051e <HAL_GPIO_Init+0x182>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80003ec:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80003f0:	2aff      	cmp	r2, #255	; 0xff
 80003f2:	bf93      	iteet	ls
 80003f4:	4682      	movls	sl, r0
 80003f6:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80003fa:	3d08      	subhi	r5, #8
 80003fc:	f8d0 b000 	ldrls.w	fp, [r0]
 8000400:	bf92      	itee	ls
 8000402:	00b5      	lslls	r5, r6, #2
 8000404:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000408:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800040a:	fa09 f805 	lsl.w	r8, r9, r5
 800040e:	ea2b 0808 	bic.w	r8, fp, r8
 8000412:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000416:	bf88      	it	hi
 8000418:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800041c:	ea48 0505 	orr.w	r5, r8, r5
 8000420:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000424:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000428:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 800042c:	d04e      	beq.n	80004cc <HAL_GPIO_Init+0x130>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800042e:	4d45      	ldr	r5, [pc, #276]	; (8000544 <HAL_GPIO_Init+0x1a8>)
 8000430:	4f44      	ldr	r7, [pc, #272]	; (8000544 <HAL_GPIO_Init+0x1a8>)
 8000432:	69ad      	ldr	r5, [r5, #24]
 8000434:	f026 0803 	bic.w	r8, r6, #3
 8000438:	f045 0501 	orr.w	r5, r5, #1
 800043c:	61bd      	str	r5, [r7, #24]
 800043e:	69bd      	ldr	r5, [r7, #24]
 8000440:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000444:	f005 0501 	and.w	r5, r5, #1
 8000448:	9501      	str	r5, [sp, #4]
 800044a:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800044e:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000452:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000454:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8000458:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800045c:	fa09 f90b 	lsl.w	r9, r9, fp
 8000460:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000464:	4d38      	ldr	r5, [pc, #224]	; (8000548 <HAL_GPIO_Init+0x1ac>)
 8000466:	42a8      	cmp	r0, r5
 8000468:	d063      	beq.n	8000532 <HAL_GPIO_Init+0x196>
 800046a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800046e:	42a8      	cmp	r0, r5
 8000470:	d061      	beq.n	8000536 <HAL_GPIO_Init+0x19a>
 8000472:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000476:	42a8      	cmp	r0, r5
 8000478:	d05f      	beq.n	800053a <HAL_GPIO_Init+0x19e>
 800047a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800047e:	42a8      	cmp	r0, r5
 8000480:	bf0c      	ite	eq
 8000482:	2503      	moveq	r5, #3
 8000484:	2504      	movne	r5, #4
 8000486:	fa05 f50b 	lsl.w	r5, r5, fp
 800048a:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 800048e:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8000492:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000494:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000498:	bf14      	ite	ne
 800049a:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800049c:	4395      	biceq	r5, r2
 800049e:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80004a0:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80004a2:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80004a6:	bf14      	ite	ne
 80004a8:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80004aa:	4395      	biceq	r5, r2
 80004ac:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 80004ae:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80004b0:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80004b4:	bf14      	ite	ne
 80004b6:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80004b8:	4395      	biceq	r5, r2
 80004ba:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 80004bc:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80004be:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80004c2:	bf14      	ite	ne
 80004c4:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80004c6:	ea25 0202 	biceq.w	r2, r5, r2
 80004ca:	60da      	str	r2, [r3, #12]
	position++;
 80004cc:	3601      	adds	r6, #1
 80004ce:	e76e      	b.n	80003ae <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 80004d0:	2d03      	cmp	r5, #3
 80004d2:	d022      	beq.n	800051a <HAL_GPIO_Init+0x17e>
 80004d4:	2d11      	cmp	r5, #17
 80004d6:	d189      	bne.n	80003ec <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80004d8:	68cc      	ldr	r4, [r1, #12]
 80004da:	3404      	adds	r4, #4
          break;
 80004dc:	e786      	b.n	80003ec <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 80004de:	4f1b      	ldr	r7, [pc, #108]	; (800054c <HAL_GPIO_Init+0x1b0>)
 80004e0:	42bd      	cmp	r5, r7
 80004e2:	d009      	beq.n	80004f8 <HAL_GPIO_Init+0x15c>
 80004e4:	d812      	bhi.n	800050c <HAL_GPIO_Init+0x170>
 80004e6:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8000558 <HAL_GPIO_Init+0x1bc>
 80004ea:	454d      	cmp	r5, r9
 80004ec:	d004      	beq.n	80004f8 <HAL_GPIO_Init+0x15c>
 80004ee:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80004f2:	454d      	cmp	r5, r9
 80004f4:	f47f af7a 	bne.w	80003ec <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80004f8:	688c      	ldr	r4, [r1, #8]
 80004fa:	b1c4      	cbz	r4, 800052e <HAL_GPIO_Init+0x192>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80004fc:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 80004fe:	bf0c      	ite	eq
 8000500:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000504:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000508:	2408      	movs	r4, #8
 800050a:	e76f      	b.n	80003ec <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 800050c:	4575      	cmp	r5, lr
 800050e:	d0f3      	beq.n	80004f8 <HAL_GPIO_Init+0x15c>
 8000510:	4565      	cmp	r5, ip
 8000512:	d0f1      	beq.n	80004f8 <HAL_GPIO_Init+0x15c>
 8000514:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800055c <HAL_GPIO_Init+0x1c0>
 8000518:	e7eb      	b.n	80004f2 <HAL_GPIO_Init+0x156>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800051a:	2400      	movs	r4, #0
 800051c:	e766      	b.n	80003ec <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800051e:	68cc      	ldr	r4, [r1, #12]
          break;
 8000520:	e764      	b.n	80003ec <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000522:	68cc      	ldr	r4, [r1, #12]
 8000524:	3408      	adds	r4, #8
          break;
 8000526:	e761      	b.n	80003ec <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000528:	68cc      	ldr	r4, [r1, #12]
 800052a:	340c      	adds	r4, #12
          break;
 800052c:	e75e      	b.n	80003ec <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800052e:	2404      	movs	r4, #4
 8000530:	e75c      	b.n	80003ec <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000532:	2500      	movs	r5, #0
 8000534:	e7a7      	b.n	8000486 <HAL_GPIO_Init+0xea>
 8000536:	2501      	movs	r5, #1
 8000538:	e7a5      	b.n	8000486 <HAL_GPIO_Init+0xea>
 800053a:	2502      	movs	r5, #2
 800053c:	e7a3      	b.n	8000486 <HAL_GPIO_Init+0xea>
 800053e:	bf00      	nop
 8000540:	40010400 	.word	0x40010400
 8000544:	40021000 	.word	0x40021000
 8000548:	40010800 	.word	0x40010800
 800054c:	10210000 	.word	0x10210000
 8000550:	10310000 	.word	0x10310000
 8000554:	10320000 	.word	0x10320000
 8000558:	10110000 	.word	0x10110000
 800055c:	10220000 	.word	0x10220000

08000560 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000560:	6883      	ldr	r3, [r0, #8]
 8000562:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000564:	bf14      	ite	ne
 8000566:	2001      	movne	r0, #1
 8000568:	2000      	moveq	r0, #0
 800056a:	4770      	bx	lr

0800056c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800056c:	b10a      	cbz	r2, 8000572 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800056e:	6101      	str	r1, [r0, #16]
 8000570:	4770      	bx	lr
 8000572:	0409      	lsls	r1, r1, #16
 8000574:	e7fb      	b.n	800056e <HAL_GPIO_WritePin+0x2>

08000576 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000576:	4770      	bx	lr

08000578 <HAL_GPIO_EXTI_IRQHandler>:
{
 8000578:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800057a:	4b04      	ldr	r3, [pc, #16]	; (800058c <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800057c:	6959      	ldr	r1, [r3, #20]
 800057e:	4201      	tst	r1, r0
 8000580:	d002      	beq.n	8000588 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000582:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000584:	f7ff fff7 	bl	8000576 <HAL_GPIO_EXTI_Callback>
 8000588:	bd08      	pop	{r3, pc}
 800058a:	bf00      	nop
 800058c:	40010400 	.word	0x40010400

08000590 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000590:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000594:	4605      	mov	r5, r0
 8000596:	b908      	cbnz	r0, 800059c <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8000598:	2001      	movs	r0, #1
 800059a:	e03c      	b.n	8000616 <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800059c:	6803      	ldr	r3, [r0, #0]
 800059e:	07db      	lsls	r3, r3, #31
 80005a0:	d410      	bmi.n	80005c4 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80005a2:	682b      	ldr	r3, [r5, #0]
 80005a4:	079f      	lsls	r7, r3, #30
 80005a6:	d45d      	bmi.n	8000664 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80005a8:	682b      	ldr	r3, [r5, #0]
 80005aa:	0719      	lsls	r1, r3, #28
 80005ac:	f100 8094 	bmi.w	80006d8 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80005b0:	682b      	ldr	r3, [r5, #0]
 80005b2:	075a      	lsls	r2, r3, #29
 80005b4:	f100 80be 	bmi.w	8000734 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80005b8:	69e8      	ldr	r0, [r5, #28]
 80005ba:	2800      	cmp	r0, #0
 80005bc:	f040 812c 	bne.w	8000818 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 80005c0:	2000      	movs	r0, #0
 80005c2:	e028      	b.n	8000616 <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80005c4:	4c8f      	ldr	r4, [pc, #572]	; (8000804 <HAL_RCC_OscConfig+0x274>)
 80005c6:	6863      	ldr	r3, [r4, #4]
 80005c8:	f003 030c 	and.w	r3, r3, #12
 80005cc:	2b04      	cmp	r3, #4
 80005ce:	d007      	beq.n	80005e0 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80005d0:	6863      	ldr	r3, [r4, #4]
 80005d2:	f003 030c 	and.w	r3, r3, #12
 80005d6:	2b08      	cmp	r3, #8
 80005d8:	d109      	bne.n	80005ee <HAL_RCC_OscConfig+0x5e>
 80005da:	6863      	ldr	r3, [r4, #4]
 80005dc:	03de      	lsls	r6, r3, #15
 80005de:	d506      	bpl.n	80005ee <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80005e0:	6823      	ldr	r3, [r4, #0]
 80005e2:	039c      	lsls	r4, r3, #14
 80005e4:	d5dd      	bpl.n	80005a2 <HAL_RCC_OscConfig+0x12>
 80005e6:	686b      	ldr	r3, [r5, #4]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d1da      	bne.n	80005a2 <HAL_RCC_OscConfig+0x12>
 80005ec:	e7d4      	b.n	8000598 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005ee:	686b      	ldr	r3, [r5, #4]
 80005f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80005f4:	d112      	bne.n	800061c <HAL_RCC_OscConfig+0x8c>
 80005f6:	6823      	ldr	r3, [r4, #0]
 80005f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005fc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80005fe:	f7ff fe4b 	bl	8000298 <HAL_GetTick>
 8000602:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000604:	6823      	ldr	r3, [r4, #0]
 8000606:	0398      	lsls	r0, r3, #14
 8000608:	d4cb      	bmi.n	80005a2 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800060a:	f7ff fe45 	bl	8000298 <HAL_GetTick>
 800060e:	1b80      	subs	r0, r0, r6
 8000610:	2864      	cmp	r0, #100	; 0x64
 8000612:	d9f7      	bls.n	8000604 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000614:	2003      	movs	r0, #3
}
 8000616:	b002      	add	sp, #8
 8000618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800061c:	b99b      	cbnz	r3, 8000646 <HAL_RCC_OscConfig+0xb6>
 800061e:	6823      	ldr	r3, [r4, #0]
 8000620:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000624:	6023      	str	r3, [r4, #0]
 8000626:	6823      	ldr	r3, [r4, #0]
 8000628:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800062c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800062e:	f7ff fe33 	bl	8000298 <HAL_GetTick>
 8000632:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000634:	6823      	ldr	r3, [r4, #0]
 8000636:	0399      	lsls	r1, r3, #14
 8000638:	d5b3      	bpl.n	80005a2 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800063a:	f7ff fe2d 	bl	8000298 <HAL_GetTick>
 800063e:	1b80      	subs	r0, r0, r6
 8000640:	2864      	cmp	r0, #100	; 0x64
 8000642:	d9f7      	bls.n	8000634 <HAL_RCC_OscConfig+0xa4>
 8000644:	e7e6      	b.n	8000614 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000646:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800064a:	6823      	ldr	r3, [r4, #0]
 800064c:	d103      	bne.n	8000656 <HAL_RCC_OscConfig+0xc6>
 800064e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000652:	6023      	str	r3, [r4, #0]
 8000654:	e7cf      	b.n	80005f6 <HAL_RCC_OscConfig+0x66>
 8000656:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800065a:	6023      	str	r3, [r4, #0]
 800065c:	6823      	ldr	r3, [r4, #0]
 800065e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000662:	e7cb      	b.n	80005fc <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000664:	4c67      	ldr	r4, [pc, #412]	; (8000804 <HAL_RCC_OscConfig+0x274>)
 8000666:	6863      	ldr	r3, [r4, #4]
 8000668:	f013 0f0c 	tst.w	r3, #12
 800066c:	d007      	beq.n	800067e <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800066e:	6863      	ldr	r3, [r4, #4]
 8000670:	f003 030c 	and.w	r3, r3, #12
 8000674:	2b08      	cmp	r3, #8
 8000676:	d110      	bne.n	800069a <HAL_RCC_OscConfig+0x10a>
 8000678:	6863      	ldr	r3, [r4, #4]
 800067a:	03da      	lsls	r2, r3, #15
 800067c:	d40d      	bmi.n	800069a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800067e:	6823      	ldr	r3, [r4, #0]
 8000680:	079b      	lsls	r3, r3, #30
 8000682:	d502      	bpl.n	800068a <HAL_RCC_OscConfig+0xfa>
 8000684:	692b      	ldr	r3, [r5, #16]
 8000686:	2b01      	cmp	r3, #1
 8000688:	d186      	bne.n	8000598 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800068a:	6823      	ldr	r3, [r4, #0]
 800068c:	696a      	ldr	r2, [r5, #20]
 800068e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000692:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000696:	6023      	str	r3, [r4, #0]
 8000698:	e786      	b.n	80005a8 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800069a:	692a      	ldr	r2, [r5, #16]
 800069c:	4b5a      	ldr	r3, [pc, #360]	; (8000808 <HAL_RCC_OscConfig+0x278>)
 800069e:	b16a      	cbz	r2, 80006bc <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 80006a0:	2201      	movs	r2, #1
 80006a2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80006a4:	f7ff fdf8 	bl	8000298 <HAL_GetTick>
 80006a8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80006aa:	6823      	ldr	r3, [r4, #0]
 80006ac:	079f      	lsls	r7, r3, #30
 80006ae:	d4ec      	bmi.n	800068a <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80006b0:	f7ff fdf2 	bl	8000298 <HAL_GetTick>
 80006b4:	1b80      	subs	r0, r0, r6
 80006b6:	2802      	cmp	r0, #2
 80006b8:	d9f7      	bls.n	80006aa <HAL_RCC_OscConfig+0x11a>
 80006ba:	e7ab      	b.n	8000614 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80006bc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80006be:	f7ff fdeb 	bl	8000298 <HAL_GetTick>
 80006c2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80006c4:	6823      	ldr	r3, [r4, #0]
 80006c6:	0798      	lsls	r0, r3, #30
 80006c8:	f57f af6e 	bpl.w	80005a8 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80006cc:	f7ff fde4 	bl	8000298 <HAL_GetTick>
 80006d0:	1b80      	subs	r0, r0, r6
 80006d2:	2802      	cmp	r0, #2
 80006d4:	d9f6      	bls.n	80006c4 <HAL_RCC_OscConfig+0x134>
 80006d6:	e79d      	b.n	8000614 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80006d8:	69aa      	ldr	r2, [r5, #24]
 80006da:	4c4a      	ldr	r4, [pc, #296]	; (8000804 <HAL_RCC_OscConfig+0x274>)
 80006dc:	4b4b      	ldr	r3, [pc, #300]	; (800080c <HAL_RCC_OscConfig+0x27c>)
 80006de:	b1da      	cbz	r2, 8000718 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 80006e0:	2201      	movs	r2, #1
 80006e2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80006e4:	f7ff fdd8 	bl	8000298 <HAL_GetTick>
 80006e8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80006ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80006ec:	079b      	lsls	r3, r3, #30
 80006ee:	d50d      	bpl.n	800070c <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80006f0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80006f4:	4b46      	ldr	r3, [pc, #280]	; (8000810 <HAL_RCC_OscConfig+0x280>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80006fc:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80006fe:	bf00      	nop
  }
  while (Delay --);
 8000700:	9b01      	ldr	r3, [sp, #4]
 8000702:	1e5a      	subs	r2, r3, #1
 8000704:	9201      	str	r2, [sp, #4]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d1f9      	bne.n	80006fe <HAL_RCC_OscConfig+0x16e>
 800070a:	e751      	b.n	80005b0 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800070c:	f7ff fdc4 	bl	8000298 <HAL_GetTick>
 8000710:	1b80      	subs	r0, r0, r6
 8000712:	2802      	cmp	r0, #2
 8000714:	d9e9      	bls.n	80006ea <HAL_RCC_OscConfig+0x15a>
 8000716:	e77d      	b.n	8000614 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000718:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800071a:	f7ff fdbd 	bl	8000298 <HAL_GetTick>
 800071e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000720:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000722:	079f      	lsls	r7, r3, #30
 8000724:	f57f af44 	bpl.w	80005b0 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000728:	f7ff fdb6 	bl	8000298 <HAL_GetTick>
 800072c:	1b80      	subs	r0, r0, r6
 800072e:	2802      	cmp	r0, #2
 8000730:	d9f6      	bls.n	8000720 <HAL_RCC_OscConfig+0x190>
 8000732:	e76f      	b.n	8000614 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000734:	4c33      	ldr	r4, [pc, #204]	; (8000804 <HAL_RCC_OscConfig+0x274>)
 8000736:	69e3      	ldr	r3, [r4, #28]
 8000738:	00d8      	lsls	r0, r3, #3
 800073a:	d424      	bmi.n	8000786 <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 800073c:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800073e:	69e3      	ldr	r3, [r4, #28]
 8000740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000744:	61e3      	str	r3, [r4, #28]
 8000746:	69e3      	ldr	r3, [r4, #28]
 8000748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800074c:	9300      	str	r3, [sp, #0]
 800074e:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000750:	4e30      	ldr	r6, [pc, #192]	; (8000814 <HAL_RCC_OscConfig+0x284>)
 8000752:	6833      	ldr	r3, [r6, #0]
 8000754:	05d9      	lsls	r1, r3, #23
 8000756:	d518      	bpl.n	800078a <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000758:	68eb      	ldr	r3, [r5, #12]
 800075a:	2b01      	cmp	r3, #1
 800075c:	d126      	bne.n	80007ac <HAL_RCC_OscConfig+0x21c>
 800075e:	6a23      	ldr	r3, [r4, #32]
 8000760:	f043 0301 	orr.w	r3, r3, #1
 8000764:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000766:	f7ff fd97 	bl	8000298 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800076a:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800076e:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000770:	6a23      	ldr	r3, [r4, #32]
 8000772:	079b      	lsls	r3, r3, #30
 8000774:	d53f      	bpl.n	80007f6 <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 8000776:	2f00      	cmp	r7, #0
 8000778:	f43f af1e 	beq.w	80005b8 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 800077c:	69e3      	ldr	r3, [r4, #28]
 800077e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000782:	61e3      	str	r3, [r4, #28]
 8000784:	e718      	b.n	80005b8 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8000786:	2700      	movs	r7, #0
 8000788:	e7e2      	b.n	8000750 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800078a:	6833      	ldr	r3, [r6, #0]
 800078c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000790:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000792:	f7ff fd81 	bl	8000298 <HAL_GetTick>
 8000796:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000798:	6833      	ldr	r3, [r6, #0]
 800079a:	05da      	lsls	r2, r3, #23
 800079c:	d4dc      	bmi.n	8000758 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800079e:	f7ff fd7b 	bl	8000298 <HAL_GetTick>
 80007a2:	eba0 0008 	sub.w	r0, r0, r8
 80007a6:	2864      	cmp	r0, #100	; 0x64
 80007a8:	d9f6      	bls.n	8000798 <HAL_RCC_OscConfig+0x208>
 80007aa:	e733      	b.n	8000614 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007ac:	b9ab      	cbnz	r3, 80007da <HAL_RCC_OscConfig+0x24a>
 80007ae:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80007b0:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007b4:	f023 0301 	bic.w	r3, r3, #1
 80007b8:	6223      	str	r3, [r4, #32]
 80007ba:	6a23      	ldr	r3, [r4, #32]
 80007bc:	f023 0304 	bic.w	r3, r3, #4
 80007c0:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80007c2:	f7ff fd69 	bl	8000298 <HAL_GetTick>
 80007c6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80007c8:	6a23      	ldr	r3, [r4, #32]
 80007ca:	0798      	lsls	r0, r3, #30
 80007cc:	d5d3      	bpl.n	8000776 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80007ce:	f7ff fd63 	bl	8000298 <HAL_GetTick>
 80007d2:	1b80      	subs	r0, r0, r6
 80007d4:	4540      	cmp	r0, r8
 80007d6:	d9f7      	bls.n	80007c8 <HAL_RCC_OscConfig+0x238>
 80007d8:	e71c      	b.n	8000614 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007da:	2b05      	cmp	r3, #5
 80007dc:	6a23      	ldr	r3, [r4, #32]
 80007de:	d103      	bne.n	80007e8 <HAL_RCC_OscConfig+0x258>
 80007e0:	f043 0304 	orr.w	r3, r3, #4
 80007e4:	6223      	str	r3, [r4, #32]
 80007e6:	e7ba      	b.n	800075e <HAL_RCC_OscConfig+0x1ce>
 80007e8:	f023 0301 	bic.w	r3, r3, #1
 80007ec:	6223      	str	r3, [r4, #32]
 80007ee:	6a23      	ldr	r3, [r4, #32]
 80007f0:	f023 0304 	bic.w	r3, r3, #4
 80007f4:	e7b6      	b.n	8000764 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80007f6:	f7ff fd4f 	bl	8000298 <HAL_GetTick>
 80007fa:	eba0 0008 	sub.w	r0, r0, r8
 80007fe:	42b0      	cmp	r0, r6
 8000800:	d9b6      	bls.n	8000770 <HAL_RCC_OscConfig+0x1e0>
 8000802:	e707      	b.n	8000614 <HAL_RCC_OscConfig+0x84>
 8000804:	40021000 	.word	0x40021000
 8000808:	42420000 	.word	0x42420000
 800080c:	42420480 	.word	0x42420480
 8000810:	20000018 	.word	0x20000018
 8000814:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000818:	4b2a      	ldr	r3, [pc, #168]	; (80008c4 <HAL_RCC_OscConfig+0x334>)
 800081a:	685a      	ldr	r2, [r3, #4]
 800081c:	461c      	mov	r4, r3
 800081e:	f002 020c 	and.w	r2, r2, #12
 8000822:	2a08      	cmp	r2, #8
 8000824:	d03d      	beq.n	80008a2 <HAL_RCC_OscConfig+0x312>
 8000826:	2300      	movs	r3, #0
 8000828:	4e27      	ldr	r6, [pc, #156]	; (80008c8 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800082a:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800082c:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800082e:	d12b      	bne.n	8000888 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 8000830:	f7ff fd32 	bl	8000298 <HAL_GetTick>
 8000834:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000836:	6823      	ldr	r3, [r4, #0]
 8000838:	0199      	lsls	r1, r3, #6
 800083a:	d41f      	bmi.n	800087c <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800083c:	6a2b      	ldr	r3, [r5, #32]
 800083e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000842:	d105      	bne.n	8000850 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000844:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000846:	68a9      	ldr	r1, [r5, #8]
 8000848:	f022 020f 	bic.w	r2, r2, #15
 800084c:	430a      	orrs	r2, r1
 800084e:	62e2      	str	r2, [r4, #44]	; 0x2c
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000850:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000852:	6862      	ldr	r2, [r4, #4]
 8000854:	430b      	orrs	r3, r1
 8000856:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800085a:	4313      	orrs	r3, r2
 800085c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800085e:	2301      	movs	r3, #1
 8000860:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000862:	f7ff fd19 	bl	8000298 <HAL_GetTick>
 8000866:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000868:	6823      	ldr	r3, [r4, #0]
 800086a:	019a      	lsls	r2, r3, #6
 800086c:	f53f aea8 	bmi.w	80005c0 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000870:	f7ff fd12 	bl	8000298 <HAL_GetTick>
 8000874:	1b40      	subs	r0, r0, r5
 8000876:	2802      	cmp	r0, #2
 8000878:	d9f6      	bls.n	8000868 <HAL_RCC_OscConfig+0x2d8>
 800087a:	e6cb      	b.n	8000614 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800087c:	f7ff fd0c 	bl	8000298 <HAL_GetTick>
 8000880:	1bc0      	subs	r0, r0, r7
 8000882:	2802      	cmp	r0, #2
 8000884:	d9d7      	bls.n	8000836 <HAL_RCC_OscConfig+0x2a6>
 8000886:	e6c5      	b.n	8000614 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000888:	f7ff fd06 	bl	8000298 <HAL_GetTick>
 800088c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800088e:	6823      	ldr	r3, [r4, #0]
 8000890:	019b      	lsls	r3, r3, #6
 8000892:	f57f ae95 	bpl.w	80005c0 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000896:	f7ff fcff 	bl	8000298 <HAL_GetTick>
 800089a:	1b40      	subs	r0, r0, r5
 800089c:	2802      	cmp	r0, #2
 800089e:	d9f6      	bls.n	800088e <HAL_RCC_OscConfig+0x2fe>
 80008a0:	e6b8      	b.n	8000614 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80008a2:	2801      	cmp	r0, #1
 80008a4:	f43f aeb7 	beq.w	8000616 <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 80008a8:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80008aa:	6a2b      	ldr	r3, [r5, #32]
 80008ac:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 80008b0:	429a      	cmp	r2, r3
 80008b2:	f47f ae71 	bne.w	8000598 <HAL_RCC_OscConfig+0x8>
 80008b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80008b8:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 80008bc:	1ac0      	subs	r0, r0, r3
 80008be:	bf18      	it	ne
 80008c0:	2001      	movne	r0, #1
 80008c2:	e6a8      	b.n	8000616 <HAL_RCC_OscConfig+0x86>
 80008c4:	40021000 	.word	0x40021000
 80008c8:	42420060 	.word	0x42420060

080008cc <HAL_RCC_GetSysClockFreq>:
{
 80008cc:	b530      	push	{r4, r5, lr}
 80008ce:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80008d0:	466c      	mov	r4, sp
 80008d2:	4b1b      	ldr	r3, [pc, #108]	; (8000940 <HAL_RCC_GetSysClockFreq+0x74>)
 80008d4:	f103 0510 	add.w	r5, r3, #16
 80008d8:	4622      	mov	r2, r4
 80008da:	6818      	ldr	r0, [r3, #0]
 80008dc:	6859      	ldr	r1, [r3, #4]
 80008de:	3308      	adds	r3, #8
 80008e0:	c203      	stmia	r2!, {r0, r1}
 80008e2:	42ab      	cmp	r3, r5
 80008e4:	4614      	mov	r4, r2
 80008e6:	d1f7      	bne.n	80008d8 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 80008e8:	4b16      	ldr	r3, [pc, #88]	; (8000944 <HAL_RCC_GetSysClockFreq+0x78>)
 80008ea:	ac04      	add	r4, sp, #16
 80008ec:	f103 0510 	add.w	r5, r3, #16
 80008f0:	4622      	mov	r2, r4
 80008f2:	6818      	ldr	r0, [r3, #0]
 80008f4:	6859      	ldr	r1, [r3, #4]
 80008f6:	3308      	adds	r3, #8
 80008f8:	c203      	stmia	r2!, {r0, r1}
 80008fa:	42ab      	cmp	r3, r5
 80008fc:	4614      	mov	r4, r2
 80008fe:	d1f7      	bne.n	80008f0 <HAL_RCC_GetSysClockFreq+0x24>
  tmpreg = RCC->CFGR;
 8000900:	4911      	ldr	r1, [pc, #68]	; (8000948 <HAL_RCC_GetSysClockFreq+0x7c>)
 8000902:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000904:	f003 020c 	and.w	r2, r3, #12
 8000908:	2a08      	cmp	r2, #8
 800090a:	d117      	bne.n	800093c <HAL_RCC_GetSysClockFreq+0x70>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800090c:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000910:	a808      	add	r0, sp, #32
 8000912:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000914:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000916:	f812 2c20 	ldrb.w	r2, [r2, #-32]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800091a:	d50c      	bpl.n	8000936 <HAL_RCC_GetSysClockFreq+0x6a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 800091c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800091e:	480b      	ldr	r0, [pc, #44]	; (800094c <HAL_RCC_GetSysClockFreq+0x80>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8000920:	f003 030f 	and.w	r3, r3, #15
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000924:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8000926:	aa08      	add	r2, sp, #32
 8000928:	4413      	add	r3, r2
 800092a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800092e:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000932:	b009      	add	sp, #36	; 0x24
 8000934:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000936:	4806      	ldr	r0, [pc, #24]	; (8000950 <HAL_RCC_GetSysClockFreq+0x84>)
 8000938:	4350      	muls	r0, r2
 800093a:	e7fa      	b.n	8000932 <HAL_RCC_GetSysClockFreq+0x66>
      sysclockfreq = HSE_VALUE;
 800093c:	4803      	ldr	r0, [pc, #12]	; (800094c <HAL_RCC_GetSysClockFreq+0x80>)
  return sysclockfreq;
 800093e:	e7f8      	b.n	8000932 <HAL_RCC_GetSysClockFreq+0x66>
 8000940:	08001f0c 	.word	0x08001f0c
 8000944:	08001f1c 	.word	0x08001f1c
 8000948:	40021000 	.word	0x40021000
 800094c:	007a1200 	.word	0x007a1200
 8000950:	003d0900 	.word	0x003d0900

08000954 <HAL_RCC_ClockConfig>:
{
 8000954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (RCC_ClkInitStruct == NULL)
 8000956:	4605      	mov	r5, r0
 8000958:	b908      	cbnz	r0, 800095e <HAL_RCC_ClockConfig+0xa>
    return HAL_ERROR;
 800095a:	2001      	movs	r0, #1
 800095c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800095e:	6802      	ldr	r2, [r0, #0]
 8000960:	4c30      	ldr	r4, [pc, #192]	; (8000a24 <HAL_RCC_ClockConfig+0xd0>)
 8000962:	f012 0f02 	tst.w	r2, #2
 8000966:	d011      	beq.n	800098c <HAL_RCC_ClockConfig+0x38>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000968:	0757      	lsls	r7, r2, #29
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800096a:	bf42      	ittt	mi
 800096c:	6863      	ldrmi	r3, [r4, #4]
 800096e:	f443 63e0 	orrmi.w	r3, r3, #1792	; 0x700
 8000972:	6063      	strmi	r3, [r4, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000974:	0716      	lsls	r6, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000976:	bf42      	ittt	mi
 8000978:	6863      	ldrmi	r3, [r4, #4]
 800097a:	f443 5360 	orrmi.w	r3, r3, #14336	; 0x3800
 800097e:	6063      	strmi	r3, [r4, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000980:	6863      	ldr	r3, [r4, #4]
 8000982:	6881      	ldr	r1, [r0, #8]
 8000984:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000988:	430b      	orrs	r3, r1
 800098a:	6063      	str	r3, [r4, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800098c:	07d0      	lsls	r0, r2, #31
 800098e:	d41b      	bmi.n	80009c8 <HAL_RCC_ClockConfig+0x74>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000990:	682a      	ldr	r2, [r5, #0]
 8000992:	0751      	lsls	r1, r2, #29
 8000994:	d43f      	bmi.n	8000a16 <HAL_RCC_ClockConfig+0xc2>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000996:	0713      	lsls	r3, r2, #28
 8000998:	d506      	bpl.n	80009a8 <HAL_RCC_ClockConfig+0x54>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800099a:	6863      	ldr	r3, [r4, #4]
 800099c:	692a      	ldr	r2, [r5, #16]
 800099e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80009a2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80009a6:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80009a8:	f7ff ff90 	bl	80008cc <HAL_RCC_GetSysClockFreq>
 80009ac:	6863      	ldr	r3, [r4, #4]
 80009ae:	4a1e      	ldr	r2, [pc, #120]	; (8000a28 <HAL_RCC_ClockConfig+0xd4>)
 80009b0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80009b4:	5cd3      	ldrb	r3, [r2, r3]
 80009b6:	40d8      	lsrs	r0, r3
 80009b8:	4b1c      	ldr	r3, [pc, #112]	; (8000a2c <HAL_RCC_ClockConfig+0xd8>)
 80009ba:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80009bc:	4b1c      	ldr	r3, [pc, #112]	; (8000a30 <HAL_RCC_ClockConfig+0xdc>)
 80009be:	6818      	ldr	r0, [r3, #0]
 80009c0:	f7ff fc2e 	bl	8000220 <HAL_InitTick>
  return HAL_OK;
 80009c4:	2000      	movs	r0, #0
 80009c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80009c8:	686a      	ldr	r2, [r5, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009ca:	6823      	ldr	r3, [r4, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80009cc:	2a01      	cmp	r2, #1
 80009ce:	d11a      	bne.n	8000a06 <HAL_RCC_ClockConfig+0xb2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009d0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009d4:	d0c1      	beq.n	800095a <HAL_RCC_ClockConfig+0x6>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80009d6:	6863      	ldr	r3, [r4, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009d8:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80009dc:	f023 0303 	bic.w	r3, r3, #3
 80009e0:	4313      	orrs	r3, r2
 80009e2:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80009e4:	f7ff fc58 	bl	8000298 <HAL_GetTick>
 80009e8:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80009ea:	6863      	ldr	r3, [r4, #4]
 80009ec:	686a      	ldr	r2, [r5, #4]
 80009ee:	f003 030c 	and.w	r3, r3, #12
 80009f2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80009f6:	d0cb      	beq.n	8000990 <HAL_RCC_ClockConfig+0x3c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009f8:	f7ff fc4e 	bl	8000298 <HAL_GetTick>
 80009fc:	1b80      	subs	r0, r0, r6
 80009fe:	42b8      	cmp	r0, r7
 8000a00:	d9f3      	bls.n	80009ea <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 8000a02:	2003      	movs	r0, #3
}
 8000a04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000a06:	2a02      	cmp	r2, #2
 8000a08:	d102      	bne.n	8000a10 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000a0a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000a0e:	e7e1      	b.n	80009d4 <HAL_RCC_ClockConfig+0x80>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a10:	f013 0f02 	tst.w	r3, #2
 8000a14:	e7de      	b.n	80009d4 <HAL_RCC_ClockConfig+0x80>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000a16:	6863      	ldr	r3, [r4, #4]
 8000a18:	68e9      	ldr	r1, [r5, #12]
 8000a1a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000a1e:	430b      	orrs	r3, r1
 8000a20:	6063      	str	r3, [r4, #4]
 8000a22:	e7b8      	b.n	8000996 <HAL_RCC_ClockConfig+0x42>
 8000a24:	40021000 	.word	0x40021000
 8000a28:	08001f56 	.word	0x08001f56
 8000a2c:	20000018 	.word	0x20000018
 8000a30:	20000004 	.word	0x20000004

08000a34 <HAL_TIM_PeriodElapsedCallback>:
 8000a34:	4770      	bx	lr

08000a36 <HAL_TIM_OC_DelayElapsedCallback>:
 8000a36:	4770      	bx	lr

08000a38 <HAL_TIM_IC_CaptureCallback>:
 8000a38:	4770      	bx	lr

08000a3a <HAL_TIM_PWM_PulseFinishedCallback>:
 8000a3a:	4770      	bx	lr

08000a3c <HAL_TIM_TriggerCallback>:
 8000a3c:	4770      	bx	lr

08000a3e <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000a3e:	6803      	ldr	r3, [r0, #0]
{
 8000a40:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000a42:	691a      	ldr	r2, [r3, #16]
{
 8000a44:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000a46:	0791      	lsls	r1, r2, #30
 8000a48:	d50e      	bpl.n	8000a68 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8000a4a:	68da      	ldr	r2, [r3, #12]
 8000a4c:	0792      	lsls	r2, r2, #30
 8000a4e:	d50b      	bpl.n	8000a68 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000a50:	f06f 0202 	mvn.w	r2, #2
 8000a54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000a56:	2201      	movs	r2, #1

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000a58:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000a5a:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000a5c:	079b      	lsls	r3, r3, #30
 8000a5e:	d077      	beq.n	8000b50 <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8000a60:	f7ff ffea 	bl	8000a38 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000a64:	2300      	movs	r3, #0
 8000a66:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000a68:	6823      	ldr	r3, [r4, #0]
 8000a6a:	691a      	ldr	r2, [r3, #16]
 8000a6c:	0750      	lsls	r0, r2, #29
 8000a6e:	d510      	bpl.n	8000a92 <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8000a70:	68da      	ldr	r2, [r3, #12]
 8000a72:	0751      	lsls	r1, r2, #29
 8000a74:	d50d      	bpl.n	8000a92 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000a76:	f06f 0204 	mvn.w	r2, #4
 8000a7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000a7c:	2202      	movs	r2, #2
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000a7e:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000a80:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000a82:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000a86:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000a88:	d068      	beq.n	8000b5c <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8000a8a:	f7ff ffd5 	bl	8000a38 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000a92:	6823      	ldr	r3, [r4, #0]
 8000a94:	691a      	ldr	r2, [r3, #16]
 8000a96:	0712      	lsls	r2, r2, #28
 8000a98:	d50f      	bpl.n	8000aba <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8000a9a:	68da      	ldr	r2, [r3, #12]
 8000a9c:	0710      	lsls	r0, r2, #28
 8000a9e:	d50c      	bpl.n	8000aba <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000aa0:	f06f 0208 	mvn.w	r2, #8
 8000aa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000aa6:	2204      	movs	r2, #4
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000aa8:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000aaa:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000aac:	0799      	lsls	r1, r3, #30
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000aae:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000ab0:	d05a      	beq.n	8000b68 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8000ab2:	f7ff ffc1 	bl	8000a38 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000aba:	6823      	ldr	r3, [r4, #0]
 8000abc:	691a      	ldr	r2, [r3, #16]
 8000abe:	06d2      	lsls	r2, r2, #27
 8000ac0:	d510      	bpl.n	8000ae4 <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8000ac2:	68da      	ldr	r2, [r3, #12]
 8000ac4:	06d0      	lsls	r0, r2, #27
 8000ac6:	d50d      	bpl.n	8000ae4 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000ac8:	f06f 0210 	mvn.w	r2, #16
 8000acc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000ace:	2208      	movs	r2, #8
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000ad0:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000ad2:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000ad4:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000ad8:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000ada:	d04b      	beq.n	8000b74 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8000adc:	f7ff ffac 	bl	8000a38 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000ae4:	6823      	ldr	r3, [r4, #0]
 8000ae6:	691a      	ldr	r2, [r3, #16]
 8000ae8:	07d1      	lsls	r1, r2, #31
 8000aea:	d508      	bpl.n	8000afe <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8000aec:	68da      	ldr	r2, [r3, #12]
 8000aee:	07d2      	lsls	r2, r2, #31
 8000af0:	d505      	bpl.n	8000afe <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000af2:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8000af6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000af8:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8000afa:	f7ff ff9b 	bl	8000a34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000afe:	6823      	ldr	r3, [r4, #0]
 8000b00:	691a      	ldr	r2, [r3, #16]
 8000b02:	0610      	lsls	r0, r2, #24
 8000b04:	d508      	bpl.n	8000b18 <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8000b06:	68da      	ldr	r2, [r3, #12]
 8000b08:	0611      	lsls	r1, r2, #24
 8000b0a:	d505      	bpl.n	8000b18 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000b0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8000b10:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000b12:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8000b14:	f000 f8c1 	bl	8000c9a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000b18:	6823      	ldr	r3, [r4, #0]
 8000b1a:	691a      	ldr	r2, [r3, #16]
 8000b1c:	0652      	lsls	r2, r2, #25
 8000b1e:	d508      	bpl.n	8000b32 <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8000b20:	68da      	ldr	r2, [r3, #12]
 8000b22:	0650      	lsls	r0, r2, #25
 8000b24:	d505      	bpl.n	8000b32 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000b26:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8000b2a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000b2c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8000b2e:	f7ff ff85 	bl	8000a3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000b32:	6823      	ldr	r3, [r4, #0]
 8000b34:	691a      	ldr	r2, [r3, #16]
 8000b36:	0691      	lsls	r1, r2, #26
 8000b38:	d522      	bpl.n	8000b80 <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8000b3a:	68da      	ldr	r2, [r3, #12]
 8000b3c:	0692      	lsls	r2, r2, #26
 8000b3e:	d51f      	bpl.n	8000b80 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000b40:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8000b44:	4620      	mov	r0, r4
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8000b46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000b4a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8000b4c:	f000 b8a4 	b.w	8000c98 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000b50:	f7ff ff71 	bl	8000a36 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000b54:	4620      	mov	r0, r4
 8000b56:	f7ff ff70 	bl	8000a3a <HAL_TIM_PWM_PulseFinishedCallback>
 8000b5a:	e783      	b.n	8000a64 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000b5c:	f7ff ff6b 	bl	8000a36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000b60:	4620      	mov	r0, r4
 8000b62:	f7ff ff6a 	bl	8000a3a <HAL_TIM_PWM_PulseFinishedCallback>
 8000b66:	e792      	b.n	8000a8e <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000b68:	f7ff ff65 	bl	8000a36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000b6c:	4620      	mov	r0, r4
 8000b6e:	f7ff ff64 	bl	8000a3a <HAL_TIM_PWM_PulseFinishedCallback>
 8000b72:	e7a0      	b.n	8000ab6 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000b74:	f7ff ff5f 	bl	8000a36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000b78:	4620      	mov	r0, r4
 8000b7a:	f7ff ff5e 	bl	8000a3a <HAL_TIM_PWM_PulseFinishedCallback>
 8000b7e:	e7af      	b.n	8000ae0 <HAL_TIM_IRQHandler+0xa2>
 8000b80:	bd10      	pop	{r4, pc}
	...

08000b84 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000b84:	4a26      	ldr	r2, [pc, #152]	; (8000c20 <TIM_Base_SetConfig+0x9c>)
  tmpcr1 = TIMx->CR1;
 8000b86:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000b88:	4290      	cmp	r0, r2
 8000b8a:	d00a      	beq.n	8000ba2 <TIM_Base_SetConfig+0x1e>
 8000b8c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000b90:	d007      	beq.n	8000ba2 <TIM_Base_SetConfig+0x1e>
 8000b92:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000b96:	4290      	cmp	r0, r2
 8000b98:	d003      	beq.n	8000ba2 <TIM_Base_SetConfig+0x1e>
 8000b9a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000b9e:	4290      	cmp	r0, r2
 8000ba0:	d111      	bne.n	8000bc6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8000ba2:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000ba4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000ba8:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000baa:	4a1d      	ldr	r2, [pc, #116]	; (8000c20 <TIM_Base_SetConfig+0x9c>)
 8000bac:	4290      	cmp	r0, r2
 8000bae:	d015      	beq.n	8000bdc <TIM_Base_SetConfig+0x58>
 8000bb0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000bb4:	d012      	beq.n	8000bdc <TIM_Base_SetConfig+0x58>
 8000bb6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000bba:	4290      	cmp	r0, r2
 8000bbc:	d00e      	beq.n	8000bdc <TIM_Base_SetConfig+0x58>
 8000bbe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000bc2:	4290      	cmp	r0, r2
 8000bc4:	d00a      	beq.n	8000bdc <TIM_Base_SetConfig+0x58>
 8000bc6:	4a17      	ldr	r2, [pc, #92]	; (8000c24 <TIM_Base_SetConfig+0xa0>)
 8000bc8:	4290      	cmp	r0, r2
 8000bca:	d007      	beq.n	8000bdc <TIM_Base_SetConfig+0x58>
 8000bcc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000bd0:	4290      	cmp	r0, r2
 8000bd2:	d003      	beq.n	8000bdc <TIM_Base_SetConfig+0x58>
 8000bd4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000bd8:	4290      	cmp	r0, r2
 8000bda:	d103      	bne.n	8000be4 <TIM_Base_SetConfig+0x60>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000bdc:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000bde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000be2:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8000be4:	694a      	ldr	r2, [r1, #20]
 8000be6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000bea:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8000bec:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000bee:	688b      	ldr	r3, [r1, #8]
 8000bf0:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8000bf2:	680b      	ldr	r3, [r1, #0]
 8000bf4:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000bf6:	4b0a      	ldr	r3, [pc, #40]	; (8000c20 <TIM_Base_SetConfig+0x9c>)
 8000bf8:	4298      	cmp	r0, r3
 8000bfa:	d00b      	beq.n	8000c14 <TIM_Base_SetConfig+0x90>
 8000bfc:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8000c00:	4298      	cmp	r0, r3
 8000c02:	d007      	beq.n	8000c14 <TIM_Base_SetConfig+0x90>
 8000c04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000c08:	4298      	cmp	r0, r3
 8000c0a:	d003      	beq.n	8000c14 <TIM_Base_SetConfig+0x90>
 8000c0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000c10:	4298      	cmp	r0, r3
 8000c12:	d101      	bne.n	8000c18 <TIM_Base_SetConfig+0x94>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8000c14:	690b      	ldr	r3, [r1, #16]
 8000c16:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	6143      	str	r3, [r0, #20]
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	40012c00 	.word	0x40012c00
 8000c24:	40014000 	.word	0x40014000

08000c28 <HAL_TIM_Base_Init>:
{
 8000c28:	b510      	push	{r4, lr}
  if (htim == NULL)
 8000c2a:	4604      	mov	r4, r0
 8000c2c:	b1a0      	cbz	r0, 8000c58 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8000c2e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000c32:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000c36:	b91b      	cbnz	r3, 8000c40 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000c38:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8000c3c:	f000 fbc0 	bl	80013c0 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8000c40:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000c42:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8000c44:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000c48:	1d21      	adds	r1, r4, #4
 8000c4a:	f7ff ff9b 	bl	8000b84 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8000c4e:	2301      	movs	r3, #1
  return HAL_OK;
 8000c50:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8000c52:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8000c56:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000c58:	2001      	movs	r0, #1
}
 8000c5a:	bd10      	pop	{r4, pc}

08000c5c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8000c5c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8000c60:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	f04f 0302 	mov.w	r3, #2
 8000c68:	d014      	beq.n	8000c94 <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8000c6a:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8000c6c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8000c70:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8000c72:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8000c74:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8000c76:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 8000c78:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 8000c7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8000c80:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8000c82:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8000c84:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8000c86:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8000c8e:	2300      	movs	r3, #0
 8000c90:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8000c94:	4618      	mov	r0, r3

  return HAL_OK;
}
 8000c96:	bd30      	pop	{r4, r5, pc}

08000c98 <HAL_TIMEx_CommutCallback>:
 8000c98:	4770      	bx	lr

08000c9a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8000c9a:	4770      	bx	lr

08000c9c <enableClock>:
}

// enables GPIO RCC Clock
void enableClock(void)
{  
  if(_port == GPIOA)
 8000c9c:	4b24      	ldr	r3, [pc, #144]	; (8000d30 <enableClock+0x94>)
 8000c9e:	4a25      	ldr	r2, [pc, #148]	; (8000d34 <enableClock+0x98>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
{  
 8000ca2:	b086      	sub	sp, #24
  if(_port == GPIOA)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d10b      	bne.n	8000cc0 <enableClock+0x24>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca8:	4b23      	ldr	r3, [pc, #140]	; (8000d38 <enableClock+0x9c>)
 8000caa:	699a      	ldr	r2, [r3, #24]
 8000cac:	f042 0204 	orr.w	r2, r2, #4
 8000cb0:	619a      	str	r2, [r3, #24]
 8000cb2:	699b      	ldr	r3, [r3, #24]
 8000cb4:	f003 0304 	and.w	r3, r3, #4
 8000cb8:	9301      	str	r3, [sp, #4]
 8000cba:	9b01      	ldr	r3, [sp, #4]
		__HAL_RCC_GPIOE_CLK_ENABLE();
	//else if(_port == GPIOF)
	//	__HAL_RCC_GPIOF_CLK_ENABLE();

  // if you have a port that is not listed add it below the other else ifs
}
 8000cbc:	b006      	add	sp, #24
 8000cbe:	4770      	bx	lr
  else if(_port == GPIOB)
 8000cc0:	4a1e      	ldr	r2, [pc, #120]	; (8000d3c <enableClock+0xa0>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d10a      	bne.n	8000cdc <enableClock+0x40>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc6:	4b1c      	ldr	r3, [pc, #112]	; (8000d38 <enableClock+0x9c>)
 8000cc8:	699a      	ldr	r2, [r3, #24]
 8000cca:	f042 0208 	orr.w	r2, r2, #8
 8000cce:	619a      	str	r2, [r3, #24]
 8000cd0:	699b      	ldr	r3, [r3, #24]
 8000cd2:	f003 0308 	and.w	r3, r3, #8
 8000cd6:	9302      	str	r3, [sp, #8]
 8000cd8:	9b02      	ldr	r3, [sp, #8]
 8000cda:	e7ef      	b.n	8000cbc <enableClock+0x20>
	else if(_port == GPIOC)
 8000cdc:	4a18      	ldr	r2, [pc, #96]	; (8000d40 <enableClock+0xa4>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d10a      	bne.n	8000cf8 <enableClock+0x5c>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8000ce2:	4b15      	ldr	r3, [pc, #84]	; (8000d38 <enableClock+0x9c>)
 8000ce4:	699a      	ldr	r2, [r3, #24]
 8000ce6:	f042 0210 	orr.w	r2, r2, #16
 8000cea:	619a      	str	r2, [r3, #24]
 8000cec:	699b      	ldr	r3, [r3, #24]
 8000cee:	f003 0310 	and.w	r3, r3, #16
 8000cf2:	9303      	str	r3, [sp, #12]
 8000cf4:	9b03      	ldr	r3, [sp, #12]
 8000cf6:	e7e1      	b.n	8000cbc <enableClock+0x20>
	else if(_port == GPIOD)
 8000cf8:	4a12      	ldr	r2, [pc, #72]	; (8000d44 <enableClock+0xa8>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d10a      	bne.n	8000d14 <enableClock+0x78>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8000cfe:	4b0e      	ldr	r3, [pc, #56]	; (8000d38 <enableClock+0x9c>)
 8000d00:	699a      	ldr	r2, [r3, #24]
 8000d02:	f042 0220 	orr.w	r2, r2, #32
 8000d06:	619a      	str	r2, [r3, #24]
 8000d08:	699b      	ldr	r3, [r3, #24]
 8000d0a:	f003 0320 	and.w	r3, r3, #32
 8000d0e:	9304      	str	r3, [sp, #16]
 8000d10:	9b04      	ldr	r3, [sp, #16]
 8000d12:	e7d3      	b.n	8000cbc <enableClock+0x20>
	else if(_port == GPIOE)
 8000d14:	4a0c      	ldr	r2, [pc, #48]	; (8000d48 <enableClock+0xac>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d1d0      	bne.n	8000cbc <enableClock+0x20>
		__HAL_RCC_GPIOE_CLK_ENABLE();
 8000d1a:	4b07      	ldr	r3, [pc, #28]	; (8000d38 <enableClock+0x9c>)
 8000d1c:	699a      	ldr	r2, [r3, #24]
 8000d1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000d22:	619a      	str	r2, [r3, #24]
 8000d24:	699b      	ldr	r3, [r3, #24]
 8000d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d2a:	9305      	str	r3, [sp, #20]
 8000d2c:	9b05      	ldr	r3, [sp, #20]
}
 8000d2e:	e7c5      	b.n	8000cbc <enableClock+0x20>
 8000d30:	200000d8 	.word	0x200000d8
 8000d34:	40010800 	.word	0x40010800
 8000d38:	40021000 	.word	0x40021000
 8000d3c:	40010c00 	.word	0x40010c00
 8000d40:	40011000 	.word	0x40011000
 8000d44:	40011400 	.word	0x40011400
 8000d48:	40011800 	.word	0x40011800

08000d4c <pulseEnable>:
    write4bits(value>>4);
    write4bits(value);
  }
}

void pulseEnable(void) {
 8000d4c:	b538      	push	{r3, r4, r5, lr}
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8000d4e:	4d0e      	ldr	r5, [pc, #56]	; (8000d88 <pulseEnable+0x3c>)
 8000d50:	4c0e      	ldr	r4, [pc, #56]	; (8000d8c <pulseEnable+0x40>)
 8000d52:	8829      	ldrh	r1, [r5, #0]
 8000d54:	2200      	movs	r2, #0
 8000d56:	6820      	ldr	r0, [r4, #0]
 8000d58:	f7ff fc08 	bl	800056c <HAL_GPIO_WritePin>
  HAL_Delay(1);    
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	f7ff faa1 	bl	80002a4 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_SET);
 8000d62:	8829      	ldrh	r1, [r5, #0]
 8000d64:	2201      	movs	r2, #1
 8000d66:	6820      	ldr	r0, [r4, #0]
 8000d68:	f7ff fc00 	bl	800056c <HAL_GPIO_WritePin>
  HAL_Delay(1);    // enable pulse must be >450ns
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	f7ff fa99 	bl	80002a4 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8000d72:	6820      	ldr	r0, [r4, #0]
 8000d74:	8829      	ldrh	r1, [r5, #0]
 8000d76:	2200      	movs	r2, #0
 8000d78:	f7ff fbf8 	bl	800056c <HAL_GPIO_WritePin>
  HAL_Delay(1);   // commands need > 37us to settle
}
 8000d7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Delay(1);   // commands need > 37us to settle
 8000d80:	2001      	movs	r0, #1
 8000d82:	f7ff ba8f 	b.w	80002a4 <HAL_Delay>
 8000d86:	bf00      	nop
 8000d88:	200000f0 	.word	0x200000f0
 8000d8c:	200000d8 	.word	0x200000d8

08000d90 <write4bits>:

void write4bits(uint8_t value) {
 8000d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d92:	4607      	mov	r7, r0
  for (int i = 0; i < 4; i++) {
 8000d94:	2400      	movs	r4, #0
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000d96:	4e09      	ldr	r6, [pc, #36]	; (8000dbc <write4bits+0x2c>)
 8000d98:	4d09      	ldr	r5, [pc, #36]	; (8000dc0 <write4bits+0x30>)
 8000d9a:	fa47 f204 	asr.w	r2, r7, r4
 8000d9e:	f836 1014 	ldrh.w	r1, [r6, r4, lsl #1]
 8000da2:	f002 0201 	and.w	r2, r2, #1
 8000da6:	6828      	ldr	r0, [r5, #0]
  for (int i = 0; i < 4; i++) {
 8000da8:	3401      	adds	r4, #1
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000daa:	f7ff fbdf 	bl	800056c <HAL_GPIO_WritePin>
  for (int i = 0; i < 4; i++) {
 8000dae:	2c04      	cmp	r4, #4
 8000db0:	d1f3      	bne.n	8000d9a <write4bits+0xa>
  }

  pulseEnable();
}
 8000db2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  pulseEnable();
 8000db6:	f7ff bfc9 	b.w	8000d4c <pulseEnable>
 8000dba:	bf00      	nop
 8000dbc:	200000de 	.word	0x200000de
 8000dc0:	200000d8 	.word	0x200000d8

08000dc4 <write8bits>:

void write8bits(uint8_t value) {
 8000dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dc6:	4607      	mov	r7, r0
  for (int i = 0; i < 8; i++) {
 8000dc8:	2400      	movs	r4, #0
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000dca:	4e09      	ldr	r6, [pc, #36]	; (8000df0 <write8bits+0x2c>)
 8000dcc:	4d09      	ldr	r5, [pc, #36]	; (8000df4 <write8bits+0x30>)
 8000dce:	fa47 f204 	asr.w	r2, r7, r4
 8000dd2:	f836 1014 	ldrh.w	r1, [r6, r4, lsl #1]
 8000dd6:	f002 0201 	and.w	r2, r2, #1
 8000dda:	6828      	ldr	r0, [r5, #0]
  for (int i = 0; i < 8; i++) {
 8000ddc:	3401      	adds	r4, #1
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000dde:	f7ff fbc5 	bl	800056c <HAL_GPIO_WritePin>
  for (int i = 0; i < 8; i++) {
 8000de2:	2c08      	cmp	r4, #8
 8000de4:	d1f3      	bne.n	8000dce <write8bits+0xa>
  }
  
  pulseEnable();
}
 8000de6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  pulseEnable();
 8000dea:	f7ff bfaf 	b.w	8000d4c <pulseEnable>
 8000dee:	bf00      	nop
 8000df0:	200000de 	.word	0x200000de
 8000df4:	200000d8 	.word	0x200000d8

08000df8 <send>:
void send(uint8_t value, GPIO_PinState mode) {
 8000df8:	b538      	push	{r3, r4, r5, lr}
  HAL_GPIO_WritePin(_port, _rs_pin, mode);
 8000dfa:	4b10      	ldr	r3, [pc, #64]	; (8000e3c <send+0x44>)
 8000dfc:	4d10      	ldr	r5, [pc, #64]	; (8000e40 <send+0x48>)
 8000dfe:	460a      	mov	r2, r1
void send(uint8_t value, GPIO_PinState mode) {
 8000e00:	4604      	mov	r4, r0
  HAL_GPIO_WritePin(_port, _rs_pin, mode);
 8000e02:	8819      	ldrh	r1, [r3, #0]
 8000e04:	6828      	ldr	r0, [r5, #0]
 8000e06:	f7ff fbb1 	bl	800056c <HAL_GPIO_WritePin>
  if (_rw_pin != 255) { 
 8000e0a:	4b0e      	ldr	r3, [pc, #56]	; (8000e44 <send+0x4c>)
 8000e0c:	8819      	ldrh	r1, [r3, #0]
 8000e0e:	29ff      	cmp	r1, #255	; 0xff
 8000e10:	d003      	beq.n	8000e1a <send+0x22>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 8000e12:	2200      	movs	r2, #0
 8000e14:	6828      	ldr	r0, [r5, #0]
 8000e16:	f7ff fba9 	bl	800056c <HAL_GPIO_WritePin>
  if (_displayfunction & LCD_8BITMODE) {
 8000e1a:	4b0b      	ldr	r3, [pc, #44]	; (8000e48 <send+0x50>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	06db      	lsls	r3, r3, #27
 8000e20:	d504      	bpl.n	8000e2c <send+0x34>
    write8bits(value); 
 8000e22:	4620      	mov	r0, r4
}
 8000e24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    write8bits(value); 
 8000e28:	f7ff bfcc 	b.w	8000dc4 <write8bits>
    write4bits(value>>4);
 8000e2c:	0920      	lsrs	r0, r4, #4
 8000e2e:	f7ff ffaf 	bl	8000d90 <write4bits>
    write4bits(value);
 8000e32:	4620      	mov	r0, r4
}
 8000e34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    write4bits(value);
 8000e38:	f7ff bfaa 	b.w	8000d90 <write4bits>
 8000e3c:	200000f2 	.word	0x200000f2
 8000e40:	200000d8 	.word	0x200000d8
 8000e44:	200000d4 	.word	0x200000d4
 8000e48:	200000ef 	.word	0x200000ef

08000e4c <command>:
  send(value, GPIO_PIN_RESET);
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	f7ff bfd3 	b.w	8000df8 <send>

08000e52 <clear>:
{
 8000e52:	b508      	push	{r3, lr}
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
 8000e54:	2001      	movs	r0, #1
 8000e56:	f7ff fff9 	bl	8000e4c <command>
}
 8000e5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_Delay(2);  // this command takes a long time!
 8000e5e:	2002      	movs	r0, #2
 8000e60:	f7ff ba20 	b.w	80002a4 <HAL_Delay>

08000e64 <setCursor>:
{
 8000e64:	2903      	cmp	r1, #3
 8000e66:	bf28      	it	cs
 8000e68:	2103      	movcs	r1, #3
  if ( row >= _numlines ) {
 8000e6a:	4b07      	ldr	r3, [pc, #28]	; (8000e88 <setCursor+0x24>)
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	428b      	cmp	r3, r1
    row = _numlines - 1;    // we count rows starting w/0
 8000e70:	bf9c      	itt	ls
 8000e72:	f103 33ff 	addls.w	r3, r3, #4294967295
 8000e76:	b2d9      	uxtbls	r1, r3
  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
 8000e78:	4b04      	ldr	r3, [pc, #16]	; (8000e8c <setCursor+0x28>)
 8000e7a:	5c5b      	ldrb	r3, [r3, r1]
 8000e7c:	4418      	add	r0, r3
 8000e7e:	f060 007f 	orn	r0, r0, #127	; 0x7f
 8000e82:	b2c0      	uxtb	r0, r0
 8000e84:	f7ff bfe2 	b.w	8000e4c <command>
 8000e88:	200000dd 	.word	0x200000dd
 8000e8c:	200000d0 	.word	0x200000d0

08000e90 <display>:
  _displaycontrol |= LCD_DISPLAYON;
 8000e90:	4b04      	ldr	r3, [pc, #16]	; (8000ea4 <display+0x14>)
 8000e92:	7818      	ldrb	r0, [r3, #0]
 8000e94:	f040 0204 	orr.w	r2, r0, #4
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 8000e98:	f040 000c 	orr.w	r0, r0, #12
  _displaycontrol |= LCD_DISPLAYON;
 8000e9c:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 8000e9e:	f7ff bfd5 	b.w	8000e4c <command>
 8000ea2:	bf00      	nop
 8000ea4:	200000dc 	.word	0x200000dc

08000ea8 <begin>:
void begin(uint8_t cols, uint8_t lines) {
 8000ea8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  _row_offsets[0] = row0;
 8000eac:	2200      	movs	r2, #0
 8000eae:	4c55      	ldr	r4, [pc, #340]	; (8001004 <begin+0x15c>)
  if (lines > 1) {
 8000eb0:	2901      	cmp	r1, #1
    _displayfunction |= LCD_2LINE;
 8000eb2:	bf82      	ittt	hi
 8000eb4:	7823      	ldrbhi	r3, [r4, #0]
 8000eb6:	f043 0308 	orrhi.w	r3, r3, #8
 8000eba:	7023      	strbhi	r3, [r4, #0]
  _numlines = lines;
 8000ebc:	4b52      	ldr	r3, [pc, #328]	; (8001008 <begin+0x160>)
 8000ebe:	7019      	strb	r1, [r3, #0]
  _row_offsets[0] = row0;
 8000ec0:	4b52      	ldr	r3, [pc, #328]	; (800100c <begin+0x164>)
 8000ec2:	701a      	strb	r2, [r3, #0]
  _row_offsets[1] = row1;
 8000ec4:	2240      	movs	r2, #64	; 0x40
  _row_offsets[2] = row2;
 8000ec6:	7098      	strb	r0, [r3, #2]
  setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);  
 8000ec8:	4410      	add	r0, r2
  _row_offsets[1] = row1;
 8000eca:	705a      	strb	r2, [r3, #1]
  _row_offsets[3] = row3;
 8000ecc:	70d8      	strb	r0, [r3, #3]
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 8000ece:	4b50      	ldr	r3, [pc, #320]	; (8001010 <begin+0x168>)
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	b12b      	cbz	r3, 8000ee0 <begin+0x38>
 8000ed4:	2901      	cmp	r1, #1
    _displayfunction |= LCD_5x10DOTS;
 8000ed6:	bf02      	ittt	eq
 8000ed8:	7823      	ldrbeq	r3, [r4, #0]
 8000eda:	f043 0304 	orreq.w	r3, r3, #4
 8000ede:	7023      	strbeq	r3, [r4, #0]
  enableClock();
 8000ee0:	f7ff fedc 	bl	8000c9c <enableClock>
  gpio_init.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	9303      	str	r3, [sp, #12]
  gpio_init.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	9301      	str	r3, [sp, #4]
  if(_fourbit_mode)
 8000eec:	4b49      	ldr	r3, [pc, #292]	; (8001014 <begin+0x16c>)
 8000eee:	4f4a      	ldr	r7, [pc, #296]	; (8001018 <begin+0x170>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	4d4a      	ldr	r5, [pc, #296]	; (800101c <begin+0x174>)
 8000ef4:	4e4a      	ldr	r6, [pc, #296]	; (8001020 <begin+0x178>)
 8000ef6:	4a4b      	ldr	r2, [pc, #300]	; (8001024 <begin+0x17c>)
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d059      	beq.n	8000fb0 <begin+0x108>
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3];
 8000efc:	8829      	ldrh	r1, [r5, #0]
 8000efe:	883b      	ldrh	r3, [r7, #0]
 8000f00:	430b      	orrs	r3, r1
 8000f02:	8831      	ldrh	r1, [r6, #0]
 8000f04:	430b      	orrs	r3, r1
 8000f06:	8811      	ldrh	r1, [r2, #0]
 8000f08:	430b      	orrs	r3, r1
 8000f0a:	8851      	ldrh	r1, [r2, #2]
 8000f0c:	430b      	orrs	r3, r1
 8000f0e:	8891      	ldrh	r1, [r2, #4]
 8000f10:	88d2      	ldrh	r2, [r2, #6]
 8000f12:	430b      	orrs	r3, r1
  HAL_GPIO_Init(_port, &gpio_init);
 8000f14:	f8df 8118 	ldr.w	r8, [pc, #280]	; 8001030 <begin+0x188>
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	b29b      	uxth	r3, r3
  HAL_GPIO_Init(_port, &gpio_init);
 8000f1c:	4669      	mov	r1, sp
 8000f1e:	f8d8 0000 	ldr.w	r0, [r8]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000f22:	9300      	str	r3, [sp, #0]
  HAL_GPIO_Init(_port, &gpio_init);
 8000f24:	f7ff fa3a 	bl	800039c <HAL_GPIO_Init>
  HAL_Delay(50); 
 8000f28:	2032      	movs	r0, #50	; 0x32
 8000f2a:	f7ff f9bb 	bl	80002a4 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _rs_pin, GPIO_PIN_RESET);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	8839      	ldrh	r1, [r7, #0]
 8000f32:	f8d8 0000 	ldr.w	r0, [r8]
 8000f36:	f7ff fb19 	bl	800056c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8000f3a:	8831      	ldrh	r1, [r6, #0]
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f8d8 0000 	ldr.w	r0, [r8]
 8000f42:	f7ff fb13 	bl	800056c <HAL_GPIO_WritePin>
  if (_rw_pin != 255) { 
 8000f46:	8829      	ldrh	r1, [r5, #0]
 8000f48:	29ff      	cmp	r1, #255	; 0xff
 8000f4a:	d004      	beq.n	8000f56 <begin+0xae>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f8d8 0000 	ldr.w	r0, [r8]
 8000f52:	f7ff fb0b 	bl	800056c <HAL_GPIO_WritePin>
  if (! (_displayfunction & LCD_8BITMODE)) {
 8000f56:	7820      	ldrb	r0, [r4, #0]
 8000f58:	06c3      	lsls	r3, r0, #27
 8000f5a:	d43e      	bmi.n	8000fda <begin+0x132>
    write4bits(0x03);
 8000f5c:	2003      	movs	r0, #3
 8000f5e:	f7ff ff17 	bl	8000d90 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8000f62:	2005      	movs	r0, #5
 8000f64:	f7ff f99e 	bl	80002a4 <HAL_Delay>
    write4bits(0x03);
 8000f68:	2003      	movs	r0, #3
 8000f6a:	f7ff ff11 	bl	8000d90 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8000f6e:	2005      	movs	r0, #5
 8000f70:	f7ff f998 	bl	80002a4 <HAL_Delay>
    write4bits(0x03); 
 8000f74:	2003      	movs	r0, #3
 8000f76:	f7ff ff0b 	bl	8000d90 <write4bits>
    HAL_Delay(1);
 8000f7a:	2001      	movs	r0, #1
 8000f7c:	f7ff f992 	bl	80002a4 <HAL_Delay>
    write4bits(0x02); 
 8000f80:	2002      	movs	r0, #2
 8000f82:	f7ff ff05 	bl	8000d90 <write4bits>
  command(LCD_FUNCTIONSET | _displayfunction);  
 8000f86:	7820      	ldrb	r0, [r4, #0]
 8000f88:	f040 0020 	orr.w	r0, r0, #32
 8000f8c:	f7ff ff5e 	bl	8000e4c <command>
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;  
 8000f90:	2204      	movs	r2, #4
 8000f92:	4b25      	ldr	r3, [pc, #148]	; (8001028 <begin+0x180>)
 8000f94:	701a      	strb	r2, [r3, #0]
  display();
 8000f96:	f7ff ff7b 	bl	8000e90 <display>
  clear();
 8000f9a:	f7ff ff5a 	bl	8000e52 <clear>
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000f9e:	2202      	movs	r2, #2
 8000fa0:	4b22      	ldr	r3, [pc, #136]	; (800102c <begin+0x184>)
  command(LCD_ENTRYMODESET | _displaymode);
 8000fa2:	2006      	movs	r0, #6
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000fa4:	701a      	strb	r2, [r3, #0]
  command(LCD_ENTRYMODESET | _displaymode);
 8000fa6:	f7ff ff51 	bl	8000e4c <command>
}
 8000faa:	b004      	add	sp, #16
 8000fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000fb0:	8829      	ldrh	r1, [r5, #0]
 8000fb2:	883b      	ldrh	r3, [r7, #0]
 8000fb4:	430b      	orrs	r3, r1
 8000fb6:	8831      	ldrh	r1, [r6, #0]
 8000fb8:	430b      	orrs	r3, r1
 8000fba:	8811      	ldrh	r1, [r2, #0]
 8000fbc:	430b      	orrs	r3, r1
 8000fbe:	8851      	ldrh	r1, [r2, #2]
 8000fc0:	430b      	orrs	r3, r1
 8000fc2:	8891      	ldrh	r1, [r2, #4]
 8000fc4:	430b      	orrs	r3, r1
 8000fc6:	88d1      	ldrh	r1, [r2, #6]
 8000fc8:	430b      	orrs	r3, r1
 8000fca:	8911      	ldrh	r1, [r2, #8]
 8000fcc:	430b      	orrs	r3, r1
 8000fce:	8951      	ldrh	r1, [r2, #10]
 8000fd0:	430b      	orrs	r3, r1
 8000fd2:	8991      	ldrh	r1, [r2, #12]
 8000fd4:	89d2      	ldrh	r2, [r2, #14]
 8000fd6:	430b      	orrs	r3, r1
 8000fd8:	e79c      	b.n	8000f14 <begin+0x6c>
    command(LCD_FUNCTIONSET | _displayfunction);
 8000fda:	f040 0020 	orr.w	r0, r0, #32
 8000fde:	f7ff ff35 	bl	8000e4c <command>
    HAL_Delay(5);  // wait more than 4.1ms
 8000fe2:	2005      	movs	r0, #5
 8000fe4:	f7ff f95e 	bl	80002a4 <HAL_Delay>
    command(LCD_FUNCTIONSET | _displayfunction);
 8000fe8:	7820      	ldrb	r0, [r4, #0]
 8000fea:	f040 0020 	orr.w	r0, r0, #32
 8000fee:	f7ff ff2d 	bl	8000e4c <command>
    HAL_Delay(1);
 8000ff2:	2001      	movs	r0, #1
 8000ff4:	f7ff f956 	bl	80002a4 <HAL_Delay>
    command(LCD_FUNCTIONSET | _displayfunction);
 8000ff8:	7820      	ldrb	r0, [r4, #0]
 8000ffa:	f040 0020 	orr.w	r0, r0, #32
 8000ffe:	f7ff ff25 	bl	8000e4c <command>
 8001002:	e7c0      	b.n	8000f86 <begin+0xde>
 8001004:	200000ef 	.word	0x200000ef
 8001008:	200000dd 	.word	0x200000dd
 800100c:	200000d0 	.word	0x200000d0
 8001010:	2000009c 	.word	0x2000009c
 8001014:	20000008 	.word	0x20000008
 8001018:	200000f2 	.word	0x200000f2
 800101c:	200000d4 	.word	0x200000d4
 8001020:	200000f0 	.word	0x200000f0
 8001024:	200000de 	.word	0x200000de
 8001028:	200000dc 	.word	0x200000dc
 800102c:	200000ee 	.word	0x200000ee
 8001030:	200000d8 	.word	0x200000d8

08001034 <init>:
{
 8001034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  _rs_pin = rs;
 8001038:	f8df b07c 	ldr.w	fp, [pc, #124]	; 80010b8 <init+0x84>
{
 800103c:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
  _rs_pin = rs;
 8001040:	f8ab 2000 	strh.w	r2, [fp]
  _rw_pin = rw;
 8001044:	4a17      	ldr	r2, [pc, #92]	; (80010a4 <init+0x70>)
{
 8001046:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
  _rw_pin = rw;
 800104a:	8013      	strh	r3, [r2, #0]
  _enable_pin = enable;
 800104c:	4b16      	ldr	r3, [pc, #88]	; (80010a8 <init+0x74>)
{
 800104e:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  _enable_pin = enable;
 8001052:	f8a3 a000 	strh.w	sl, [r3]
  _port = gpioport;
 8001056:	4b15      	ldr	r3, [pc, #84]	; (80010ac <init+0x78>)
{
 8001058:	f8bd c030 	ldrh.w	ip, [sp, #48]	; 0x30
  _port = gpioport;
 800105c:	6019      	str	r1, [r3, #0]
{
 800105e:	f8bd e034 	ldrh.w	lr, [sp, #52]	; 0x34
  _data_pins[0] = d0;
 8001062:	4b13      	ldr	r3, [pc, #76]	; (80010b0 <init+0x7c>)
{
 8001064:	f8bd 7038 	ldrh.w	r7, [sp, #56]	; 0x38
 8001068:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 800106c:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 8001070:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
  _data_pins[0] = d0;
 8001074:	f8a3 9000 	strh.w	r9, [r3]
  _data_pins[1] = d1;
 8001078:	f8a3 8002 	strh.w	r8, [r3, #2]
  _data_pins[2] = d2;
 800107c:	f8a3 c004 	strh.w	ip, [r3, #4]
  _data_pins[3] = d3; 
 8001080:	f8a3 e006 	strh.w	lr, [r3, #6]
  _data_pins[4] = d4;
 8001084:	811f      	strh	r7, [r3, #8]
  _data_pins[5] = d5;
 8001086:	815e      	strh	r6, [r3, #10]
  _data_pins[6] = d6;
 8001088:	819d      	strh	r5, [r3, #12]
  _data_pins[7] = d7;
 800108a:	81dc      	strh	r4, [r3, #14]
 800108c:	4b09      	ldr	r3, [pc, #36]	; (80010b4 <init+0x80>)
  if (fourbitmode)
 800108e:	b138      	cbz	r0, 80010a0 <init+0x6c>
    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8001090:	2200      	movs	r2, #0
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8001092:	701a      	strb	r2, [r3, #0]
  begin(16, 2);
 8001094:	2102      	movs	r1, #2
}
 8001096:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  begin(16, 2);
 800109a:	2010      	movs	r0, #16
 800109c:	f7ff bf04 	b.w	8000ea8 <begin>
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80010a0:	2210      	movs	r2, #16
 80010a2:	e7f6      	b.n	8001092 <init+0x5e>
 80010a4:	200000d4 	.word	0x200000d4
 80010a8:	200000f0 	.word	0x200000f0
 80010ac:	200000d8 	.word	0x200000d8
 80010b0:	200000de 	.word	0x200000de
 80010b4:	200000ef 	.word	0x200000ef
 80010b8:	200000f2 	.word	0x200000f2

080010bc <LiquidCrystal>:
{
 80010bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010be:	4605      	mov	r5, r0
  if(_fourbit_mode)
 80010c0:	4814      	ldr	r0, [pc, #80]	; (8001114 <LiquidCrystal+0x58>)
{
 80010c2:	b08b      	sub	sp, #44	; 0x2c
  if(_fourbit_mode)
 80010c4:	7800      	ldrb	r0, [r0, #0]
{
 80010c6:	f8bd 6040 	ldrh.w	r6, [sp, #64]	; 0x40
 80010ca:	f8bd 7044 	ldrh.w	r7, [sp, #68]	; 0x44
 80010ce:	f8bd e048 	ldrh.w	lr, [sp, #72]	; 0x48
 80010d2:	f8bd c04c 	ldrh.w	ip, [sp, #76]	; 0x4c
  if(_fourbit_mode)
 80010d6:	b180      	cbz	r0, 80010fa <LiquidCrystal+0x3e>
    init(1, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 80010d8:	2400      	movs	r4, #0
 80010da:	e88d 40c8 	stmia.w	sp, {r3, r6, r7, lr}
 80010de:	2001      	movs	r0, #1
 80010e0:	4613      	mov	r3, r2
 80010e2:	460a      	mov	r2, r1
 80010e4:	4629      	mov	r1, r5
 80010e6:	9408      	str	r4, [sp, #32]
 80010e8:	9407      	str	r4, [sp, #28]
 80010ea:	9406      	str	r4, [sp, #24]
 80010ec:	9405      	str	r4, [sp, #20]
 80010ee:	f8cd c010 	str.w	ip, [sp, #16]
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 80010f2:	f7ff ff9f 	bl	8001034 <init>
}
 80010f6:	b00b      	add	sp, #44	; 0x2c
 80010f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 80010fa:	e88d 40c8 	stmia.w	sp, {r3, r6, r7, lr}
 80010fe:	9008      	str	r0, [sp, #32]
 8001100:	4613      	mov	r3, r2
 8001102:	9007      	str	r0, [sp, #28]
 8001104:	460a      	mov	r2, r1
 8001106:	9006      	str	r0, [sp, #24]
 8001108:	9005      	str	r0, [sp, #20]
 800110a:	f8cd c010 	str.w	ip, [sp, #16]
 800110e:	4629      	mov	r1, r5
 8001110:	e7ef      	b.n	80010f2 <LiquidCrystal+0x36>
 8001112:	bf00      	nop
 8001114:	20000008 	.word	0x20000008

08001118 <blink>:
  _displaycontrol |= LCD_BLINKON;
 8001118:	4b04      	ldr	r3, [pc, #16]	; (800112c <blink+0x14>)
 800111a:	7818      	ldrb	r0, [r3, #0]
 800111c:	f040 0201 	orr.w	r2, r0, #1
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 8001120:	f040 0009 	orr.w	r0, r0, #9
  _displaycontrol |= LCD_BLINKON;
 8001124:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 8001126:	f7ff be91 	b.w	8000e4c <command>
 800112a:	bf00      	nop
 800112c:	200000dc 	.word	0x200000dc

08001130 <print>:
size_t print(const char str[]) {
 8001130:	b570      	push	{r4, r5, r6, lr}
  if (str == NULL) return 0;
 8001132:	4604      	mov	r4, r0
 8001134:	b168      	cbz	r0, 8001152 <print+0x22>
  size_t size = strlen(str);
 8001136:	f7ff f86b 	bl	8000210 <strlen>
 800113a:	4605      	mov	r5, r0
 800113c:	1826      	adds	r6, r4, r0
  while (size--) {
 800113e:	42b4      	cmp	r4, r6
 8001140:	d101      	bne.n	8001146 <print+0x16>
}
 8001142:	4628      	mov	r0, r5
 8001144:	bd70      	pop	{r4, r5, r6, pc}
  send(value, GPIO_PIN_SET);
 8001146:	2101      	movs	r1, #1
 8001148:	f814 0b01 	ldrb.w	r0, [r4], #1
 800114c:	f7ff fe54 	bl	8000df8 <send>
 8001150:	e7f5      	b.n	800113e <print+0xe>
  if (str == NULL) return 0;
 8001152:	4605      	mov	r5, r0
 8001154:	e7f5      	b.n	8001142 <print+0x12>

08001156 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001156:	b500      	push	{lr}
 8001158:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800115a:	2228      	movs	r2, #40	; 0x28
 800115c:	2100      	movs	r1, #0
 800115e:	a806      	add	r0, sp, #24
 8001160:	f000 fa94 	bl	800168c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001164:	2214      	movs	r2, #20
 8001166:	2100      	movs	r1, #0
 8001168:	a801      	add	r0, sp, #4
 800116a:	f000 fa8f 	bl	800168c <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800116e:	2302      	movs	r3, #2
 8001170:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001172:	2301      	movs	r3, #1
 8001174:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001176:	2310      	movs	r3, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001178:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800117a:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800117c:	f7ff fa08 	bl	8000590 <HAL_RCC_OscConfig>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001180:	2100      	movs	r1, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001182:	230f      	movs	r3, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001184:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001186:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001188:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800118a:	9103      	str	r1, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800118c:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800118e:	9105      	str	r1, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001190:	f7ff fbe0 	bl	8000954 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8001194:	b011      	add	sp, #68	; 0x44
 8001196:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800119c <main>:
{
 800119c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011a0:	b094      	sub	sp, #80	; 0x50
  HAL_Init();
 80011a2:	f7ff f861 	bl	8000268 <HAL_Init>
  SystemClock_Config();
 80011a6:	f7ff ffd6 	bl	8001156 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011aa:	2210      	movs	r2, #16
 80011ac:	2100      	movs	r1, #0
 80011ae:	a807      	add	r0, sp, #28
 80011b0:	f000 fa6c 	bl	800168c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011b4:	4b61      	ldr	r3, [pc, #388]	; (800133c <main+0x1a0>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3|LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 80011b6:	f44f 7142 	mov.w	r1, #776	; 0x308
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ba:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3|LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 80011bc:	4860      	ldr	r0, [pc, #384]	; (8001340 <main+0x1a4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011be:	f042 0210 	orr.w	r2, r2, #16
 80011c2:	619a      	str	r2, [r3, #24]
 80011c4:	699a      	ldr	r2, [r3, #24]
                          |GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011c6:	2702      	movs	r7, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011c8:	f002 0210 	and.w	r2, r2, #16
 80011cc:	9204      	str	r2, [sp, #16]
 80011ce:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011d0:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : PC3 LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_3|LD4_Pin|LD3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2400      	movs	r4, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011d4:	f042 0220 	orr.w	r2, r2, #32
 80011d8:	619a      	str	r2, [r3, #24]
 80011da:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011dc:	2601      	movs	r6, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011de:	f002 0220 	and.w	r2, r2, #32
 80011e2:	9205      	str	r2, [sp, #20]
 80011e4:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e6:	699a      	ldr	r2, [r3, #24]
  htim7.Instance = TIM7;
 80011e8:	4d56      	ldr	r5, [pc, #344]	; (8001344 <main+0x1a8>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ea:	f042 0204 	orr.w	r2, r2, #4
 80011ee:	619a      	str	r2, [r3, #24]
 80011f0:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3|LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 80011f2:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f4:	f003 0304 	and.w	r3, r3, #4
 80011f8:	9306      	str	r3, [sp, #24]
 80011fa:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3|LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 80011fc:	f7ff f9b6 	bl	800056c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8001200:	2200      	movs	r2, #0
 8001202:	f44f 411f 	mov.w	r1, #40704	; 0x9f00
 8001206:	4850      	ldr	r0, [pc, #320]	; (8001348 <main+0x1ac>)
 8001208:	f7ff f9b0 	bl	800056c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800120c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001210:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001212:	4b4e      	ldr	r3, [pc, #312]	; (800134c <main+0x1b0>)
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001214:	a907      	add	r1, sp, #28
 8001216:	484a      	ldr	r0, [pc, #296]	; (8001340 <main+0x1a4>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001218:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800121a:	9709      	str	r7, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800121c:	f7ff f8be 	bl	800039c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_3|LD4_Pin|LD3_Pin;
 8001220:	f44f 7342 	mov.w	r3, #776	; 0x308
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001224:	a907      	add	r1, sp, #28
 8001226:	4846      	ldr	r0, [pc, #280]	; (8001340 <main+0x1a4>)
  GPIO_InitStruct.Pin = GPIO_PIN_3|LD4_Pin|LD3_Pin;
 8001228:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122c:	970a      	str	r7, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800122e:	9608      	str	r6, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001230:	f7ff f8b4 	bl	800039c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11 
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8001234:	f44f 431f 	mov.w	r3, #40704	; 0x9f00
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001238:	a907      	add	r1, sp, #28
 800123a:	4843      	ldr	r0, [pc, #268]	; (8001348 <main+0x1ac>)
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800123c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001240:	970a      	str	r7, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001242:	9608      	str	r6, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001244:	f7ff f8aa 	bl	800039c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001248:	4622      	mov	r2, r4
 800124a:	4621      	mov	r1, r4
 800124c:	2028      	movs	r0, #40	; 0x28
 800124e:	f7ff f84d 	bl	80002ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001252:	2028      	movs	r0, #40	; 0x28
 8001254:	f7ff f87e 	bl	8000354 <HAL_NVIC_EnableIRQ>
  htim7.Instance = TIM7;
 8001258:	4b3d      	ldr	r3, [pc, #244]	; (8001350 <main+0x1b4>)
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800125a:	4628      	mov	r0, r5
  htim7.Init.Prescaler = 1;
 800125c:	e885 0048 	stmia.w	r5, {r3, r6}
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001260:	9407      	str	r4, [sp, #28]
 8001262:	9408      	str	r4, [sp, #32]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001264:	60ac      	str	r4, [r5, #8]
  htim7.Init.Period = 2;
 8001266:	60ef      	str	r7, [r5, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001268:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800126a:	f7ff fcdd 	bl	8000c28 <HAL_TIM_Base_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800126e:	a907      	add	r1, sp, #28
 8001270:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001272:	9407      	str	r4, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001274:	9408      	str	r4, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001276:	f7ff fcf1 	bl	8000c5c <HAL_TIMEx_MasterConfigSynchronization>
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,1);//set high to keep current going through NO(Normally Open)
 800127a:	4632      	mov	r2, r6
 800127c:	2108      	movs	r1, #8
 800127e:	4830      	ldr	r0, [pc, #192]	; (8001340 <main+0x1a4>)
 8001280:	f7ff f974 	bl	800056c <HAL_GPIO_WritePin>
  LiquidCrystal(GPIOA, GPIO_PIN_15, 0, GPIO_PIN_12, GPIO_PIN_11, GPIO_PIN_10, GPIO_PIN_9, GPIO_PIN_8);
 8001284:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001288:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800128c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001290:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001294:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8001298:	4622      	mov	r2, r4
  displayChange = true;
 800129a:	4c2e      	ldr	r4, [pc, #184]	; (8001354 <main+0x1b8>)
  LiquidCrystal(GPIOA, GPIO_PIN_15, 0, GPIO_PIN_12, GPIO_PIN_11, GPIO_PIN_10, GPIO_PIN_9, GPIO_PIN_8);
 800129c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012a4:	4828      	ldr	r0, [pc, #160]	; (8001348 <main+0x1ac>)
		int size1 = sprintf(str, "timer%s %-2d %-3d", currectTimerState == 0? "Off" : "On", currentTimer, timersTic[currectTimerState][currentTimer]);
 80012a6:	4f2c      	ldr	r7, [pc, #176]	; (8001358 <main+0x1bc>)
 80012a8:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 8001370 <main+0x1d4>
  LiquidCrystal(GPIOA, GPIO_PIN_15, 0, GPIO_PIN_12, GPIO_PIN_11, GPIO_PIN_10, GPIO_PIN_9, GPIO_PIN_8);
 80012ac:	f7ff ff06 	bl	80010bc <LiquidCrystal>
  displayChange = true;
 80012b0:	7026      	strb	r6, [r4, #0]
	  if(displayChange)
 80012b2:	7823      	ldrb	r3, [r4, #0]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d03e      	beq.n	8001336 <main+0x19a>
		displayChange = false;
 80012b8:	2600      	movs	r6, #0
		int size1 = sprintf(str, "timer%s %-2d %-3d", currectTimerState == 0? "Off" : "On", currentTimer, timersTic[currectTimerState][currentTimer]);
 80012ba:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8001374 <main+0x1d8>
		setCursor(0, 0);
 80012be:	4631      	mov	r1, r6
 80012c0:	4630      	mov	r0, r6
		displayChange = false;
 80012c2:	7026      	strb	r6, [r4, #0]
		setCursor(0, 0);
 80012c4:	f7ff fdce 	bl	8000e64 <setCursor>
		int size1 = sprintf(str, "timer%s %-2d %-3d", currectTimerState == 0? "Off" : "On", currentTimer, timersTic[currectTimerState][currentTimer]);
 80012c8:	f8da 3000 	ldr.w	r3, [sl]
 80012cc:	683a      	ldr	r2, [r7, #0]
 80012ce:	4923      	ldr	r1, [pc, #140]	; (800135c <main+0x1c0>)
 80012d0:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 80012d4:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80012d8:	f8df 909c 	ldr.w	r9, [pc, #156]	; 8001378 <main+0x1dc>
 80012dc:	9100      	str	r1, [sp, #0]
 80012de:	42b2      	cmp	r2, r6
 80012e0:	bf0c      	ite	eq
 80012e2:	4642      	moveq	r2, r8
 80012e4:	464a      	movne	r2, r9
 80012e6:	491e      	ldr	r1, [pc, #120]	; (8001360 <main+0x1c4>)
 80012e8:	a807      	add	r0, sp, #28
 80012ea:	f000 f9d7 	bl	800169c <siprintf>
 80012ee:	4605      	mov	r5, r0
		print(str);
 80012f0:	a807      	add	r0, sp, #28
 80012f2:	f7ff ff1d 	bl	8001130 <print>
		setCursor(0, 1);
 80012f6:	2101      	movs	r1, #1
 80012f8:	4630      	mov	r0, r6
 80012fa:	f7ff fdb3 	bl	8000e64 <setCursor>
		int size2 = sprintf(str, "type%s %-2d %-3d", currectTimerState == 0? "Off" : "On", currentTimer, timersType[currectTimerState][currentTimer]);
 80012fe:	683a      	ldr	r2, [r7, #0]
 8001300:	4918      	ldr	r1, [pc, #96]	; (8001364 <main+0x1c8>)
 8001302:	f8da 3000 	ldr.w	r3, [sl]
 8001306:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800130a:	5cc9      	ldrb	r1, [r1, r3]
 800130c:	42b2      	cmp	r2, r6
 800130e:	bf0c      	ite	eq
 8001310:	4642      	moveq	r2, r8
 8001312:	464a      	movne	r2, r9
 8001314:	9100      	str	r1, [sp, #0]
 8001316:	a807      	add	r0, sp, #28
 8001318:	4913      	ldr	r1, [pc, #76]	; (8001368 <main+0x1cc>)
 800131a:	f000 f9bf 	bl	800169c <siprintf>
 800131e:	4606      	mov	r6, r0
		print(str);
 8001320:	a807      	add	r0, sp, #28
 8001322:	f7ff ff05 	bl	8001130 <print>
		setCursor((timerState? size2 : size1) - 3, timerState);
 8001326:	4b11      	ldr	r3, [pc, #68]	; (800136c <main+0x1d0>)
 8001328:	7819      	ldrb	r1, [r3, #0]
 800132a:	b129      	cbz	r1, 8001338 <main+0x19c>
 800132c:	1ef0      	subs	r0, r6, #3
 800132e:	f7ff fd99 	bl	8000e64 <setCursor>
		blink();
 8001332:	f7ff fef1 	bl	8001118 <blink>
	  if(displayChange)
 8001336:	e7bc      	b.n	80012b2 <main+0x116>
		setCursor((timerState? size2 : size1) - 3, timerState);
 8001338:	1ee8      	subs	r0, r5, #3
 800133a:	e7f8      	b.n	800132e <main+0x192>
 800133c:	40021000 	.word	0x40021000
 8001340:	40011000 	.word	0x40011000
 8001344:	20000108 	.word	0x20000108
 8001348:	40010800 	.word	0x40010800
 800134c:	10110000 	.word	0x10110000
 8001350:	40001400 	.word	0x40001400
 8001354:	200000fc 	.word	0x200000fc
 8001358:	20000100 	.word	0x20000100
 800135c:	200000a0 	.word	0x200000a0
 8001360:	08001f33 	.word	0x08001f33
 8001364:	20000010 	.word	0x20000010
 8001368:	08001f45 	.word	0x08001f45
 800136c:	20000104 	.word	0x20000104
 8001370:	08001f2c 	.word	0x08001f2c
 8001374:	200000f8 	.word	0x200000f8
 8001378:	08001f30 	.word	0x08001f30

0800137c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800137c:	4b0e      	ldr	r3, [pc, #56]	; (80013b8 <HAL_MspInit+0x3c>)
{
 800137e:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001380:	699a      	ldr	r2, [r3, #24]
 8001382:	f042 0201 	orr.w	r2, r2, #1
 8001386:	619a      	str	r2, [r3, #24]
 8001388:	699a      	ldr	r2, [r3, #24]
 800138a:	f002 0201 	and.w	r2, r2, #1
 800138e:	9200      	str	r2, [sp, #0]
 8001390:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001392:	69da      	ldr	r2, [r3, #28]
 8001394:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001398:	61da      	str	r2, [r3, #28]
 800139a:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800139c:	4a07      	ldr	r2, [pc, #28]	; (80013bc <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800139e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013a2:	9301      	str	r3, [sp, #4]
 80013a4:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80013a6:	6853      	ldr	r3, [r2, #4]
 80013a8:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80013ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013b2:	b002      	add	sp, #8
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	40021000 	.word	0x40021000
 80013bc:	40010000 	.word	0x40010000

080013c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013c0:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM7)
 80013c2:	4b0d      	ldr	r3, [pc, #52]	; (80013f8 <HAL_TIM_Base_MspInit+0x38>)
 80013c4:	6802      	ldr	r2, [r0, #0]
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d112      	bne.n	80013f0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80013ca:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
 80013ce:	69da      	ldr	r2, [r3, #28]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80013d0:	2037      	movs	r0, #55	; 0x37
    __HAL_RCC_TIM7_CLK_ENABLE();
 80013d2:	f042 0220 	orr.w	r2, r2, #32
 80013d6:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80013d8:	2200      	movs	r2, #0
    __HAL_RCC_TIM7_CLK_ENABLE();
 80013da:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80013dc:	4611      	mov	r1, r2
    __HAL_RCC_TIM7_CLK_ENABLE();
 80013de:	f003 0320 	and.w	r3, r3, #32
 80013e2:	9301      	str	r3, [sp, #4]
 80013e4:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80013e6:	f7fe ff81 	bl	80002ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80013ea:	2037      	movs	r0, #55	; 0x37
 80013ec:	f7fe ffb2 	bl	8000354 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80013f0:	b003      	add	sp, #12
 80013f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80013f6:	bf00      	nop
 80013f8:	40001400 	.word	0x40001400

080013fc <NMI_Handler>:
 80013fc:	4770      	bx	lr

080013fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013fe:	e7fe      	b.n	80013fe <HardFault_Handler>

08001400 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001400:	e7fe      	b.n	8001400 <MemManage_Handler>

08001402 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001402:	e7fe      	b.n	8001402 <BusFault_Handler>

08001404 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001404:	e7fe      	b.n	8001404 <UsageFault_Handler>

08001406 <SVC_Handler>:
 8001406:	4770      	bx	lr

08001408 <DebugMon_Handler>:
 8001408:	4770      	bx	lr

0800140a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800140a:	4770      	bx	lr

0800140c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800140c:	f7fe bf38 	b.w	8000280 <HAL_IncTick>

08001410 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	int read_10 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10);
 8001412:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001416:	4849      	ldr	r0, [pc, #292]	; (800153c <EXTI15_10_IRQHandler+0x12c>)
 8001418:	f7ff f8a2 	bl	8000560 <HAL_GPIO_ReadPin>
	int read_11 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11);
 800141c:	f44f 6100 	mov.w	r1, #2048	; 0x800
	int read_10 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10);
 8001420:	4605      	mov	r5, r0
	int read_11 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11);
 8001422:	4846      	ldr	r0, [pc, #280]	; (800153c <EXTI15_10_IRQHandler+0x12c>)
 8001424:	f7ff f89c 	bl	8000560 <HAL_GPIO_ReadPin>
	int read_12 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_12);
 8001428:	f44f 5180 	mov.w	r1, #4096	; 0x1000
	int read_11 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11);
 800142c:	4606      	mov	r6, r0
	int read_12 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_12);
 800142e:	4843      	ldr	r0, [pc, #268]	; (800153c <EXTI15_10_IRQHandler+0x12c>)
 8001430:	f7ff f896 	bl	8000560 <HAL_GPIO_ReadPin>
	int read_15 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8001434:	f44f 5100 	mov.w	r1, #8192	; 0x2000
	int read_12 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_12);
 8001438:	4604      	mov	r4, r0
	int read_15 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 800143a:	4840      	ldr	r0, [pc, #256]	; (800153c <EXTI15_10_IRQHandler+0x12c>)
 800143c:	f7ff f890 	bl	8000560 <HAL_GPIO_ReadPin>

	if(read_10)
 8001440:	b135      	cbz	r5, 8001450 <EXTI15_10_IRQHandler+0x40>
	{
		timerState++;
 8001442:	4a3f      	ldr	r2, [pc, #252]	; (8001540 <EXTI15_10_IRQHandler+0x130>)
 8001444:	7813      	ldrb	r3, [r2, #0]
 8001446:	3301      	adds	r3, #1
 8001448:	b2db      	uxtb	r3, r3
		if(timerState > type)
 800144a:	2b01      	cmp	r3, #1
 800144c:	d824      	bhi.n	8001498 <EXTI15_10_IRQHandler+0x88>
		timerState++;
 800144e:	7013      	strb	r3, [r2, #0]
					currentTimer = 0;
				}
			}
		}
	}
	if(read_12)
 8001450:	2c00      	cmp	r4, #0
 8001452:	d034      	beq.n	80014be <EXTI15_10_IRQHandler+0xae>
	{
		if(timerState == tic)
 8001454:	4b3a      	ldr	r3, [pc, #232]	; (8001540 <EXTI15_10_IRQHandler+0x130>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d138      	bne.n	80014ce <EXTI15_10_IRQHandler+0xbe>
		{
			timersTic[currectTimerState][currentTimer]++;
 800145c:	4b39      	ldr	r3, [pc, #228]	; (8001544 <EXTI15_10_IRQHandler+0x134>)
 800145e:	493a      	ldr	r1, [pc, #232]	; (8001548 <EXTI15_10_IRQHandler+0x138>)
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	4b3a      	ldr	r3, [pc, #232]	; (800154c <EXTI15_10_IRQHandler+0x13c>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800146a:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 800146e:	3201      	adds	r2, #1
 8001470:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		{
			timersType[currectTimerState][currentTimer]++;
		}
	}

	if(read_15)
 8001474:	2800      	cmp	r0, #0
 8001476:	d043      	beq.n	8001500 <EXTI15_10_IRQHandler+0xf0>
	{
		if(timerState == tic)
		{
			timersTic[currectTimerState][currentTimer]--;
 8001478:	4b32      	ldr	r3, [pc, #200]	; (8001544 <EXTI15_10_IRQHandler+0x134>)
 800147a:	4933      	ldr	r1, [pc, #204]	; (8001548 <EXTI15_10_IRQHandler+0x138>)
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	4b33      	ldr	r3, [pc, #204]	; (800154c <EXTI15_10_IRQHandler+0x13c>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001486:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 800148a:	3a01      	subs	r2, #1
 800148c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
	}

	if(read_15 || read_12 || read_11 || read_10)
	{
		displayChange = true;
 8001490:	2201      	movs	r2, #1
 8001492:	4b2f      	ldr	r3, [pc, #188]	; (8001550 <EXTI15_10_IRQHandler+0x140>)
 8001494:	701a      	strb	r2, [r3, #0]
 8001496:	e039      	b.n	800150c <EXTI15_10_IRQHandler+0xfc>
			timerState = tic;
 8001498:	2100      	movs	r1, #0
 800149a:	7011      	strb	r1, [r2, #0]
			currectTimerState++;
 800149c:	4a29      	ldr	r2, [pc, #164]	; (8001544 <EXTI15_10_IRQHandler+0x134>)
 800149e:	6813      	ldr	r3, [r2, #0]
 80014a0:	3301      	adds	r3, #1
			if(currectTimerState > 1)
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	dd44      	ble.n	8001530 <EXTI15_10_IRQHandler+0x120>
				currectTimerState = 0;
 80014a6:	6011      	str	r1, [r2, #0]
				currentTimer++;
 80014a8:	4a28      	ldr	r2, [pc, #160]	; (800154c <EXTI15_10_IRQHandler+0x13c>)
				if(currentTimer >= timerCount)
 80014aa:	4f2a      	ldr	r7, [pc, #168]	; (8001554 <EXTI15_10_IRQHandler+0x144>)
				currentTimer++;
 80014ac:	6813      	ldr	r3, [r2, #0]
				if(currentTimer >= timerCount)
 80014ae:	683f      	ldr	r7, [r7, #0]
				currentTimer++;
 80014b0:	3301      	adds	r3, #1
				if(currentTimer >= timerCount)
 80014b2:	42bb      	cmp	r3, r7
				currentTimer++;
 80014b4:	6013      	str	r3, [r2, #0]
				if(currentTimer >= timerCount)
 80014b6:	db00      	blt.n	80014ba <EXTI15_10_IRQHandler+0xaa>
					currentTimer = 0;
 80014b8:	6011      	str	r1, [r2, #0]
	if(read_12)
 80014ba:	2c00      	cmp	r4, #0
 80014bc:	d1ce      	bne.n	800145c <EXTI15_10_IRQHandler+0x4c>
	if(read_15)
 80014be:	b308      	cbz	r0, 8001504 <EXTI15_10_IRQHandler+0xf4>
		if(timerState == tic)
 80014c0:	4b1f      	ldr	r3, [pc, #124]	; (8001540 <EXTI15_10_IRQHandler+0x130>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d0d7      	beq.n	8001478 <EXTI15_10_IRQHandler+0x68>
		}else if(timerState == type)
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d1e1      	bne.n	8001490 <EXTI15_10_IRQHandler+0x80>
 80014cc:	e00d      	b.n	80014ea <EXTI15_10_IRQHandler+0xda>
		}else if(timerState == type)
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d130      	bne.n	8001534 <EXTI15_10_IRQHandler+0x124>
			timersType[currectTimerState][currentTimer]++;
 80014d2:	4b1c      	ldr	r3, [pc, #112]	; (8001544 <EXTI15_10_IRQHandler+0x134>)
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	4b1d      	ldr	r3, [pc, #116]	; (800154c <EXTI15_10_IRQHandler+0x13c>)
 80014d8:	6819      	ldr	r1, [r3, #0]
 80014da:	4b1f      	ldr	r3, [pc, #124]	; (8001558 <EXTI15_10_IRQHandler+0x148>)
 80014dc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80014e0:	5c5a      	ldrb	r2, [r3, r1]
 80014e2:	3201      	adds	r2, #1
 80014e4:	545a      	strb	r2, [r3, r1]
	if(read_15)
 80014e6:	2800      	cmp	r0, #0
 80014e8:	d0d2      	beq.n	8001490 <EXTI15_10_IRQHandler+0x80>
			timersType[currectTimerState][currentTimer]--;
 80014ea:	4b16      	ldr	r3, [pc, #88]	; (8001544 <EXTI15_10_IRQHandler+0x134>)
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	4b17      	ldr	r3, [pc, #92]	; (800154c <EXTI15_10_IRQHandler+0x13c>)
 80014f0:	6819      	ldr	r1, [r3, #0]
 80014f2:	4b19      	ldr	r3, [pc, #100]	; (8001558 <EXTI15_10_IRQHandler+0x148>)
 80014f4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80014f8:	5c5a      	ldrb	r2, [r3, r1]
 80014fa:	3a01      	subs	r2, #1
 80014fc:	545a      	strb	r2, [r3, r1]
 80014fe:	e7c7      	b.n	8001490 <EXTI15_10_IRQHandler+0x80>
	if(read_15 || read_12 || read_11 || read_10)
 8001500:	2c00      	cmp	r4, #0
 8001502:	d1c5      	bne.n	8001490 <EXTI15_10_IRQHandler+0x80>
 8001504:	2e00      	cmp	r6, #0
 8001506:	d1c3      	bne.n	8001490 <EXTI15_10_IRQHandler+0x80>
 8001508:	2d00      	cmp	r5, #0
 800150a:	d1c1      	bne.n	8001490 <EXTI15_10_IRQHandler+0x80>
	}

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800150c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001510:	f7ff f832 	bl	8000578 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001514:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001518:	f7ff f82e 	bl	8000578 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800151c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001520:	f7ff f82a 	bl	8000578 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001524:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001528:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800152c:	f7ff b824 	b.w	8000578 <HAL_GPIO_EXTI_IRQHandler>
			currectTimerState++;
 8001530:	6013      	str	r3, [r2, #0]
 8001532:	e7c2      	b.n	80014ba <EXTI15_10_IRQHandler+0xaa>
	if(read_15)
 8001534:	2800      	cmp	r0, #0
 8001536:	d1c3      	bne.n	80014c0 <EXTI15_10_IRQHandler+0xb0>
 8001538:	e7aa      	b.n	8001490 <EXTI15_10_IRQHandler+0x80>
 800153a:	bf00      	nop
 800153c:	40011000 	.word	0x40011000
 8001540:	20000104 	.word	0x20000104
 8001544:	20000100 	.word	0x20000100
 8001548:	200000a0 	.word	0x200000a0
 800154c:	200000f8 	.word	0x200000f8
 8001550:	200000fc 	.word	0x200000fc
 8001554:	2000000c 	.word	0x2000000c
 8001558:	20000010 	.word	0x20000010

0800155c <TIM7_IRQHandler>:
void TIM7_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800155c:	4801      	ldr	r0, [pc, #4]	; (8001564 <TIM7_IRQHandler+0x8>)
 800155e:	f7ff ba6e 	b.w	8000a3e <HAL_TIM_IRQHandler>
 8001562:	bf00      	nop
 8001564:	20000108 	.word	0x20000108

08001568 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8001568:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800156a:	4b0a      	ldr	r3, [pc, #40]	; (8001594 <_sbrk+0x2c>)
{
 800156c:	4602      	mov	r2, r0
	if (heap_end == 0)
 800156e:	6819      	ldr	r1, [r3, #0]
 8001570:	b909      	cbnz	r1, 8001576 <_sbrk+0xe>
		heap_end = &end;
 8001572:	4909      	ldr	r1, [pc, #36]	; (8001598 <_sbrk+0x30>)
 8001574:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8001576:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8001578:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 800157a:	4402      	add	r2, r0
 800157c:	428a      	cmp	r2, r1
 800157e:	d906      	bls.n	800158e <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001580:	f000 f85a 	bl	8001638 <__errno>
 8001584:	230c      	movs	r3, #12
 8001586:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8001588:	f04f 30ff 	mov.w	r0, #4294967295
 800158c:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 800158e:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8001590:	bd08      	pop	{r3, pc}
 8001592:	bf00      	nop
 8001594:	200000c0 	.word	0x200000c0
 8001598:	2000014c 	.word	0x2000014c

0800159c <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800159c:	4b10      	ldr	r3, [pc, #64]	; (80015e0 <SystemInit+0x44>)
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	f042 0201 	orr.w	r2, r2, #1
 80015a4:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80015a6:	6859      	ldr	r1, [r3, #4]
 80015a8:	4a0e      	ldr	r2, [pc, #56]	; (80015e4 <SystemInit+0x48>)
 80015aa:	400a      	ands	r2, r1
 80015ac:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80015b4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80015b8:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80015c0:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80015c2:	685a      	ldr	r2, [r3, #4]
 80015c4:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80015c8:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;
#elif defined(STM32F100xB) || defined(STM32F100xE)
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80015ca:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80015ce:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
 80015d0:	2200      	movs	r2, #0
 80015d2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80015d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015d8:	4b03      	ldr	r3, [pc, #12]	; (80015e8 <SystemInit+0x4c>)
 80015da:	609a      	str	r2, [r3, #8]
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	40021000 	.word	0x40021000
 80015e4:	f8ff0000 	.word	0xf8ff0000
 80015e8:	e000ed00 	.word	0xe000ed00

080015ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80015ec:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80015ee:	e003      	b.n	80015f8 <LoopCopyDataInit>

080015f0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80015f0:	4b0b      	ldr	r3, [pc, #44]	; (8001620 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80015f2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80015f4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80015f6:	3104      	adds	r1, #4

080015f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80015f8:	480a      	ldr	r0, [pc, #40]	; (8001624 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80015fa:	4b0b      	ldr	r3, [pc, #44]	; (8001628 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80015fc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80015fe:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001600:	d3f6      	bcc.n	80015f0 <CopyDataInit>
  ldr r2, =_sbss
 8001602:	4a0a      	ldr	r2, [pc, #40]	; (800162c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001604:	e002      	b.n	800160c <LoopFillZerobss>

08001606 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001606:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001608:	f842 3b04 	str.w	r3, [r2], #4

0800160c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800160c:	4b08      	ldr	r3, [pc, #32]	; (8001630 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800160e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001610:	d3f9      	bcc.n	8001606 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001612:	f7ff ffc3 	bl	800159c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001616:	f000 f815 	bl	8001644 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800161a:	f7ff fdbf 	bl	800119c <main>
  bx lr
 800161e:	4770      	bx	lr
  ldr r3, =_sidata
 8001620:	08001fa4 	.word	0x08001fa4
  ldr r0, =_sdata
 8001624:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001628:	20000080 	.word	0x20000080
  ldr r2, =_sbss
 800162c:	20000080 	.word	0x20000080
  ldr r3, = _ebss
 8001630:	2000014c 	.word	0x2000014c

08001634 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001634:	e7fe      	b.n	8001634 <ADC1_IRQHandler>
	...

08001638 <__errno>:
 8001638:	4b01      	ldr	r3, [pc, #4]	; (8001640 <__errno+0x8>)
 800163a:	6818      	ldr	r0, [r3, #0]
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	2000001c 	.word	0x2000001c

08001644 <__libc_init_array>:
 8001644:	b570      	push	{r4, r5, r6, lr}
 8001646:	2500      	movs	r5, #0
 8001648:	4e0c      	ldr	r6, [pc, #48]	; (800167c <__libc_init_array+0x38>)
 800164a:	4c0d      	ldr	r4, [pc, #52]	; (8001680 <__libc_init_array+0x3c>)
 800164c:	1ba4      	subs	r4, r4, r6
 800164e:	10a4      	asrs	r4, r4, #2
 8001650:	42a5      	cmp	r5, r4
 8001652:	d109      	bne.n	8001668 <__libc_init_array+0x24>
 8001654:	f000 fc4e 	bl	8001ef4 <_init>
 8001658:	2500      	movs	r5, #0
 800165a:	4e0a      	ldr	r6, [pc, #40]	; (8001684 <__libc_init_array+0x40>)
 800165c:	4c0a      	ldr	r4, [pc, #40]	; (8001688 <__libc_init_array+0x44>)
 800165e:	1ba4      	subs	r4, r4, r6
 8001660:	10a4      	asrs	r4, r4, #2
 8001662:	42a5      	cmp	r5, r4
 8001664:	d105      	bne.n	8001672 <__libc_init_array+0x2e>
 8001666:	bd70      	pop	{r4, r5, r6, pc}
 8001668:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800166c:	4798      	blx	r3
 800166e:	3501      	adds	r5, #1
 8001670:	e7ee      	b.n	8001650 <__libc_init_array+0xc>
 8001672:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001676:	4798      	blx	r3
 8001678:	3501      	adds	r5, #1
 800167a:	e7f2      	b.n	8001662 <__libc_init_array+0x1e>
 800167c:	08001f9c 	.word	0x08001f9c
 8001680:	08001f9c 	.word	0x08001f9c
 8001684:	08001f9c 	.word	0x08001f9c
 8001688:	08001fa0 	.word	0x08001fa0

0800168c <memset>:
 800168c:	4603      	mov	r3, r0
 800168e:	4402      	add	r2, r0
 8001690:	4293      	cmp	r3, r2
 8001692:	d100      	bne.n	8001696 <memset+0xa>
 8001694:	4770      	bx	lr
 8001696:	f803 1b01 	strb.w	r1, [r3], #1
 800169a:	e7f9      	b.n	8001690 <memset+0x4>

0800169c <siprintf>:
 800169c:	b40e      	push	{r1, r2, r3}
 800169e:	f44f 7102 	mov.w	r1, #520	; 0x208
 80016a2:	b500      	push	{lr}
 80016a4:	b09c      	sub	sp, #112	; 0x70
 80016a6:	f8ad 1014 	strh.w	r1, [sp, #20]
 80016aa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80016ae:	9104      	str	r1, [sp, #16]
 80016b0:	9107      	str	r1, [sp, #28]
 80016b2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80016b6:	ab1d      	add	r3, sp, #116	; 0x74
 80016b8:	9002      	str	r0, [sp, #8]
 80016ba:	9006      	str	r0, [sp, #24]
 80016bc:	4808      	ldr	r0, [pc, #32]	; (80016e0 <siprintf+0x44>)
 80016be:	f853 2b04 	ldr.w	r2, [r3], #4
 80016c2:	f8ad 1016 	strh.w	r1, [sp, #22]
 80016c6:	6800      	ldr	r0, [r0, #0]
 80016c8:	a902      	add	r1, sp, #8
 80016ca:	9301      	str	r3, [sp, #4]
 80016cc:	f000 f866 	bl	800179c <_svfiprintf_r>
 80016d0:	2200      	movs	r2, #0
 80016d2:	9b02      	ldr	r3, [sp, #8]
 80016d4:	701a      	strb	r2, [r3, #0]
 80016d6:	b01c      	add	sp, #112	; 0x70
 80016d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80016dc:	b003      	add	sp, #12
 80016de:	4770      	bx	lr
 80016e0:	2000001c 	.word	0x2000001c

080016e4 <__ssputs_r>:
 80016e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80016e8:	688e      	ldr	r6, [r1, #8]
 80016ea:	4682      	mov	sl, r0
 80016ec:	429e      	cmp	r6, r3
 80016ee:	460c      	mov	r4, r1
 80016f0:	4691      	mov	r9, r2
 80016f2:	4698      	mov	r8, r3
 80016f4:	d835      	bhi.n	8001762 <__ssputs_r+0x7e>
 80016f6:	898a      	ldrh	r2, [r1, #12]
 80016f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80016fc:	d031      	beq.n	8001762 <__ssputs_r+0x7e>
 80016fe:	2302      	movs	r3, #2
 8001700:	6825      	ldr	r5, [r4, #0]
 8001702:	6909      	ldr	r1, [r1, #16]
 8001704:	1a6f      	subs	r7, r5, r1
 8001706:	6965      	ldr	r5, [r4, #20]
 8001708:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800170c:	fb95 f5f3 	sdiv	r5, r5, r3
 8001710:	f108 0301 	add.w	r3, r8, #1
 8001714:	443b      	add	r3, r7
 8001716:	429d      	cmp	r5, r3
 8001718:	bf38      	it	cc
 800171a:	461d      	movcc	r5, r3
 800171c:	0553      	lsls	r3, r2, #21
 800171e:	d531      	bpl.n	8001784 <__ssputs_r+0xa0>
 8001720:	4629      	mov	r1, r5
 8001722:	f000 fb47 	bl	8001db4 <_malloc_r>
 8001726:	4606      	mov	r6, r0
 8001728:	b950      	cbnz	r0, 8001740 <__ssputs_r+0x5c>
 800172a:	230c      	movs	r3, #12
 800172c:	f8ca 3000 	str.w	r3, [sl]
 8001730:	89a3      	ldrh	r3, [r4, #12]
 8001732:	f04f 30ff 	mov.w	r0, #4294967295
 8001736:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800173a:	81a3      	strh	r3, [r4, #12]
 800173c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001740:	463a      	mov	r2, r7
 8001742:	6921      	ldr	r1, [r4, #16]
 8001744:	f000 fac4 	bl	8001cd0 <memcpy>
 8001748:	89a3      	ldrh	r3, [r4, #12]
 800174a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800174e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001752:	81a3      	strh	r3, [r4, #12]
 8001754:	6126      	str	r6, [r4, #16]
 8001756:	443e      	add	r6, r7
 8001758:	6026      	str	r6, [r4, #0]
 800175a:	4646      	mov	r6, r8
 800175c:	6165      	str	r5, [r4, #20]
 800175e:	1bed      	subs	r5, r5, r7
 8001760:	60a5      	str	r5, [r4, #8]
 8001762:	4546      	cmp	r6, r8
 8001764:	bf28      	it	cs
 8001766:	4646      	movcs	r6, r8
 8001768:	4649      	mov	r1, r9
 800176a:	4632      	mov	r2, r6
 800176c:	6820      	ldr	r0, [r4, #0]
 800176e:	f000 faba 	bl	8001ce6 <memmove>
 8001772:	68a3      	ldr	r3, [r4, #8]
 8001774:	2000      	movs	r0, #0
 8001776:	1b9b      	subs	r3, r3, r6
 8001778:	60a3      	str	r3, [r4, #8]
 800177a:	6823      	ldr	r3, [r4, #0]
 800177c:	441e      	add	r6, r3
 800177e:	6026      	str	r6, [r4, #0]
 8001780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001784:	462a      	mov	r2, r5
 8001786:	f000 fb73 	bl	8001e70 <_realloc_r>
 800178a:	4606      	mov	r6, r0
 800178c:	2800      	cmp	r0, #0
 800178e:	d1e1      	bne.n	8001754 <__ssputs_r+0x70>
 8001790:	6921      	ldr	r1, [r4, #16]
 8001792:	4650      	mov	r0, sl
 8001794:	f000 fac2 	bl	8001d1c <_free_r>
 8001798:	e7c7      	b.n	800172a <__ssputs_r+0x46>
	...

0800179c <_svfiprintf_r>:
 800179c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017a0:	b09d      	sub	sp, #116	; 0x74
 80017a2:	9303      	str	r3, [sp, #12]
 80017a4:	898b      	ldrh	r3, [r1, #12]
 80017a6:	4680      	mov	r8, r0
 80017a8:	061c      	lsls	r4, r3, #24
 80017aa:	460d      	mov	r5, r1
 80017ac:	4616      	mov	r6, r2
 80017ae:	d50f      	bpl.n	80017d0 <_svfiprintf_r+0x34>
 80017b0:	690b      	ldr	r3, [r1, #16]
 80017b2:	b96b      	cbnz	r3, 80017d0 <_svfiprintf_r+0x34>
 80017b4:	2140      	movs	r1, #64	; 0x40
 80017b6:	f000 fafd 	bl	8001db4 <_malloc_r>
 80017ba:	6028      	str	r0, [r5, #0]
 80017bc:	6128      	str	r0, [r5, #16]
 80017be:	b928      	cbnz	r0, 80017cc <_svfiprintf_r+0x30>
 80017c0:	230c      	movs	r3, #12
 80017c2:	f8c8 3000 	str.w	r3, [r8]
 80017c6:	f04f 30ff 	mov.w	r0, #4294967295
 80017ca:	e0c4      	b.n	8001956 <_svfiprintf_r+0x1ba>
 80017cc:	2340      	movs	r3, #64	; 0x40
 80017ce:	616b      	str	r3, [r5, #20]
 80017d0:	2300      	movs	r3, #0
 80017d2:	9309      	str	r3, [sp, #36]	; 0x24
 80017d4:	2320      	movs	r3, #32
 80017d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80017da:	2330      	movs	r3, #48	; 0x30
 80017dc:	f04f 0b01 	mov.w	fp, #1
 80017e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80017e4:	4637      	mov	r7, r6
 80017e6:	463c      	mov	r4, r7
 80017e8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d13c      	bne.n	800186a <_svfiprintf_r+0xce>
 80017f0:	ebb7 0a06 	subs.w	sl, r7, r6
 80017f4:	d00b      	beq.n	800180e <_svfiprintf_r+0x72>
 80017f6:	4653      	mov	r3, sl
 80017f8:	4632      	mov	r2, r6
 80017fa:	4629      	mov	r1, r5
 80017fc:	4640      	mov	r0, r8
 80017fe:	f7ff ff71 	bl	80016e4 <__ssputs_r>
 8001802:	3001      	adds	r0, #1
 8001804:	f000 80a2 	beq.w	800194c <_svfiprintf_r+0x1b0>
 8001808:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800180a:	4453      	add	r3, sl
 800180c:	9309      	str	r3, [sp, #36]	; 0x24
 800180e:	783b      	ldrb	r3, [r7, #0]
 8001810:	2b00      	cmp	r3, #0
 8001812:	f000 809b 	beq.w	800194c <_svfiprintf_r+0x1b0>
 8001816:	2300      	movs	r3, #0
 8001818:	f04f 32ff 	mov.w	r2, #4294967295
 800181c:	9304      	str	r3, [sp, #16]
 800181e:	9307      	str	r3, [sp, #28]
 8001820:	9205      	str	r2, [sp, #20]
 8001822:	9306      	str	r3, [sp, #24]
 8001824:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001828:	931a      	str	r3, [sp, #104]	; 0x68
 800182a:	2205      	movs	r2, #5
 800182c:	7821      	ldrb	r1, [r4, #0]
 800182e:	4850      	ldr	r0, [pc, #320]	; (8001970 <_svfiprintf_r+0x1d4>)
 8001830:	f000 fa40 	bl	8001cb4 <memchr>
 8001834:	1c67      	adds	r7, r4, #1
 8001836:	9b04      	ldr	r3, [sp, #16]
 8001838:	b9d8      	cbnz	r0, 8001872 <_svfiprintf_r+0xd6>
 800183a:	06d9      	lsls	r1, r3, #27
 800183c:	bf44      	itt	mi
 800183e:	2220      	movmi	r2, #32
 8001840:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001844:	071a      	lsls	r2, r3, #28
 8001846:	bf44      	itt	mi
 8001848:	222b      	movmi	r2, #43	; 0x2b
 800184a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800184e:	7822      	ldrb	r2, [r4, #0]
 8001850:	2a2a      	cmp	r2, #42	; 0x2a
 8001852:	d016      	beq.n	8001882 <_svfiprintf_r+0xe6>
 8001854:	2100      	movs	r1, #0
 8001856:	200a      	movs	r0, #10
 8001858:	9a07      	ldr	r2, [sp, #28]
 800185a:	4627      	mov	r7, r4
 800185c:	783b      	ldrb	r3, [r7, #0]
 800185e:	3401      	adds	r4, #1
 8001860:	3b30      	subs	r3, #48	; 0x30
 8001862:	2b09      	cmp	r3, #9
 8001864:	d950      	bls.n	8001908 <_svfiprintf_r+0x16c>
 8001866:	b1c9      	cbz	r1, 800189c <_svfiprintf_r+0x100>
 8001868:	e011      	b.n	800188e <_svfiprintf_r+0xf2>
 800186a:	2b25      	cmp	r3, #37	; 0x25
 800186c:	d0c0      	beq.n	80017f0 <_svfiprintf_r+0x54>
 800186e:	4627      	mov	r7, r4
 8001870:	e7b9      	b.n	80017e6 <_svfiprintf_r+0x4a>
 8001872:	4a3f      	ldr	r2, [pc, #252]	; (8001970 <_svfiprintf_r+0x1d4>)
 8001874:	463c      	mov	r4, r7
 8001876:	1a80      	subs	r0, r0, r2
 8001878:	fa0b f000 	lsl.w	r0, fp, r0
 800187c:	4318      	orrs	r0, r3
 800187e:	9004      	str	r0, [sp, #16]
 8001880:	e7d3      	b.n	800182a <_svfiprintf_r+0x8e>
 8001882:	9a03      	ldr	r2, [sp, #12]
 8001884:	1d11      	adds	r1, r2, #4
 8001886:	6812      	ldr	r2, [r2, #0]
 8001888:	9103      	str	r1, [sp, #12]
 800188a:	2a00      	cmp	r2, #0
 800188c:	db01      	blt.n	8001892 <_svfiprintf_r+0xf6>
 800188e:	9207      	str	r2, [sp, #28]
 8001890:	e004      	b.n	800189c <_svfiprintf_r+0x100>
 8001892:	4252      	negs	r2, r2
 8001894:	f043 0302 	orr.w	r3, r3, #2
 8001898:	9207      	str	r2, [sp, #28]
 800189a:	9304      	str	r3, [sp, #16]
 800189c:	783b      	ldrb	r3, [r7, #0]
 800189e:	2b2e      	cmp	r3, #46	; 0x2e
 80018a0:	d10d      	bne.n	80018be <_svfiprintf_r+0x122>
 80018a2:	787b      	ldrb	r3, [r7, #1]
 80018a4:	1c79      	adds	r1, r7, #1
 80018a6:	2b2a      	cmp	r3, #42	; 0x2a
 80018a8:	d132      	bne.n	8001910 <_svfiprintf_r+0x174>
 80018aa:	9b03      	ldr	r3, [sp, #12]
 80018ac:	3702      	adds	r7, #2
 80018ae:	1d1a      	adds	r2, r3, #4
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	9203      	str	r2, [sp, #12]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	bfb8      	it	lt
 80018b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80018bc:	9305      	str	r3, [sp, #20]
 80018be:	4c2d      	ldr	r4, [pc, #180]	; (8001974 <_svfiprintf_r+0x1d8>)
 80018c0:	2203      	movs	r2, #3
 80018c2:	7839      	ldrb	r1, [r7, #0]
 80018c4:	4620      	mov	r0, r4
 80018c6:	f000 f9f5 	bl	8001cb4 <memchr>
 80018ca:	b138      	cbz	r0, 80018dc <_svfiprintf_r+0x140>
 80018cc:	2340      	movs	r3, #64	; 0x40
 80018ce:	1b00      	subs	r0, r0, r4
 80018d0:	fa03 f000 	lsl.w	r0, r3, r0
 80018d4:	9b04      	ldr	r3, [sp, #16]
 80018d6:	3701      	adds	r7, #1
 80018d8:	4303      	orrs	r3, r0
 80018da:	9304      	str	r3, [sp, #16]
 80018dc:	7839      	ldrb	r1, [r7, #0]
 80018de:	2206      	movs	r2, #6
 80018e0:	4825      	ldr	r0, [pc, #148]	; (8001978 <_svfiprintf_r+0x1dc>)
 80018e2:	1c7e      	adds	r6, r7, #1
 80018e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80018e8:	f000 f9e4 	bl	8001cb4 <memchr>
 80018ec:	2800      	cmp	r0, #0
 80018ee:	d035      	beq.n	800195c <_svfiprintf_r+0x1c0>
 80018f0:	4b22      	ldr	r3, [pc, #136]	; (800197c <_svfiprintf_r+0x1e0>)
 80018f2:	b9fb      	cbnz	r3, 8001934 <_svfiprintf_r+0x198>
 80018f4:	9b03      	ldr	r3, [sp, #12]
 80018f6:	3307      	adds	r3, #7
 80018f8:	f023 0307 	bic.w	r3, r3, #7
 80018fc:	3308      	adds	r3, #8
 80018fe:	9303      	str	r3, [sp, #12]
 8001900:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001902:	444b      	add	r3, r9
 8001904:	9309      	str	r3, [sp, #36]	; 0x24
 8001906:	e76d      	b.n	80017e4 <_svfiprintf_r+0x48>
 8001908:	fb00 3202 	mla	r2, r0, r2, r3
 800190c:	2101      	movs	r1, #1
 800190e:	e7a4      	b.n	800185a <_svfiprintf_r+0xbe>
 8001910:	2300      	movs	r3, #0
 8001912:	240a      	movs	r4, #10
 8001914:	4618      	mov	r0, r3
 8001916:	9305      	str	r3, [sp, #20]
 8001918:	460f      	mov	r7, r1
 800191a:	783a      	ldrb	r2, [r7, #0]
 800191c:	3101      	adds	r1, #1
 800191e:	3a30      	subs	r2, #48	; 0x30
 8001920:	2a09      	cmp	r2, #9
 8001922:	d903      	bls.n	800192c <_svfiprintf_r+0x190>
 8001924:	2b00      	cmp	r3, #0
 8001926:	d0ca      	beq.n	80018be <_svfiprintf_r+0x122>
 8001928:	9005      	str	r0, [sp, #20]
 800192a:	e7c8      	b.n	80018be <_svfiprintf_r+0x122>
 800192c:	fb04 2000 	mla	r0, r4, r0, r2
 8001930:	2301      	movs	r3, #1
 8001932:	e7f1      	b.n	8001918 <_svfiprintf_r+0x17c>
 8001934:	ab03      	add	r3, sp, #12
 8001936:	9300      	str	r3, [sp, #0]
 8001938:	462a      	mov	r2, r5
 800193a:	4b11      	ldr	r3, [pc, #68]	; (8001980 <_svfiprintf_r+0x1e4>)
 800193c:	a904      	add	r1, sp, #16
 800193e:	4640      	mov	r0, r8
 8001940:	f3af 8000 	nop.w
 8001944:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001948:	4681      	mov	r9, r0
 800194a:	d1d9      	bne.n	8001900 <_svfiprintf_r+0x164>
 800194c:	89ab      	ldrh	r3, [r5, #12]
 800194e:	065b      	lsls	r3, r3, #25
 8001950:	f53f af39 	bmi.w	80017c6 <_svfiprintf_r+0x2a>
 8001954:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001956:	b01d      	add	sp, #116	; 0x74
 8001958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800195c:	ab03      	add	r3, sp, #12
 800195e:	9300      	str	r3, [sp, #0]
 8001960:	462a      	mov	r2, r5
 8001962:	4b07      	ldr	r3, [pc, #28]	; (8001980 <_svfiprintf_r+0x1e4>)
 8001964:	a904      	add	r1, sp, #16
 8001966:	4640      	mov	r0, r8
 8001968:	f000 f884 	bl	8001a74 <_printf_i>
 800196c:	e7ea      	b.n	8001944 <_svfiprintf_r+0x1a8>
 800196e:	bf00      	nop
 8001970:	08001f66 	.word	0x08001f66
 8001974:	08001f6c 	.word	0x08001f6c
 8001978:	08001f70 	.word	0x08001f70
 800197c:	00000000 	.word	0x00000000
 8001980:	080016e5 	.word	0x080016e5

08001984 <_printf_common>:
 8001984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001988:	4691      	mov	r9, r2
 800198a:	461f      	mov	r7, r3
 800198c:	688a      	ldr	r2, [r1, #8]
 800198e:	690b      	ldr	r3, [r1, #16]
 8001990:	4606      	mov	r6, r0
 8001992:	4293      	cmp	r3, r2
 8001994:	bfb8      	it	lt
 8001996:	4613      	movlt	r3, r2
 8001998:	f8c9 3000 	str.w	r3, [r9]
 800199c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80019a0:	460c      	mov	r4, r1
 80019a2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80019a6:	b112      	cbz	r2, 80019ae <_printf_common+0x2a>
 80019a8:	3301      	adds	r3, #1
 80019aa:	f8c9 3000 	str.w	r3, [r9]
 80019ae:	6823      	ldr	r3, [r4, #0]
 80019b0:	0699      	lsls	r1, r3, #26
 80019b2:	bf42      	ittt	mi
 80019b4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80019b8:	3302      	addmi	r3, #2
 80019ba:	f8c9 3000 	strmi.w	r3, [r9]
 80019be:	6825      	ldr	r5, [r4, #0]
 80019c0:	f015 0506 	ands.w	r5, r5, #6
 80019c4:	d107      	bne.n	80019d6 <_printf_common+0x52>
 80019c6:	f104 0a19 	add.w	sl, r4, #25
 80019ca:	68e3      	ldr	r3, [r4, #12]
 80019cc:	f8d9 2000 	ldr.w	r2, [r9]
 80019d0:	1a9b      	subs	r3, r3, r2
 80019d2:	429d      	cmp	r5, r3
 80019d4:	db2a      	blt.n	8001a2c <_printf_common+0xa8>
 80019d6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80019da:	6822      	ldr	r2, [r4, #0]
 80019dc:	3300      	adds	r3, #0
 80019de:	bf18      	it	ne
 80019e0:	2301      	movne	r3, #1
 80019e2:	0692      	lsls	r2, r2, #26
 80019e4:	d42f      	bmi.n	8001a46 <_printf_common+0xc2>
 80019e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80019ea:	4639      	mov	r1, r7
 80019ec:	4630      	mov	r0, r6
 80019ee:	47c0      	blx	r8
 80019f0:	3001      	adds	r0, #1
 80019f2:	d022      	beq.n	8001a3a <_printf_common+0xb6>
 80019f4:	6823      	ldr	r3, [r4, #0]
 80019f6:	68e5      	ldr	r5, [r4, #12]
 80019f8:	f003 0306 	and.w	r3, r3, #6
 80019fc:	2b04      	cmp	r3, #4
 80019fe:	bf18      	it	ne
 8001a00:	2500      	movne	r5, #0
 8001a02:	f8d9 2000 	ldr.w	r2, [r9]
 8001a06:	f04f 0900 	mov.w	r9, #0
 8001a0a:	bf08      	it	eq
 8001a0c:	1aad      	subeq	r5, r5, r2
 8001a0e:	68a3      	ldr	r3, [r4, #8]
 8001a10:	6922      	ldr	r2, [r4, #16]
 8001a12:	bf08      	it	eq
 8001a14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	bfc4      	itt	gt
 8001a1c:	1a9b      	subgt	r3, r3, r2
 8001a1e:	18ed      	addgt	r5, r5, r3
 8001a20:	341a      	adds	r4, #26
 8001a22:	454d      	cmp	r5, r9
 8001a24:	d11b      	bne.n	8001a5e <_printf_common+0xda>
 8001a26:	2000      	movs	r0, #0
 8001a28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	4652      	mov	r2, sl
 8001a30:	4639      	mov	r1, r7
 8001a32:	4630      	mov	r0, r6
 8001a34:	47c0      	blx	r8
 8001a36:	3001      	adds	r0, #1
 8001a38:	d103      	bne.n	8001a42 <_printf_common+0xbe>
 8001a3a:	f04f 30ff 	mov.w	r0, #4294967295
 8001a3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a42:	3501      	adds	r5, #1
 8001a44:	e7c1      	b.n	80019ca <_printf_common+0x46>
 8001a46:	2030      	movs	r0, #48	; 0x30
 8001a48:	18e1      	adds	r1, r4, r3
 8001a4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001a4e:	1c5a      	adds	r2, r3, #1
 8001a50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001a54:	4422      	add	r2, r4
 8001a56:	3302      	adds	r3, #2
 8001a58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001a5c:	e7c3      	b.n	80019e6 <_printf_common+0x62>
 8001a5e:	2301      	movs	r3, #1
 8001a60:	4622      	mov	r2, r4
 8001a62:	4639      	mov	r1, r7
 8001a64:	4630      	mov	r0, r6
 8001a66:	47c0      	blx	r8
 8001a68:	3001      	adds	r0, #1
 8001a6a:	d0e6      	beq.n	8001a3a <_printf_common+0xb6>
 8001a6c:	f109 0901 	add.w	r9, r9, #1
 8001a70:	e7d7      	b.n	8001a22 <_printf_common+0x9e>
	...

08001a74 <_printf_i>:
 8001a74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a78:	4617      	mov	r7, r2
 8001a7a:	7e0a      	ldrb	r2, [r1, #24]
 8001a7c:	b085      	sub	sp, #20
 8001a7e:	2a6e      	cmp	r2, #110	; 0x6e
 8001a80:	4698      	mov	r8, r3
 8001a82:	4606      	mov	r6, r0
 8001a84:	460c      	mov	r4, r1
 8001a86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001a88:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8001a8c:	f000 80bc 	beq.w	8001c08 <_printf_i+0x194>
 8001a90:	d81a      	bhi.n	8001ac8 <_printf_i+0x54>
 8001a92:	2a63      	cmp	r2, #99	; 0x63
 8001a94:	d02e      	beq.n	8001af4 <_printf_i+0x80>
 8001a96:	d80a      	bhi.n	8001aae <_printf_i+0x3a>
 8001a98:	2a00      	cmp	r2, #0
 8001a9a:	f000 80c8 	beq.w	8001c2e <_printf_i+0x1ba>
 8001a9e:	2a58      	cmp	r2, #88	; 0x58
 8001aa0:	f000 808a 	beq.w	8001bb8 <_printf_i+0x144>
 8001aa4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001aa8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8001aac:	e02a      	b.n	8001b04 <_printf_i+0x90>
 8001aae:	2a64      	cmp	r2, #100	; 0x64
 8001ab0:	d001      	beq.n	8001ab6 <_printf_i+0x42>
 8001ab2:	2a69      	cmp	r2, #105	; 0x69
 8001ab4:	d1f6      	bne.n	8001aa4 <_printf_i+0x30>
 8001ab6:	6821      	ldr	r1, [r4, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001abe:	d023      	beq.n	8001b08 <_printf_i+0x94>
 8001ac0:	1d11      	adds	r1, r2, #4
 8001ac2:	6019      	str	r1, [r3, #0]
 8001ac4:	6813      	ldr	r3, [r2, #0]
 8001ac6:	e027      	b.n	8001b18 <_printf_i+0xa4>
 8001ac8:	2a73      	cmp	r2, #115	; 0x73
 8001aca:	f000 80b4 	beq.w	8001c36 <_printf_i+0x1c2>
 8001ace:	d808      	bhi.n	8001ae2 <_printf_i+0x6e>
 8001ad0:	2a6f      	cmp	r2, #111	; 0x6f
 8001ad2:	d02a      	beq.n	8001b2a <_printf_i+0xb6>
 8001ad4:	2a70      	cmp	r2, #112	; 0x70
 8001ad6:	d1e5      	bne.n	8001aa4 <_printf_i+0x30>
 8001ad8:	680a      	ldr	r2, [r1, #0]
 8001ada:	f042 0220 	orr.w	r2, r2, #32
 8001ade:	600a      	str	r2, [r1, #0]
 8001ae0:	e003      	b.n	8001aea <_printf_i+0x76>
 8001ae2:	2a75      	cmp	r2, #117	; 0x75
 8001ae4:	d021      	beq.n	8001b2a <_printf_i+0xb6>
 8001ae6:	2a78      	cmp	r2, #120	; 0x78
 8001ae8:	d1dc      	bne.n	8001aa4 <_printf_i+0x30>
 8001aea:	2278      	movs	r2, #120	; 0x78
 8001aec:	496f      	ldr	r1, [pc, #444]	; (8001cac <_printf_i+0x238>)
 8001aee:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8001af2:	e064      	b.n	8001bbe <_printf_i+0x14a>
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8001afa:	1d11      	adds	r1, r2, #4
 8001afc:	6019      	str	r1, [r3, #0]
 8001afe:	6813      	ldr	r3, [r2, #0]
 8001b00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001b04:	2301      	movs	r3, #1
 8001b06:	e0a3      	b.n	8001c50 <_printf_i+0x1dc>
 8001b08:	f011 0f40 	tst.w	r1, #64	; 0x40
 8001b0c:	f102 0104 	add.w	r1, r2, #4
 8001b10:	6019      	str	r1, [r3, #0]
 8001b12:	d0d7      	beq.n	8001ac4 <_printf_i+0x50>
 8001b14:	f9b2 3000 	ldrsh.w	r3, [r2]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	da03      	bge.n	8001b24 <_printf_i+0xb0>
 8001b1c:	222d      	movs	r2, #45	; 0x2d
 8001b1e:	425b      	negs	r3, r3
 8001b20:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001b24:	4962      	ldr	r1, [pc, #392]	; (8001cb0 <_printf_i+0x23c>)
 8001b26:	220a      	movs	r2, #10
 8001b28:	e017      	b.n	8001b5a <_printf_i+0xe6>
 8001b2a:	6820      	ldr	r0, [r4, #0]
 8001b2c:	6819      	ldr	r1, [r3, #0]
 8001b2e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001b32:	d003      	beq.n	8001b3c <_printf_i+0xc8>
 8001b34:	1d08      	adds	r0, r1, #4
 8001b36:	6018      	str	r0, [r3, #0]
 8001b38:	680b      	ldr	r3, [r1, #0]
 8001b3a:	e006      	b.n	8001b4a <_printf_i+0xd6>
 8001b3c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001b40:	f101 0004 	add.w	r0, r1, #4
 8001b44:	6018      	str	r0, [r3, #0]
 8001b46:	d0f7      	beq.n	8001b38 <_printf_i+0xc4>
 8001b48:	880b      	ldrh	r3, [r1, #0]
 8001b4a:	2a6f      	cmp	r2, #111	; 0x6f
 8001b4c:	bf14      	ite	ne
 8001b4e:	220a      	movne	r2, #10
 8001b50:	2208      	moveq	r2, #8
 8001b52:	4957      	ldr	r1, [pc, #348]	; (8001cb0 <_printf_i+0x23c>)
 8001b54:	2000      	movs	r0, #0
 8001b56:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8001b5a:	6865      	ldr	r5, [r4, #4]
 8001b5c:	2d00      	cmp	r5, #0
 8001b5e:	60a5      	str	r5, [r4, #8]
 8001b60:	f2c0 809c 	blt.w	8001c9c <_printf_i+0x228>
 8001b64:	6820      	ldr	r0, [r4, #0]
 8001b66:	f020 0004 	bic.w	r0, r0, #4
 8001b6a:	6020      	str	r0, [r4, #0]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d13f      	bne.n	8001bf0 <_printf_i+0x17c>
 8001b70:	2d00      	cmp	r5, #0
 8001b72:	f040 8095 	bne.w	8001ca0 <_printf_i+0x22c>
 8001b76:	4675      	mov	r5, lr
 8001b78:	2a08      	cmp	r2, #8
 8001b7a:	d10b      	bne.n	8001b94 <_printf_i+0x120>
 8001b7c:	6823      	ldr	r3, [r4, #0]
 8001b7e:	07da      	lsls	r2, r3, #31
 8001b80:	d508      	bpl.n	8001b94 <_printf_i+0x120>
 8001b82:	6923      	ldr	r3, [r4, #16]
 8001b84:	6862      	ldr	r2, [r4, #4]
 8001b86:	429a      	cmp	r2, r3
 8001b88:	bfde      	ittt	le
 8001b8a:	2330      	movle	r3, #48	; 0x30
 8001b8c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001b90:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001b94:	ebae 0305 	sub.w	r3, lr, r5
 8001b98:	6123      	str	r3, [r4, #16]
 8001b9a:	f8cd 8000 	str.w	r8, [sp]
 8001b9e:	463b      	mov	r3, r7
 8001ba0:	aa03      	add	r2, sp, #12
 8001ba2:	4621      	mov	r1, r4
 8001ba4:	4630      	mov	r0, r6
 8001ba6:	f7ff feed 	bl	8001984 <_printf_common>
 8001baa:	3001      	adds	r0, #1
 8001bac:	d155      	bne.n	8001c5a <_printf_i+0x1e6>
 8001bae:	f04f 30ff 	mov.w	r0, #4294967295
 8001bb2:	b005      	add	sp, #20
 8001bb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001bb8:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8001bbc:	493c      	ldr	r1, [pc, #240]	; (8001cb0 <_printf_i+0x23c>)
 8001bbe:	6822      	ldr	r2, [r4, #0]
 8001bc0:	6818      	ldr	r0, [r3, #0]
 8001bc2:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001bc6:	f100 0504 	add.w	r5, r0, #4
 8001bca:	601d      	str	r5, [r3, #0]
 8001bcc:	d001      	beq.n	8001bd2 <_printf_i+0x15e>
 8001bce:	6803      	ldr	r3, [r0, #0]
 8001bd0:	e002      	b.n	8001bd8 <_printf_i+0x164>
 8001bd2:	0655      	lsls	r5, r2, #25
 8001bd4:	d5fb      	bpl.n	8001bce <_printf_i+0x15a>
 8001bd6:	8803      	ldrh	r3, [r0, #0]
 8001bd8:	07d0      	lsls	r0, r2, #31
 8001bda:	bf44      	itt	mi
 8001bdc:	f042 0220 	orrmi.w	r2, r2, #32
 8001be0:	6022      	strmi	r2, [r4, #0]
 8001be2:	b91b      	cbnz	r3, 8001bec <_printf_i+0x178>
 8001be4:	6822      	ldr	r2, [r4, #0]
 8001be6:	f022 0220 	bic.w	r2, r2, #32
 8001bea:	6022      	str	r2, [r4, #0]
 8001bec:	2210      	movs	r2, #16
 8001bee:	e7b1      	b.n	8001b54 <_printf_i+0xe0>
 8001bf0:	4675      	mov	r5, lr
 8001bf2:	fbb3 f0f2 	udiv	r0, r3, r2
 8001bf6:	fb02 3310 	mls	r3, r2, r0, r3
 8001bfa:	5ccb      	ldrb	r3, [r1, r3]
 8001bfc:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001c00:	4603      	mov	r3, r0
 8001c02:	2800      	cmp	r0, #0
 8001c04:	d1f5      	bne.n	8001bf2 <_printf_i+0x17e>
 8001c06:	e7b7      	b.n	8001b78 <_printf_i+0x104>
 8001c08:	6808      	ldr	r0, [r1, #0]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001c10:	6949      	ldr	r1, [r1, #20]
 8001c12:	d004      	beq.n	8001c1e <_printf_i+0x1aa>
 8001c14:	1d10      	adds	r0, r2, #4
 8001c16:	6018      	str	r0, [r3, #0]
 8001c18:	6813      	ldr	r3, [r2, #0]
 8001c1a:	6019      	str	r1, [r3, #0]
 8001c1c:	e007      	b.n	8001c2e <_printf_i+0x1ba>
 8001c1e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001c22:	f102 0004 	add.w	r0, r2, #4
 8001c26:	6018      	str	r0, [r3, #0]
 8001c28:	6813      	ldr	r3, [r2, #0]
 8001c2a:	d0f6      	beq.n	8001c1a <_printf_i+0x1a6>
 8001c2c:	8019      	strh	r1, [r3, #0]
 8001c2e:	2300      	movs	r3, #0
 8001c30:	4675      	mov	r5, lr
 8001c32:	6123      	str	r3, [r4, #16]
 8001c34:	e7b1      	b.n	8001b9a <_printf_i+0x126>
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	1d11      	adds	r1, r2, #4
 8001c3a:	6019      	str	r1, [r3, #0]
 8001c3c:	6815      	ldr	r5, [r2, #0]
 8001c3e:	2100      	movs	r1, #0
 8001c40:	6862      	ldr	r2, [r4, #4]
 8001c42:	4628      	mov	r0, r5
 8001c44:	f000 f836 	bl	8001cb4 <memchr>
 8001c48:	b108      	cbz	r0, 8001c4e <_printf_i+0x1da>
 8001c4a:	1b40      	subs	r0, r0, r5
 8001c4c:	6060      	str	r0, [r4, #4]
 8001c4e:	6863      	ldr	r3, [r4, #4]
 8001c50:	6123      	str	r3, [r4, #16]
 8001c52:	2300      	movs	r3, #0
 8001c54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001c58:	e79f      	b.n	8001b9a <_printf_i+0x126>
 8001c5a:	6923      	ldr	r3, [r4, #16]
 8001c5c:	462a      	mov	r2, r5
 8001c5e:	4639      	mov	r1, r7
 8001c60:	4630      	mov	r0, r6
 8001c62:	47c0      	blx	r8
 8001c64:	3001      	adds	r0, #1
 8001c66:	d0a2      	beq.n	8001bae <_printf_i+0x13a>
 8001c68:	6823      	ldr	r3, [r4, #0]
 8001c6a:	079b      	lsls	r3, r3, #30
 8001c6c:	d507      	bpl.n	8001c7e <_printf_i+0x20a>
 8001c6e:	2500      	movs	r5, #0
 8001c70:	f104 0919 	add.w	r9, r4, #25
 8001c74:	68e3      	ldr	r3, [r4, #12]
 8001c76:	9a03      	ldr	r2, [sp, #12]
 8001c78:	1a9b      	subs	r3, r3, r2
 8001c7a:	429d      	cmp	r5, r3
 8001c7c:	db05      	blt.n	8001c8a <_printf_i+0x216>
 8001c7e:	68e0      	ldr	r0, [r4, #12]
 8001c80:	9b03      	ldr	r3, [sp, #12]
 8001c82:	4298      	cmp	r0, r3
 8001c84:	bfb8      	it	lt
 8001c86:	4618      	movlt	r0, r3
 8001c88:	e793      	b.n	8001bb2 <_printf_i+0x13e>
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	464a      	mov	r2, r9
 8001c8e:	4639      	mov	r1, r7
 8001c90:	4630      	mov	r0, r6
 8001c92:	47c0      	blx	r8
 8001c94:	3001      	adds	r0, #1
 8001c96:	d08a      	beq.n	8001bae <_printf_i+0x13a>
 8001c98:	3501      	adds	r5, #1
 8001c9a:	e7eb      	b.n	8001c74 <_printf_i+0x200>
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d1a7      	bne.n	8001bf0 <_printf_i+0x17c>
 8001ca0:	780b      	ldrb	r3, [r1, #0]
 8001ca2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001ca6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001caa:	e765      	b.n	8001b78 <_printf_i+0x104>
 8001cac:	08001f88 	.word	0x08001f88
 8001cb0:	08001f77 	.word	0x08001f77

08001cb4 <memchr>:
 8001cb4:	b510      	push	{r4, lr}
 8001cb6:	b2c9      	uxtb	r1, r1
 8001cb8:	4402      	add	r2, r0
 8001cba:	4290      	cmp	r0, r2
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	d101      	bne.n	8001cc4 <memchr+0x10>
 8001cc0:	2000      	movs	r0, #0
 8001cc2:	bd10      	pop	{r4, pc}
 8001cc4:	781c      	ldrb	r4, [r3, #0]
 8001cc6:	3001      	adds	r0, #1
 8001cc8:	428c      	cmp	r4, r1
 8001cca:	d1f6      	bne.n	8001cba <memchr+0x6>
 8001ccc:	4618      	mov	r0, r3
 8001cce:	bd10      	pop	{r4, pc}

08001cd0 <memcpy>:
 8001cd0:	b510      	push	{r4, lr}
 8001cd2:	1e43      	subs	r3, r0, #1
 8001cd4:	440a      	add	r2, r1
 8001cd6:	4291      	cmp	r1, r2
 8001cd8:	d100      	bne.n	8001cdc <memcpy+0xc>
 8001cda:	bd10      	pop	{r4, pc}
 8001cdc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001ce0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001ce4:	e7f7      	b.n	8001cd6 <memcpy+0x6>

08001ce6 <memmove>:
 8001ce6:	4288      	cmp	r0, r1
 8001ce8:	b510      	push	{r4, lr}
 8001cea:	eb01 0302 	add.w	r3, r1, r2
 8001cee:	d803      	bhi.n	8001cf8 <memmove+0x12>
 8001cf0:	1e42      	subs	r2, r0, #1
 8001cf2:	4299      	cmp	r1, r3
 8001cf4:	d10c      	bne.n	8001d10 <memmove+0x2a>
 8001cf6:	bd10      	pop	{r4, pc}
 8001cf8:	4298      	cmp	r0, r3
 8001cfa:	d2f9      	bcs.n	8001cf0 <memmove+0xa>
 8001cfc:	1881      	adds	r1, r0, r2
 8001cfe:	1ad2      	subs	r2, r2, r3
 8001d00:	42d3      	cmn	r3, r2
 8001d02:	d100      	bne.n	8001d06 <memmove+0x20>
 8001d04:	bd10      	pop	{r4, pc}
 8001d06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001d0a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8001d0e:	e7f7      	b.n	8001d00 <memmove+0x1a>
 8001d10:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001d14:	f802 4f01 	strb.w	r4, [r2, #1]!
 8001d18:	e7eb      	b.n	8001cf2 <memmove+0xc>
	...

08001d1c <_free_r>:
 8001d1c:	b538      	push	{r3, r4, r5, lr}
 8001d1e:	4605      	mov	r5, r0
 8001d20:	2900      	cmp	r1, #0
 8001d22:	d043      	beq.n	8001dac <_free_r+0x90>
 8001d24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001d28:	1f0c      	subs	r4, r1, #4
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	bfb8      	it	lt
 8001d2e:	18e4      	addlt	r4, r4, r3
 8001d30:	f000 f8d4 	bl	8001edc <__malloc_lock>
 8001d34:	4a1e      	ldr	r2, [pc, #120]	; (8001db0 <_free_r+0x94>)
 8001d36:	6813      	ldr	r3, [r2, #0]
 8001d38:	4610      	mov	r0, r2
 8001d3a:	b933      	cbnz	r3, 8001d4a <_free_r+0x2e>
 8001d3c:	6063      	str	r3, [r4, #4]
 8001d3e:	6014      	str	r4, [r2, #0]
 8001d40:	4628      	mov	r0, r5
 8001d42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001d46:	f000 b8ca 	b.w	8001ede <__malloc_unlock>
 8001d4a:	42a3      	cmp	r3, r4
 8001d4c:	d90b      	bls.n	8001d66 <_free_r+0x4a>
 8001d4e:	6821      	ldr	r1, [r4, #0]
 8001d50:	1862      	adds	r2, r4, r1
 8001d52:	4293      	cmp	r3, r2
 8001d54:	bf01      	itttt	eq
 8001d56:	681a      	ldreq	r2, [r3, #0]
 8001d58:	685b      	ldreq	r3, [r3, #4]
 8001d5a:	1852      	addeq	r2, r2, r1
 8001d5c:	6022      	streq	r2, [r4, #0]
 8001d5e:	6063      	str	r3, [r4, #4]
 8001d60:	6004      	str	r4, [r0, #0]
 8001d62:	e7ed      	b.n	8001d40 <_free_r+0x24>
 8001d64:	4613      	mov	r3, r2
 8001d66:	685a      	ldr	r2, [r3, #4]
 8001d68:	b10a      	cbz	r2, 8001d6e <_free_r+0x52>
 8001d6a:	42a2      	cmp	r2, r4
 8001d6c:	d9fa      	bls.n	8001d64 <_free_r+0x48>
 8001d6e:	6819      	ldr	r1, [r3, #0]
 8001d70:	1858      	adds	r0, r3, r1
 8001d72:	42a0      	cmp	r0, r4
 8001d74:	d10b      	bne.n	8001d8e <_free_r+0x72>
 8001d76:	6820      	ldr	r0, [r4, #0]
 8001d78:	4401      	add	r1, r0
 8001d7a:	1858      	adds	r0, r3, r1
 8001d7c:	4282      	cmp	r2, r0
 8001d7e:	6019      	str	r1, [r3, #0]
 8001d80:	d1de      	bne.n	8001d40 <_free_r+0x24>
 8001d82:	6810      	ldr	r0, [r2, #0]
 8001d84:	6852      	ldr	r2, [r2, #4]
 8001d86:	4401      	add	r1, r0
 8001d88:	6019      	str	r1, [r3, #0]
 8001d8a:	605a      	str	r2, [r3, #4]
 8001d8c:	e7d8      	b.n	8001d40 <_free_r+0x24>
 8001d8e:	d902      	bls.n	8001d96 <_free_r+0x7a>
 8001d90:	230c      	movs	r3, #12
 8001d92:	602b      	str	r3, [r5, #0]
 8001d94:	e7d4      	b.n	8001d40 <_free_r+0x24>
 8001d96:	6820      	ldr	r0, [r4, #0]
 8001d98:	1821      	adds	r1, r4, r0
 8001d9a:	428a      	cmp	r2, r1
 8001d9c:	bf01      	itttt	eq
 8001d9e:	6811      	ldreq	r1, [r2, #0]
 8001da0:	6852      	ldreq	r2, [r2, #4]
 8001da2:	1809      	addeq	r1, r1, r0
 8001da4:	6021      	streq	r1, [r4, #0]
 8001da6:	6062      	str	r2, [r4, #4]
 8001da8:	605c      	str	r4, [r3, #4]
 8001daa:	e7c9      	b.n	8001d40 <_free_r+0x24>
 8001dac:	bd38      	pop	{r3, r4, r5, pc}
 8001dae:	bf00      	nop
 8001db0:	200000c4 	.word	0x200000c4

08001db4 <_malloc_r>:
 8001db4:	b570      	push	{r4, r5, r6, lr}
 8001db6:	1ccd      	adds	r5, r1, #3
 8001db8:	f025 0503 	bic.w	r5, r5, #3
 8001dbc:	3508      	adds	r5, #8
 8001dbe:	2d0c      	cmp	r5, #12
 8001dc0:	bf38      	it	cc
 8001dc2:	250c      	movcc	r5, #12
 8001dc4:	2d00      	cmp	r5, #0
 8001dc6:	4606      	mov	r6, r0
 8001dc8:	db01      	blt.n	8001dce <_malloc_r+0x1a>
 8001dca:	42a9      	cmp	r1, r5
 8001dcc:	d903      	bls.n	8001dd6 <_malloc_r+0x22>
 8001dce:	230c      	movs	r3, #12
 8001dd0:	6033      	str	r3, [r6, #0]
 8001dd2:	2000      	movs	r0, #0
 8001dd4:	bd70      	pop	{r4, r5, r6, pc}
 8001dd6:	f000 f881 	bl	8001edc <__malloc_lock>
 8001dda:	4a23      	ldr	r2, [pc, #140]	; (8001e68 <_malloc_r+0xb4>)
 8001ddc:	6814      	ldr	r4, [r2, #0]
 8001dde:	4621      	mov	r1, r4
 8001de0:	b991      	cbnz	r1, 8001e08 <_malloc_r+0x54>
 8001de2:	4c22      	ldr	r4, [pc, #136]	; (8001e6c <_malloc_r+0xb8>)
 8001de4:	6823      	ldr	r3, [r4, #0]
 8001de6:	b91b      	cbnz	r3, 8001df0 <_malloc_r+0x3c>
 8001de8:	4630      	mov	r0, r6
 8001dea:	f000 f867 	bl	8001ebc <_sbrk_r>
 8001dee:	6020      	str	r0, [r4, #0]
 8001df0:	4629      	mov	r1, r5
 8001df2:	4630      	mov	r0, r6
 8001df4:	f000 f862 	bl	8001ebc <_sbrk_r>
 8001df8:	1c43      	adds	r3, r0, #1
 8001dfa:	d126      	bne.n	8001e4a <_malloc_r+0x96>
 8001dfc:	230c      	movs	r3, #12
 8001dfe:	4630      	mov	r0, r6
 8001e00:	6033      	str	r3, [r6, #0]
 8001e02:	f000 f86c 	bl	8001ede <__malloc_unlock>
 8001e06:	e7e4      	b.n	8001dd2 <_malloc_r+0x1e>
 8001e08:	680b      	ldr	r3, [r1, #0]
 8001e0a:	1b5b      	subs	r3, r3, r5
 8001e0c:	d41a      	bmi.n	8001e44 <_malloc_r+0x90>
 8001e0e:	2b0b      	cmp	r3, #11
 8001e10:	d90f      	bls.n	8001e32 <_malloc_r+0x7e>
 8001e12:	600b      	str	r3, [r1, #0]
 8001e14:	18cc      	adds	r4, r1, r3
 8001e16:	50cd      	str	r5, [r1, r3]
 8001e18:	4630      	mov	r0, r6
 8001e1a:	f000 f860 	bl	8001ede <__malloc_unlock>
 8001e1e:	f104 000b 	add.w	r0, r4, #11
 8001e22:	1d23      	adds	r3, r4, #4
 8001e24:	f020 0007 	bic.w	r0, r0, #7
 8001e28:	1ac3      	subs	r3, r0, r3
 8001e2a:	d01b      	beq.n	8001e64 <_malloc_r+0xb0>
 8001e2c:	425a      	negs	r2, r3
 8001e2e:	50e2      	str	r2, [r4, r3]
 8001e30:	bd70      	pop	{r4, r5, r6, pc}
 8001e32:	428c      	cmp	r4, r1
 8001e34:	bf0b      	itete	eq
 8001e36:	6863      	ldreq	r3, [r4, #4]
 8001e38:	684b      	ldrne	r3, [r1, #4]
 8001e3a:	6013      	streq	r3, [r2, #0]
 8001e3c:	6063      	strne	r3, [r4, #4]
 8001e3e:	bf18      	it	ne
 8001e40:	460c      	movne	r4, r1
 8001e42:	e7e9      	b.n	8001e18 <_malloc_r+0x64>
 8001e44:	460c      	mov	r4, r1
 8001e46:	6849      	ldr	r1, [r1, #4]
 8001e48:	e7ca      	b.n	8001de0 <_malloc_r+0x2c>
 8001e4a:	1cc4      	adds	r4, r0, #3
 8001e4c:	f024 0403 	bic.w	r4, r4, #3
 8001e50:	42a0      	cmp	r0, r4
 8001e52:	d005      	beq.n	8001e60 <_malloc_r+0xac>
 8001e54:	1a21      	subs	r1, r4, r0
 8001e56:	4630      	mov	r0, r6
 8001e58:	f000 f830 	bl	8001ebc <_sbrk_r>
 8001e5c:	3001      	adds	r0, #1
 8001e5e:	d0cd      	beq.n	8001dfc <_malloc_r+0x48>
 8001e60:	6025      	str	r5, [r4, #0]
 8001e62:	e7d9      	b.n	8001e18 <_malloc_r+0x64>
 8001e64:	bd70      	pop	{r4, r5, r6, pc}
 8001e66:	bf00      	nop
 8001e68:	200000c4 	.word	0x200000c4
 8001e6c:	200000c8 	.word	0x200000c8

08001e70 <_realloc_r>:
 8001e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e72:	4607      	mov	r7, r0
 8001e74:	4614      	mov	r4, r2
 8001e76:	460e      	mov	r6, r1
 8001e78:	b921      	cbnz	r1, 8001e84 <_realloc_r+0x14>
 8001e7a:	4611      	mov	r1, r2
 8001e7c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001e80:	f7ff bf98 	b.w	8001db4 <_malloc_r>
 8001e84:	b922      	cbnz	r2, 8001e90 <_realloc_r+0x20>
 8001e86:	f7ff ff49 	bl	8001d1c <_free_r>
 8001e8a:	4625      	mov	r5, r4
 8001e8c:	4628      	mov	r0, r5
 8001e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e90:	f000 f826 	bl	8001ee0 <_malloc_usable_size_r>
 8001e94:	4284      	cmp	r4, r0
 8001e96:	d90f      	bls.n	8001eb8 <_realloc_r+0x48>
 8001e98:	4621      	mov	r1, r4
 8001e9a:	4638      	mov	r0, r7
 8001e9c:	f7ff ff8a 	bl	8001db4 <_malloc_r>
 8001ea0:	4605      	mov	r5, r0
 8001ea2:	2800      	cmp	r0, #0
 8001ea4:	d0f2      	beq.n	8001e8c <_realloc_r+0x1c>
 8001ea6:	4631      	mov	r1, r6
 8001ea8:	4622      	mov	r2, r4
 8001eaa:	f7ff ff11 	bl	8001cd0 <memcpy>
 8001eae:	4631      	mov	r1, r6
 8001eb0:	4638      	mov	r0, r7
 8001eb2:	f7ff ff33 	bl	8001d1c <_free_r>
 8001eb6:	e7e9      	b.n	8001e8c <_realloc_r+0x1c>
 8001eb8:	4635      	mov	r5, r6
 8001eba:	e7e7      	b.n	8001e8c <_realloc_r+0x1c>

08001ebc <_sbrk_r>:
 8001ebc:	b538      	push	{r3, r4, r5, lr}
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	4c05      	ldr	r4, [pc, #20]	; (8001ed8 <_sbrk_r+0x1c>)
 8001ec2:	4605      	mov	r5, r0
 8001ec4:	4608      	mov	r0, r1
 8001ec6:	6023      	str	r3, [r4, #0]
 8001ec8:	f7ff fb4e 	bl	8001568 <_sbrk>
 8001ecc:	1c43      	adds	r3, r0, #1
 8001ece:	d102      	bne.n	8001ed6 <_sbrk_r+0x1a>
 8001ed0:	6823      	ldr	r3, [r4, #0]
 8001ed2:	b103      	cbz	r3, 8001ed6 <_sbrk_r+0x1a>
 8001ed4:	602b      	str	r3, [r5, #0]
 8001ed6:	bd38      	pop	{r3, r4, r5, pc}
 8001ed8:	20000148 	.word	0x20000148

08001edc <__malloc_lock>:
 8001edc:	4770      	bx	lr

08001ede <__malloc_unlock>:
 8001ede:	4770      	bx	lr

08001ee0 <_malloc_usable_size_r>:
 8001ee0:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8001ee4:	2800      	cmp	r0, #0
 8001ee6:	f1a0 0004 	sub.w	r0, r0, #4
 8001eea:	bfbc      	itt	lt
 8001eec:	580b      	ldrlt	r3, [r1, r0]
 8001eee:	18c0      	addlt	r0, r0, r3
 8001ef0:	4770      	bx	lr
	...

08001ef4 <_init>:
 8001ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ef6:	bf00      	nop
 8001ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001efa:	bc08      	pop	{r3}
 8001efc:	469e      	mov	lr, r3
 8001efe:	4770      	bx	lr

08001f00 <_fini>:
 8001f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f02:	bf00      	nop
 8001f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f06:	bc08      	pop	{r3}
 8001f08:	469e      	mov	lr, r3
 8001f0a:	4770      	bx	lr
