
SmartRelay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000270c  080001d0  080001d0  000101d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  080028dc  080028dc  000128dc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800298c  0800298c  0001298c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002990  08002990  00012990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000084  20000000  08002994  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000f0  20000084  08002a18  00020084  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000174  08002a18  00020174  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000bf4c  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001fbc  00000000  00000000  0002bff9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000057fb  00000000  00000000  0002dfb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000008c0  00000000  00000000  000337b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000b80  00000000  00000000  00034070  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000411d  00000000  00000000  00034bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000032ee  00000000  00000000  00038d0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003bffb  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001cec  00000000  00000000  0003c078  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000084 	.word	0x20000084
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080028c4 	.word	0x080028c4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000088 	.word	0x20000088
 800020c:	080028c4 	.word	0x080028c4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <__aeabi_frsub>:
 8000220:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000224:	e002      	b.n	800022c <__addsf3>
 8000226:	bf00      	nop

08000228 <__aeabi_fsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800022c <__addsf3>:
 800022c:	0042      	lsls	r2, r0, #1
 800022e:	bf1f      	itttt	ne
 8000230:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000234:	ea92 0f03 	teqne	r2, r3
 8000238:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800023c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000240:	d06a      	beq.n	8000318 <__addsf3+0xec>
 8000242:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000246:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800024a:	bfc1      	itttt	gt
 800024c:	18d2      	addgt	r2, r2, r3
 800024e:	4041      	eorgt	r1, r0
 8000250:	4048      	eorgt	r0, r1
 8000252:	4041      	eorgt	r1, r0
 8000254:	bfb8      	it	lt
 8000256:	425b      	neglt	r3, r3
 8000258:	2b19      	cmp	r3, #25
 800025a:	bf88      	it	hi
 800025c:	4770      	bxhi	lr
 800025e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000262:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000266:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800026a:	bf18      	it	ne
 800026c:	4240      	negne	r0, r0
 800026e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000272:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000276:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800027a:	bf18      	it	ne
 800027c:	4249      	negne	r1, r1
 800027e:	ea92 0f03 	teq	r2, r3
 8000282:	d03f      	beq.n	8000304 <__addsf3+0xd8>
 8000284:	f1a2 0201 	sub.w	r2, r2, #1
 8000288:	fa41 fc03 	asr.w	ip, r1, r3
 800028c:	eb10 000c 	adds.w	r0, r0, ip
 8000290:	f1c3 0320 	rsb	r3, r3, #32
 8000294:	fa01 f103 	lsl.w	r1, r1, r3
 8000298:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800029c:	d502      	bpl.n	80002a4 <__addsf3+0x78>
 800029e:	4249      	negs	r1, r1
 80002a0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80002a4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80002a8:	d313      	bcc.n	80002d2 <__addsf3+0xa6>
 80002aa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002ae:	d306      	bcc.n	80002be <__addsf3+0x92>
 80002b0:	0840      	lsrs	r0, r0, #1
 80002b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80002b6:	f102 0201 	add.w	r2, r2, #1
 80002ba:	2afe      	cmp	r2, #254	; 0xfe
 80002bc:	d251      	bcs.n	8000362 <__addsf3+0x136>
 80002be:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80002c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80002c6:	bf08      	it	eq
 80002c8:	f020 0001 	biceq.w	r0, r0, #1
 80002cc:	ea40 0003 	orr.w	r0, r0, r3
 80002d0:	4770      	bx	lr
 80002d2:	0049      	lsls	r1, r1, #1
 80002d4:	eb40 0000 	adc.w	r0, r0, r0
 80002d8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80002dc:	f1a2 0201 	sub.w	r2, r2, #1
 80002e0:	d1ed      	bne.n	80002be <__addsf3+0x92>
 80002e2:	fab0 fc80 	clz	ip, r0
 80002e6:	f1ac 0c08 	sub.w	ip, ip, #8
 80002ea:	ebb2 020c 	subs.w	r2, r2, ip
 80002ee:	fa00 f00c 	lsl.w	r0, r0, ip
 80002f2:	bfaa      	itet	ge
 80002f4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80002f8:	4252      	neglt	r2, r2
 80002fa:	4318      	orrge	r0, r3
 80002fc:	bfbc      	itt	lt
 80002fe:	40d0      	lsrlt	r0, r2
 8000300:	4318      	orrlt	r0, r3
 8000302:	4770      	bx	lr
 8000304:	f092 0f00 	teq	r2, #0
 8000308:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800030c:	bf06      	itte	eq
 800030e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000312:	3201      	addeq	r2, #1
 8000314:	3b01      	subne	r3, #1
 8000316:	e7b5      	b.n	8000284 <__addsf3+0x58>
 8000318:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800031c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000320:	bf18      	it	ne
 8000322:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000326:	d021      	beq.n	800036c <__addsf3+0x140>
 8000328:	ea92 0f03 	teq	r2, r3
 800032c:	d004      	beq.n	8000338 <__addsf3+0x10c>
 800032e:	f092 0f00 	teq	r2, #0
 8000332:	bf08      	it	eq
 8000334:	4608      	moveq	r0, r1
 8000336:	4770      	bx	lr
 8000338:	ea90 0f01 	teq	r0, r1
 800033c:	bf1c      	itt	ne
 800033e:	2000      	movne	r0, #0
 8000340:	4770      	bxne	lr
 8000342:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000346:	d104      	bne.n	8000352 <__addsf3+0x126>
 8000348:	0040      	lsls	r0, r0, #1
 800034a:	bf28      	it	cs
 800034c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000350:	4770      	bx	lr
 8000352:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000356:	bf3c      	itt	cc
 8000358:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800035c:	4770      	bxcc	lr
 800035e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000362:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000366:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800036a:	4770      	bx	lr
 800036c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000370:	bf16      	itet	ne
 8000372:	4608      	movne	r0, r1
 8000374:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000378:	4601      	movne	r1, r0
 800037a:	0242      	lsls	r2, r0, #9
 800037c:	bf06      	itte	eq
 800037e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000382:	ea90 0f01 	teqeq	r0, r1
 8000386:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800038a:	4770      	bx	lr

0800038c <__aeabi_ui2f>:
 800038c:	f04f 0300 	mov.w	r3, #0
 8000390:	e004      	b.n	800039c <__aeabi_i2f+0x8>
 8000392:	bf00      	nop

08000394 <__aeabi_i2f>:
 8000394:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000398:	bf48      	it	mi
 800039a:	4240      	negmi	r0, r0
 800039c:	ea5f 0c00 	movs.w	ip, r0
 80003a0:	bf08      	it	eq
 80003a2:	4770      	bxeq	lr
 80003a4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80003a8:	4601      	mov	r1, r0
 80003aa:	f04f 0000 	mov.w	r0, #0
 80003ae:	e01c      	b.n	80003ea <__aeabi_l2f+0x2a>

080003b0 <__aeabi_ul2f>:
 80003b0:	ea50 0201 	orrs.w	r2, r0, r1
 80003b4:	bf08      	it	eq
 80003b6:	4770      	bxeq	lr
 80003b8:	f04f 0300 	mov.w	r3, #0
 80003bc:	e00a      	b.n	80003d4 <__aeabi_l2f+0x14>
 80003be:	bf00      	nop

080003c0 <__aeabi_l2f>:
 80003c0:	ea50 0201 	orrs.w	r2, r0, r1
 80003c4:	bf08      	it	eq
 80003c6:	4770      	bxeq	lr
 80003c8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80003cc:	d502      	bpl.n	80003d4 <__aeabi_l2f+0x14>
 80003ce:	4240      	negs	r0, r0
 80003d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003d4:	ea5f 0c01 	movs.w	ip, r1
 80003d8:	bf02      	ittt	eq
 80003da:	4684      	moveq	ip, r0
 80003dc:	4601      	moveq	r1, r0
 80003de:	2000      	moveq	r0, #0
 80003e0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80003e4:	bf08      	it	eq
 80003e6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80003ea:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80003ee:	fabc f28c 	clz	r2, ip
 80003f2:	3a08      	subs	r2, #8
 80003f4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80003f8:	db10      	blt.n	800041c <__aeabi_l2f+0x5c>
 80003fa:	fa01 fc02 	lsl.w	ip, r1, r2
 80003fe:	4463      	add	r3, ip
 8000400:	fa00 fc02 	lsl.w	ip, r0, r2
 8000404:	f1c2 0220 	rsb	r2, r2, #32
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	fa20 f202 	lsr.w	r2, r0, r2
 8000410:	eb43 0002 	adc.w	r0, r3, r2
 8000414:	bf08      	it	eq
 8000416:	f020 0001 	biceq.w	r0, r0, #1
 800041a:	4770      	bx	lr
 800041c:	f102 0220 	add.w	r2, r2, #32
 8000420:	fa01 fc02 	lsl.w	ip, r1, r2
 8000424:	f1c2 0220 	rsb	r2, r2, #32
 8000428:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800042c:	fa21 f202 	lsr.w	r2, r1, r2
 8000430:	eb43 0002 	adc.w	r0, r3, r2
 8000434:	bf08      	it	eq
 8000436:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043a:	4770      	bx	lr

0800043c <__aeabi_fmul>:
 800043c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000440:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000444:	bf1e      	ittt	ne
 8000446:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800044a:	ea92 0f0c 	teqne	r2, ip
 800044e:	ea93 0f0c 	teqne	r3, ip
 8000452:	d06f      	beq.n	8000534 <__aeabi_fmul+0xf8>
 8000454:	441a      	add	r2, r3
 8000456:	ea80 0c01 	eor.w	ip, r0, r1
 800045a:	0240      	lsls	r0, r0, #9
 800045c:	bf18      	it	ne
 800045e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000462:	d01e      	beq.n	80004a2 <__aeabi_fmul+0x66>
 8000464:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000468:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800046c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000470:	fba0 3101 	umull	r3, r1, r0, r1
 8000474:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000478:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800047c:	bf3e      	ittt	cc
 800047e:	0049      	lslcc	r1, r1, #1
 8000480:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000484:	005b      	lslcc	r3, r3, #1
 8000486:	ea40 0001 	orr.w	r0, r0, r1
 800048a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800048e:	2afd      	cmp	r2, #253	; 0xfd
 8000490:	d81d      	bhi.n	80004ce <__aeabi_fmul+0x92>
 8000492:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000496:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800049a:	bf08      	it	eq
 800049c:	f020 0001 	biceq.w	r0, r0, #1
 80004a0:	4770      	bx	lr
 80004a2:	f090 0f00 	teq	r0, #0
 80004a6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80004aa:	bf08      	it	eq
 80004ac:	0249      	lsleq	r1, r1, #9
 80004ae:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80004b2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80004b6:	3a7f      	subs	r2, #127	; 0x7f
 80004b8:	bfc2      	ittt	gt
 80004ba:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80004be:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80004c2:	4770      	bxgt	lr
 80004c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c8:	f04f 0300 	mov.w	r3, #0
 80004cc:	3a01      	subs	r2, #1
 80004ce:	dc5d      	bgt.n	800058c <__aeabi_fmul+0x150>
 80004d0:	f112 0f19 	cmn.w	r2, #25
 80004d4:	bfdc      	itt	le
 80004d6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80004da:	4770      	bxle	lr
 80004dc:	f1c2 0200 	rsb	r2, r2, #0
 80004e0:	0041      	lsls	r1, r0, #1
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	f1c2 0220 	rsb	r2, r2, #32
 80004ea:	fa00 fc02 	lsl.w	ip, r0, r2
 80004ee:	ea5f 0031 	movs.w	r0, r1, rrx
 80004f2:	f140 0000 	adc.w	r0, r0, #0
 80004f6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80004fa:	bf08      	it	eq
 80004fc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000500:	4770      	bx	lr
 8000502:	f092 0f00 	teq	r2, #0
 8000506:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800050a:	bf02      	ittt	eq
 800050c:	0040      	lsleq	r0, r0, #1
 800050e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000512:	3a01      	subeq	r2, #1
 8000514:	d0f9      	beq.n	800050a <__aeabi_fmul+0xce>
 8000516:	ea40 000c 	orr.w	r0, r0, ip
 800051a:	f093 0f00 	teq	r3, #0
 800051e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000522:	bf02      	ittt	eq
 8000524:	0049      	lsleq	r1, r1, #1
 8000526:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800052a:	3b01      	subeq	r3, #1
 800052c:	d0f9      	beq.n	8000522 <__aeabi_fmul+0xe6>
 800052e:	ea41 010c 	orr.w	r1, r1, ip
 8000532:	e78f      	b.n	8000454 <__aeabi_fmul+0x18>
 8000534:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000538:	ea92 0f0c 	teq	r2, ip
 800053c:	bf18      	it	ne
 800053e:	ea93 0f0c 	teqne	r3, ip
 8000542:	d00a      	beq.n	800055a <__aeabi_fmul+0x11e>
 8000544:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000548:	bf18      	it	ne
 800054a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800054e:	d1d8      	bne.n	8000502 <__aeabi_fmul+0xc6>
 8000550:	ea80 0001 	eor.w	r0, r0, r1
 8000554:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000558:	4770      	bx	lr
 800055a:	f090 0f00 	teq	r0, #0
 800055e:	bf17      	itett	ne
 8000560:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000564:	4608      	moveq	r0, r1
 8000566:	f091 0f00 	teqne	r1, #0
 800056a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800056e:	d014      	beq.n	800059a <__aeabi_fmul+0x15e>
 8000570:	ea92 0f0c 	teq	r2, ip
 8000574:	d101      	bne.n	800057a <__aeabi_fmul+0x13e>
 8000576:	0242      	lsls	r2, r0, #9
 8000578:	d10f      	bne.n	800059a <__aeabi_fmul+0x15e>
 800057a:	ea93 0f0c 	teq	r3, ip
 800057e:	d103      	bne.n	8000588 <__aeabi_fmul+0x14c>
 8000580:	024b      	lsls	r3, r1, #9
 8000582:	bf18      	it	ne
 8000584:	4608      	movne	r0, r1
 8000586:	d108      	bne.n	800059a <__aeabi_fmul+0x15e>
 8000588:	ea80 0001 	eor.w	r0, r0, r1
 800058c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000590:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000594:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000598:	4770      	bx	lr
 800059a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800059e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80005a2:	4770      	bx	lr

080005a4 <__aeabi_fdiv>:
 80005a4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80005ac:	bf1e      	ittt	ne
 80005ae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80005b2:	ea92 0f0c 	teqne	r2, ip
 80005b6:	ea93 0f0c 	teqne	r3, ip
 80005ba:	d069      	beq.n	8000690 <__aeabi_fdiv+0xec>
 80005bc:	eba2 0203 	sub.w	r2, r2, r3
 80005c0:	ea80 0c01 	eor.w	ip, r0, r1
 80005c4:	0249      	lsls	r1, r1, #9
 80005c6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80005ca:	d037      	beq.n	800063c <__aeabi_fdiv+0x98>
 80005cc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80005d0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80005d4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80005d8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80005dc:	428b      	cmp	r3, r1
 80005de:	bf38      	it	cc
 80005e0:	005b      	lslcc	r3, r3, #1
 80005e2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80005e6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80005ea:	428b      	cmp	r3, r1
 80005ec:	bf24      	itt	cs
 80005ee:	1a5b      	subcs	r3, r3, r1
 80005f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80005f4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80005f8:	bf24      	itt	cs
 80005fa:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80005fe:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000602:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000606:	bf24      	itt	cs
 8000608:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800060c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000610:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000614:	bf24      	itt	cs
 8000616:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800061a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800061e:	011b      	lsls	r3, r3, #4
 8000620:	bf18      	it	ne
 8000622:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000626:	d1e0      	bne.n	80005ea <__aeabi_fdiv+0x46>
 8000628:	2afd      	cmp	r2, #253	; 0xfd
 800062a:	f63f af50 	bhi.w	80004ce <__aeabi_fmul+0x92>
 800062e:	428b      	cmp	r3, r1
 8000630:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000634:	bf08      	it	eq
 8000636:	f020 0001 	biceq.w	r0, r0, #1
 800063a:	4770      	bx	lr
 800063c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000640:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000644:	327f      	adds	r2, #127	; 0x7f
 8000646:	bfc2      	ittt	gt
 8000648:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800064c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000650:	4770      	bxgt	lr
 8000652:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000656:	f04f 0300 	mov.w	r3, #0
 800065a:	3a01      	subs	r2, #1
 800065c:	e737      	b.n	80004ce <__aeabi_fmul+0x92>
 800065e:	f092 0f00 	teq	r2, #0
 8000662:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000666:	bf02      	ittt	eq
 8000668:	0040      	lsleq	r0, r0, #1
 800066a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800066e:	3a01      	subeq	r2, #1
 8000670:	d0f9      	beq.n	8000666 <__aeabi_fdiv+0xc2>
 8000672:	ea40 000c 	orr.w	r0, r0, ip
 8000676:	f093 0f00 	teq	r3, #0
 800067a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800067e:	bf02      	ittt	eq
 8000680:	0049      	lsleq	r1, r1, #1
 8000682:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000686:	3b01      	subeq	r3, #1
 8000688:	d0f9      	beq.n	800067e <__aeabi_fdiv+0xda>
 800068a:	ea41 010c 	orr.w	r1, r1, ip
 800068e:	e795      	b.n	80005bc <__aeabi_fdiv+0x18>
 8000690:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000694:	ea92 0f0c 	teq	r2, ip
 8000698:	d108      	bne.n	80006ac <__aeabi_fdiv+0x108>
 800069a:	0242      	lsls	r2, r0, #9
 800069c:	f47f af7d 	bne.w	800059a <__aeabi_fmul+0x15e>
 80006a0:	ea93 0f0c 	teq	r3, ip
 80006a4:	f47f af70 	bne.w	8000588 <__aeabi_fmul+0x14c>
 80006a8:	4608      	mov	r0, r1
 80006aa:	e776      	b.n	800059a <__aeabi_fmul+0x15e>
 80006ac:	ea93 0f0c 	teq	r3, ip
 80006b0:	d104      	bne.n	80006bc <__aeabi_fdiv+0x118>
 80006b2:	024b      	lsls	r3, r1, #9
 80006b4:	f43f af4c 	beq.w	8000550 <__aeabi_fmul+0x114>
 80006b8:	4608      	mov	r0, r1
 80006ba:	e76e      	b.n	800059a <__aeabi_fmul+0x15e>
 80006bc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80006c0:	bf18      	it	ne
 80006c2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80006c6:	d1ca      	bne.n	800065e <__aeabi_fdiv+0xba>
 80006c8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80006cc:	f47f af5c 	bne.w	8000588 <__aeabi_fmul+0x14c>
 80006d0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80006d4:	f47f af3c 	bne.w	8000550 <__aeabi_fmul+0x114>
 80006d8:	e75f      	b.n	800059a <__aeabi_fmul+0x15e>
 80006da:	bf00      	nop

080006dc <__aeabi_f2iz>:
 80006dc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006e0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80006e4:	d30f      	bcc.n	8000706 <__aeabi_f2iz+0x2a>
 80006e6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80006ea:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80006ee:	d90d      	bls.n	800070c <__aeabi_f2iz+0x30>
 80006f0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80006f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80006f8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80006fc:	fa23 f002 	lsr.w	r0, r3, r2
 8000700:	bf18      	it	ne
 8000702:	4240      	negne	r0, r0
 8000704:	4770      	bx	lr
 8000706:	f04f 0000 	mov.w	r0, #0
 800070a:	4770      	bx	lr
 800070c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000710:	d101      	bne.n	8000716 <__aeabi_f2iz+0x3a>
 8000712:	0242      	lsls	r2, r0, #9
 8000714:	d105      	bne.n	8000722 <__aeabi_f2iz+0x46>
 8000716:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800071a:	bf08      	it	eq
 800071c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000720:	4770      	bx	lr
 8000722:	f04f 0000 	mov.w	r0, #0
 8000726:	4770      	bx	lr

08000728 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000728:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800072a:	4b0e      	ldr	r3, [pc, #56]	; (8000764 <HAL_InitTick+0x3c>)
{
 800072c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800072e:	7818      	ldrb	r0, [r3, #0]
 8000730:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000734:	fbb3 f3f0 	udiv	r3, r3, r0
 8000738:	4a0b      	ldr	r2, [pc, #44]	; (8000768 <HAL_InitTick+0x40>)
 800073a:	6810      	ldr	r0, [r2, #0]
 800073c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000740:	f000 f89a 	bl	8000878 <HAL_SYSTICK_Config>
 8000744:	4604      	mov	r4, r0
 8000746:	b958      	cbnz	r0, 8000760 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000748:	2d0f      	cmp	r5, #15
 800074a:	d809      	bhi.n	8000760 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800074c:	4602      	mov	r2, r0
 800074e:	4629      	mov	r1, r5
 8000750:	f04f 30ff 	mov.w	r0, #4294967295
 8000754:	f000 f84e 	bl	80007f4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000758:	4b04      	ldr	r3, [pc, #16]	; (800076c <HAL_InitTick+0x44>)
 800075a:	4620      	mov	r0, r4
 800075c:	601d      	str	r5, [r3, #0]
 800075e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000760:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000762:	bd38      	pop	{r3, r4, r5, pc}
 8000764:	20000000 	.word	0x20000000
 8000768:	2000001c 	.word	0x2000001c
 800076c:	20000004 	.word	0x20000004

08000770 <HAL_Init>:
{
 8000770:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000772:	2003      	movs	r0, #3
 8000774:	f000 f82c 	bl	80007d0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000778:	2000      	movs	r0, #0
 800077a:	f7ff ffd5 	bl	8000728 <HAL_InitTick>
  HAL_MspInit();
 800077e:	f001 fa49 	bl	8001c14 <HAL_MspInit>
}
 8000782:	2000      	movs	r0, #0
 8000784:	bd08      	pop	{r3, pc}
	...

08000788 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000788:	4a03      	ldr	r2, [pc, #12]	; (8000798 <HAL_IncTick+0x10>)
 800078a:	4b04      	ldr	r3, [pc, #16]	; (800079c <HAL_IncTick+0x14>)
 800078c:	6811      	ldr	r1, [r2, #0]
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	440b      	add	r3, r1
 8000792:	6013      	str	r3, [r2, #0]
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	200000b0 	.word	0x200000b0
 800079c:	20000000 	.word	0x20000000

080007a0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80007a0:	4b01      	ldr	r3, [pc, #4]	; (80007a8 <HAL_GetTick+0x8>)
 80007a2:	6818      	ldr	r0, [r3, #0]
}
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	200000b0 	.word	0x200000b0

080007ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007ac:	b538      	push	{r3, r4, r5, lr}
 80007ae:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80007b0:	f7ff fff6 	bl	80007a0 <HAL_GetTick>
 80007b4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007b6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80007b8:	bf1e      	ittt	ne
 80007ba:	4b04      	ldrne	r3, [pc, #16]	; (80007cc <HAL_Delay+0x20>)
 80007bc:	781b      	ldrbne	r3, [r3, #0]
 80007be:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007c0:	f7ff ffee 	bl	80007a0 <HAL_GetTick>
 80007c4:	1b40      	subs	r0, r0, r5
 80007c6:	4284      	cmp	r4, r0
 80007c8:	d8fa      	bhi.n	80007c0 <HAL_Delay+0x14>
  {
  }
}
 80007ca:	bd38      	pop	{r3, r4, r5, pc}
 80007cc:	20000000 	.word	0x20000000

080007d0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007d0:	4a07      	ldr	r2, [pc, #28]	; (80007f0 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007d2:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007d4:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007d6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007da:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80007de:	041b      	lsls	r3, r3, #16
 80007e0:	0c1b      	lsrs	r3, r3, #16
 80007e2:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80007ea:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80007ec:	60d3      	str	r3, [r2, #12]
 80007ee:	4770      	bx	lr
 80007f0:	e000ed00 	.word	0xe000ed00

080007f4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007f4:	4b17      	ldr	r3, [pc, #92]	; (8000854 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007f6:	b530      	push	{r4, r5, lr}
 80007f8:	68dc      	ldr	r4, [r3, #12]
 80007fa:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007fe:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000802:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000804:	2b04      	cmp	r3, #4
 8000806:	bf28      	it	cs
 8000808:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800080a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800080c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000810:	bf98      	it	ls
 8000812:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000814:	fa05 f303 	lsl.w	r3, r5, r3
 8000818:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800081c:	bf88      	it	hi
 800081e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000820:	4019      	ands	r1, r3
 8000822:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000824:	fa05 f404 	lsl.w	r4, r5, r4
 8000828:	3c01      	subs	r4, #1
 800082a:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 800082c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800082e:	ea42 0201 	orr.w	r2, r2, r1
 8000832:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000836:	bfa9      	itett	ge
 8000838:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800083c:	4b06      	ldrlt	r3, [pc, #24]	; (8000858 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800083e:	b2d2      	uxtbge	r2, r2
 8000840:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000844:	bfbb      	ittet	lt
 8000846:	f000 000f 	andlt.w	r0, r0, #15
 800084a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800084c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000850:	541a      	strblt	r2, [r3, r0]
 8000852:	bd30      	pop	{r4, r5, pc}
 8000854:	e000ed00 	.word	0xe000ed00
 8000858:	e000ed14 	.word	0xe000ed14

0800085c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800085c:	2800      	cmp	r0, #0
 800085e:	db08      	blt.n	8000872 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000860:	2301      	movs	r3, #1
 8000862:	0942      	lsrs	r2, r0, #5
 8000864:	f000 001f 	and.w	r0, r0, #31
 8000868:	fa03 f000 	lsl.w	r0, r3, r0
 800086c:	4b01      	ldr	r3, [pc, #4]	; (8000874 <HAL_NVIC_EnableIRQ+0x18>)
 800086e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000872:	4770      	bx	lr
 8000874:	e000e100 	.word	0xe000e100

08000878 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000878:	3801      	subs	r0, #1
 800087a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800087e:	d20a      	bcs.n	8000896 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000880:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000882:	4b06      	ldr	r3, [pc, #24]	; (800089c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000884:	4a06      	ldr	r2, [pc, #24]	; (80008a0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000886:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000888:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800088c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800088e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000890:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000896:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	e000e010 	.word	0xe000e010
 80008a0:	e000ed00 	.word	0xe000ed00

080008a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80008a8:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 80008aa:	4626      	mov	r6, r4
 80008ac:	4b66      	ldr	r3, [pc, #408]	; (8000a48 <HAL_GPIO_Init+0x1a4>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80008ae:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 8000a58 <HAL_GPIO_Init+0x1b4>
 80008b2:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 8000a5c <HAL_GPIO_Init+0x1b8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008b6:	680a      	ldr	r2, [r1, #0]
 80008b8:	fa32 f506 	lsrs.w	r5, r2, r6
 80008bc:	d102      	bne.n	80008c4 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 80008be:	b003      	add	sp, #12
 80008c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 80008c4:	f04f 0801 	mov.w	r8, #1
 80008c8:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008cc:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 80008d0:	4590      	cmp	r8, r2
 80008d2:	d17f      	bne.n	80009d4 <HAL_GPIO_Init+0x130>
      switch (GPIO_Init->Mode)
 80008d4:	684d      	ldr	r5, [r1, #4]
 80008d6:	2d12      	cmp	r5, #18
 80008d8:	f000 80aa 	beq.w	8000a30 <HAL_GPIO_Init+0x18c>
 80008dc:	f200 8083 	bhi.w	80009e6 <HAL_GPIO_Init+0x142>
 80008e0:	2d02      	cmp	r5, #2
 80008e2:	f000 80a2 	beq.w	8000a2a <HAL_GPIO_Init+0x186>
 80008e6:	d877      	bhi.n	80009d8 <HAL_GPIO_Init+0x134>
 80008e8:	2d00      	cmp	r5, #0
 80008ea:	f000 8089 	beq.w	8000a00 <HAL_GPIO_Init+0x15c>
 80008ee:	2d01      	cmp	r5, #1
 80008f0:	f000 8099 	beq.w	8000a26 <HAL_GPIO_Init+0x182>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80008f4:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80008f8:	2aff      	cmp	r2, #255	; 0xff
 80008fa:	bf93      	iteet	ls
 80008fc:	4682      	movls	sl, r0
 80008fe:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000902:	3d08      	subhi	r5, #8
 8000904:	f8d0 b000 	ldrls.w	fp, [r0]
 8000908:	bf92      	itee	ls
 800090a:	00b5      	lslls	r5, r6, #2
 800090c:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000910:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000912:	fa09 f805 	lsl.w	r8, r9, r5
 8000916:	ea2b 0808 	bic.w	r8, fp, r8
 800091a:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800091e:	bf88      	it	hi
 8000920:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000924:	ea48 0505 	orr.w	r5, r8, r5
 8000928:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800092c:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000930:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000934:	d04e      	beq.n	80009d4 <HAL_GPIO_Init+0x130>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000936:	4d45      	ldr	r5, [pc, #276]	; (8000a4c <HAL_GPIO_Init+0x1a8>)
 8000938:	4f44      	ldr	r7, [pc, #272]	; (8000a4c <HAL_GPIO_Init+0x1a8>)
 800093a:	69ad      	ldr	r5, [r5, #24]
 800093c:	f026 0803 	bic.w	r8, r6, #3
 8000940:	f045 0501 	orr.w	r5, r5, #1
 8000944:	61bd      	str	r5, [r7, #24]
 8000946:	69bd      	ldr	r5, [r7, #24]
 8000948:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 800094c:	f005 0501 	and.w	r5, r5, #1
 8000950:	9501      	str	r5, [sp, #4]
 8000952:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000956:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800095a:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800095c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8000960:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000964:	fa09 f90b 	lsl.w	r9, r9, fp
 8000968:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800096c:	4d38      	ldr	r5, [pc, #224]	; (8000a50 <HAL_GPIO_Init+0x1ac>)
 800096e:	42a8      	cmp	r0, r5
 8000970:	d063      	beq.n	8000a3a <HAL_GPIO_Init+0x196>
 8000972:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000976:	42a8      	cmp	r0, r5
 8000978:	d061      	beq.n	8000a3e <HAL_GPIO_Init+0x19a>
 800097a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800097e:	42a8      	cmp	r0, r5
 8000980:	d05f      	beq.n	8000a42 <HAL_GPIO_Init+0x19e>
 8000982:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000986:	42a8      	cmp	r0, r5
 8000988:	bf0c      	ite	eq
 800098a:	2503      	moveq	r5, #3
 800098c:	2504      	movne	r5, #4
 800098e:	fa05 f50b 	lsl.w	r5, r5, fp
 8000992:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8000996:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 800099a:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800099c:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80009a0:	bf14      	ite	ne
 80009a2:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80009a4:	4395      	biceq	r5, r2
 80009a6:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80009a8:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009aa:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80009ae:	bf14      	ite	ne
 80009b0:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80009b2:	4395      	biceq	r5, r2
 80009b4:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 80009b6:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80009b8:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80009bc:	bf14      	ite	ne
 80009be:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80009c0:	4395      	biceq	r5, r2
 80009c2:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 80009c4:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80009c6:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80009ca:	bf14      	ite	ne
 80009cc:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80009ce:	ea25 0202 	biceq.w	r2, r5, r2
 80009d2:	60da      	str	r2, [r3, #12]
	position++;
 80009d4:	3601      	adds	r6, #1
 80009d6:	e76e      	b.n	80008b6 <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 80009d8:	2d03      	cmp	r5, #3
 80009da:	d022      	beq.n	8000a22 <HAL_GPIO_Init+0x17e>
 80009dc:	2d11      	cmp	r5, #17
 80009de:	d189      	bne.n	80008f4 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80009e0:	68cc      	ldr	r4, [r1, #12]
 80009e2:	3404      	adds	r4, #4
          break;
 80009e4:	e786      	b.n	80008f4 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 80009e6:	4f1b      	ldr	r7, [pc, #108]	; (8000a54 <HAL_GPIO_Init+0x1b0>)
 80009e8:	42bd      	cmp	r5, r7
 80009ea:	d009      	beq.n	8000a00 <HAL_GPIO_Init+0x15c>
 80009ec:	d812      	bhi.n	8000a14 <HAL_GPIO_Init+0x170>
 80009ee:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8000a60 <HAL_GPIO_Init+0x1bc>
 80009f2:	454d      	cmp	r5, r9
 80009f4:	d004      	beq.n	8000a00 <HAL_GPIO_Init+0x15c>
 80009f6:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80009fa:	454d      	cmp	r5, r9
 80009fc:	f47f af7a 	bne.w	80008f4 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a00:	688c      	ldr	r4, [r1, #8]
 8000a02:	b1c4      	cbz	r4, 8000a36 <HAL_GPIO_Init+0x192>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a04:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 8000a06:	bf0c      	ite	eq
 8000a08:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000a0c:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a10:	2408      	movs	r4, #8
 8000a12:	e76f      	b.n	80008f4 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8000a14:	4575      	cmp	r5, lr
 8000a16:	d0f3      	beq.n	8000a00 <HAL_GPIO_Init+0x15c>
 8000a18:	4565      	cmp	r5, ip
 8000a1a:	d0f1      	beq.n	8000a00 <HAL_GPIO_Init+0x15c>
 8000a1c:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000a64 <HAL_GPIO_Init+0x1c0>
 8000a20:	e7eb      	b.n	80009fa <HAL_GPIO_Init+0x156>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a22:	2400      	movs	r4, #0
 8000a24:	e766      	b.n	80008f4 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a26:	68cc      	ldr	r4, [r1, #12]
          break;
 8000a28:	e764      	b.n	80008f4 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a2a:	68cc      	ldr	r4, [r1, #12]
 8000a2c:	3408      	adds	r4, #8
          break;
 8000a2e:	e761      	b.n	80008f4 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a30:	68cc      	ldr	r4, [r1, #12]
 8000a32:	340c      	adds	r4, #12
          break;
 8000a34:	e75e      	b.n	80008f4 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a36:	2404      	movs	r4, #4
 8000a38:	e75c      	b.n	80008f4 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a3a:	2500      	movs	r5, #0
 8000a3c:	e7a7      	b.n	800098e <HAL_GPIO_Init+0xea>
 8000a3e:	2501      	movs	r5, #1
 8000a40:	e7a5      	b.n	800098e <HAL_GPIO_Init+0xea>
 8000a42:	2502      	movs	r5, #2
 8000a44:	e7a3      	b.n	800098e <HAL_GPIO_Init+0xea>
 8000a46:	bf00      	nop
 8000a48:	40010400 	.word	0x40010400
 8000a4c:	40021000 	.word	0x40021000
 8000a50:	40010800 	.word	0x40010800
 8000a54:	10210000 	.word	0x10210000
 8000a58:	10310000 	.word	0x10310000
 8000a5c:	10320000 	.word	0x10320000
 8000a60:	10110000 	.word	0x10110000
 8000a64:	10220000 	.word	0x10220000

08000a68 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000a68:	6883      	ldr	r3, [r0, #8]
 8000a6a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000a6c:	bf14      	ite	ne
 8000a6e:	2001      	movne	r0, #1
 8000a70:	2000      	moveq	r0, #0
 8000a72:	4770      	bx	lr

08000a74 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000a74:	b10a      	cbz	r2, 8000a7a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a76:	6101      	str	r1, [r0, #16]
 8000a78:	4770      	bx	lr
 8000a7a:	0409      	lsls	r1, r1, #16
 8000a7c:	e7fb      	b.n	8000a76 <HAL_GPIO_WritePin+0x2>

08000a7e <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8000a7e:	68c3      	ldr	r3, [r0, #12]
 8000a80:	420b      	tst	r3, r1
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000a82:	bf14      	ite	ne
 8000a84:	6141      	strne	r1, [r0, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000a86:	6101      	streq	r1, [r0, #16]
 8000a88:	4770      	bx	lr

08000a8a <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a8a:	4770      	bx	lr

08000a8c <HAL_GPIO_EXTI_IRQHandler>:
{
 8000a8c:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000a8e:	4b04      	ldr	r3, [pc, #16]	; (8000aa0 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000a90:	6959      	ldr	r1, [r3, #20]
 8000a92:	4201      	tst	r1, r0
 8000a94:	d002      	beq.n	8000a9c <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000a96:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000a98:	f7ff fff7 	bl	8000a8a <HAL_GPIO_EXTI_Callback>
 8000a9c:	bd08      	pop	{r3, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40010400 	.word	0x40010400

08000aa4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000aa4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000aa8:	4605      	mov	r5, r0
 8000aaa:	b908      	cbnz	r0, 8000ab0 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8000aac:	2001      	movs	r0, #1
 8000aae:	e03c      	b.n	8000b2a <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ab0:	6803      	ldr	r3, [r0, #0]
 8000ab2:	07db      	lsls	r3, r3, #31
 8000ab4:	d410      	bmi.n	8000ad8 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ab6:	682b      	ldr	r3, [r5, #0]
 8000ab8:	079f      	lsls	r7, r3, #30
 8000aba:	d45d      	bmi.n	8000b78 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000abc:	682b      	ldr	r3, [r5, #0]
 8000abe:	0719      	lsls	r1, r3, #28
 8000ac0:	f100 8094 	bmi.w	8000bec <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ac4:	682b      	ldr	r3, [r5, #0]
 8000ac6:	075a      	lsls	r2, r3, #29
 8000ac8:	f100 80be 	bmi.w	8000c48 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000acc:	69e8      	ldr	r0, [r5, #28]
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	f040 812c 	bne.w	8000d2c <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 8000ad4:	2000      	movs	r0, #0
 8000ad6:	e028      	b.n	8000b2a <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ad8:	4c8f      	ldr	r4, [pc, #572]	; (8000d18 <HAL_RCC_OscConfig+0x274>)
 8000ada:	6863      	ldr	r3, [r4, #4]
 8000adc:	f003 030c 	and.w	r3, r3, #12
 8000ae0:	2b04      	cmp	r3, #4
 8000ae2:	d007      	beq.n	8000af4 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ae4:	6863      	ldr	r3, [r4, #4]
 8000ae6:	f003 030c 	and.w	r3, r3, #12
 8000aea:	2b08      	cmp	r3, #8
 8000aec:	d109      	bne.n	8000b02 <HAL_RCC_OscConfig+0x5e>
 8000aee:	6863      	ldr	r3, [r4, #4]
 8000af0:	03de      	lsls	r6, r3, #15
 8000af2:	d506      	bpl.n	8000b02 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000af4:	6823      	ldr	r3, [r4, #0]
 8000af6:	039c      	lsls	r4, r3, #14
 8000af8:	d5dd      	bpl.n	8000ab6 <HAL_RCC_OscConfig+0x12>
 8000afa:	686b      	ldr	r3, [r5, #4]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d1da      	bne.n	8000ab6 <HAL_RCC_OscConfig+0x12>
 8000b00:	e7d4      	b.n	8000aac <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b02:	686b      	ldr	r3, [r5, #4]
 8000b04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b08:	d112      	bne.n	8000b30 <HAL_RCC_OscConfig+0x8c>
 8000b0a:	6823      	ldr	r3, [r4, #0]
 8000b0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b10:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000b12:	f7ff fe45 	bl	80007a0 <HAL_GetTick>
 8000b16:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b18:	6823      	ldr	r3, [r4, #0]
 8000b1a:	0398      	lsls	r0, r3, #14
 8000b1c:	d4cb      	bmi.n	8000ab6 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b1e:	f7ff fe3f 	bl	80007a0 <HAL_GetTick>
 8000b22:	1b80      	subs	r0, r0, r6
 8000b24:	2864      	cmp	r0, #100	; 0x64
 8000b26:	d9f7      	bls.n	8000b18 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000b28:	2003      	movs	r0, #3
}
 8000b2a:	b002      	add	sp, #8
 8000b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b30:	b99b      	cbnz	r3, 8000b5a <HAL_RCC_OscConfig+0xb6>
 8000b32:	6823      	ldr	r3, [r4, #0]
 8000b34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b38:	6023      	str	r3, [r4, #0]
 8000b3a:	6823      	ldr	r3, [r4, #0]
 8000b3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b40:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000b42:	f7ff fe2d 	bl	80007a0 <HAL_GetTick>
 8000b46:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b48:	6823      	ldr	r3, [r4, #0]
 8000b4a:	0399      	lsls	r1, r3, #14
 8000b4c:	d5b3      	bpl.n	8000ab6 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b4e:	f7ff fe27 	bl	80007a0 <HAL_GetTick>
 8000b52:	1b80      	subs	r0, r0, r6
 8000b54:	2864      	cmp	r0, #100	; 0x64
 8000b56:	d9f7      	bls.n	8000b48 <HAL_RCC_OscConfig+0xa4>
 8000b58:	e7e6      	b.n	8000b28 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b5a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b5e:	6823      	ldr	r3, [r4, #0]
 8000b60:	d103      	bne.n	8000b6a <HAL_RCC_OscConfig+0xc6>
 8000b62:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b66:	6023      	str	r3, [r4, #0]
 8000b68:	e7cf      	b.n	8000b0a <HAL_RCC_OscConfig+0x66>
 8000b6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b6e:	6023      	str	r3, [r4, #0]
 8000b70:	6823      	ldr	r3, [r4, #0]
 8000b72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b76:	e7cb      	b.n	8000b10 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000b78:	4c67      	ldr	r4, [pc, #412]	; (8000d18 <HAL_RCC_OscConfig+0x274>)
 8000b7a:	6863      	ldr	r3, [r4, #4]
 8000b7c:	f013 0f0c 	tst.w	r3, #12
 8000b80:	d007      	beq.n	8000b92 <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000b82:	6863      	ldr	r3, [r4, #4]
 8000b84:	f003 030c 	and.w	r3, r3, #12
 8000b88:	2b08      	cmp	r3, #8
 8000b8a:	d110      	bne.n	8000bae <HAL_RCC_OscConfig+0x10a>
 8000b8c:	6863      	ldr	r3, [r4, #4]
 8000b8e:	03da      	lsls	r2, r3, #15
 8000b90:	d40d      	bmi.n	8000bae <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b92:	6823      	ldr	r3, [r4, #0]
 8000b94:	079b      	lsls	r3, r3, #30
 8000b96:	d502      	bpl.n	8000b9e <HAL_RCC_OscConfig+0xfa>
 8000b98:	692b      	ldr	r3, [r5, #16]
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	d186      	bne.n	8000aac <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b9e:	6823      	ldr	r3, [r4, #0]
 8000ba0:	696a      	ldr	r2, [r5, #20]
 8000ba2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000ba6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000baa:	6023      	str	r3, [r4, #0]
 8000bac:	e786      	b.n	8000abc <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000bae:	692a      	ldr	r2, [r5, #16]
 8000bb0:	4b5a      	ldr	r3, [pc, #360]	; (8000d1c <HAL_RCC_OscConfig+0x278>)
 8000bb2:	b16a      	cbz	r2, 8000bd0 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000bb8:	f7ff fdf2 	bl	80007a0 <HAL_GetTick>
 8000bbc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bbe:	6823      	ldr	r3, [r4, #0]
 8000bc0:	079f      	lsls	r7, r3, #30
 8000bc2:	d4ec      	bmi.n	8000b9e <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000bc4:	f7ff fdec 	bl	80007a0 <HAL_GetTick>
 8000bc8:	1b80      	subs	r0, r0, r6
 8000bca:	2802      	cmp	r0, #2
 8000bcc:	d9f7      	bls.n	8000bbe <HAL_RCC_OscConfig+0x11a>
 8000bce:	e7ab      	b.n	8000b28 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000bd0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000bd2:	f7ff fde5 	bl	80007a0 <HAL_GetTick>
 8000bd6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000bd8:	6823      	ldr	r3, [r4, #0]
 8000bda:	0798      	lsls	r0, r3, #30
 8000bdc:	f57f af6e 	bpl.w	8000abc <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000be0:	f7ff fdde 	bl	80007a0 <HAL_GetTick>
 8000be4:	1b80      	subs	r0, r0, r6
 8000be6:	2802      	cmp	r0, #2
 8000be8:	d9f6      	bls.n	8000bd8 <HAL_RCC_OscConfig+0x134>
 8000bea:	e79d      	b.n	8000b28 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000bec:	69aa      	ldr	r2, [r5, #24]
 8000bee:	4c4a      	ldr	r4, [pc, #296]	; (8000d18 <HAL_RCC_OscConfig+0x274>)
 8000bf0:	4b4b      	ldr	r3, [pc, #300]	; (8000d20 <HAL_RCC_OscConfig+0x27c>)
 8000bf2:	b1da      	cbz	r2, 8000c2c <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000bf8:	f7ff fdd2 	bl	80007a0 <HAL_GetTick>
 8000bfc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000bfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000c00:	079b      	lsls	r3, r3, #30
 8000c02:	d50d      	bpl.n	8000c20 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000c04:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000c08:	4b46      	ldr	r3, [pc, #280]	; (8000d24 <HAL_RCC_OscConfig+0x280>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8000c10:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8000c12:	bf00      	nop
  }
  while (Delay --);
 8000c14:	9b01      	ldr	r3, [sp, #4]
 8000c16:	1e5a      	subs	r2, r3, #1
 8000c18:	9201      	str	r2, [sp, #4]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d1f9      	bne.n	8000c12 <HAL_RCC_OscConfig+0x16e>
 8000c1e:	e751      	b.n	8000ac4 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c20:	f7ff fdbe 	bl	80007a0 <HAL_GetTick>
 8000c24:	1b80      	subs	r0, r0, r6
 8000c26:	2802      	cmp	r0, #2
 8000c28:	d9e9      	bls.n	8000bfe <HAL_RCC_OscConfig+0x15a>
 8000c2a:	e77d      	b.n	8000b28 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000c2c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000c2e:	f7ff fdb7 	bl	80007a0 <HAL_GetTick>
 8000c32:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000c36:	079f      	lsls	r7, r3, #30
 8000c38:	f57f af44 	bpl.w	8000ac4 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c3c:	f7ff fdb0 	bl	80007a0 <HAL_GetTick>
 8000c40:	1b80      	subs	r0, r0, r6
 8000c42:	2802      	cmp	r0, #2
 8000c44:	d9f6      	bls.n	8000c34 <HAL_RCC_OscConfig+0x190>
 8000c46:	e76f      	b.n	8000b28 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c48:	4c33      	ldr	r4, [pc, #204]	; (8000d18 <HAL_RCC_OscConfig+0x274>)
 8000c4a:	69e3      	ldr	r3, [r4, #28]
 8000c4c:	00d8      	lsls	r0, r3, #3
 8000c4e:	d424      	bmi.n	8000c9a <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8000c50:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c52:	69e3      	ldr	r3, [r4, #28]
 8000c54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c58:	61e3      	str	r3, [r4, #28]
 8000c5a:	69e3      	ldr	r3, [r4, #28]
 8000c5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c60:	9300      	str	r3, [sp, #0]
 8000c62:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c64:	4e30      	ldr	r6, [pc, #192]	; (8000d28 <HAL_RCC_OscConfig+0x284>)
 8000c66:	6833      	ldr	r3, [r6, #0]
 8000c68:	05d9      	lsls	r1, r3, #23
 8000c6a:	d518      	bpl.n	8000c9e <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c6c:	68eb      	ldr	r3, [r5, #12]
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d126      	bne.n	8000cc0 <HAL_RCC_OscConfig+0x21c>
 8000c72:	6a23      	ldr	r3, [r4, #32]
 8000c74:	f043 0301 	orr.w	r3, r3, #1
 8000c78:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000c7a:	f7ff fd91 	bl	80007a0 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000c7e:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000c82:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c84:	6a23      	ldr	r3, [r4, #32]
 8000c86:	079b      	lsls	r3, r3, #30
 8000c88:	d53f      	bpl.n	8000d0a <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 8000c8a:	2f00      	cmp	r7, #0
 8000c8c:	f43f af1e 	beq.w	8000acc <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c90:	69e3      	ldr	r3, [r4, #28]
 8000c92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000c96:	61e3      	str	r3, [r4, #28]
 8000c98:	e718      	b.n	8000acc <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8000c9a:	2700      	movs	r7, #0
 8000c9c:	e7e2      	b.n	8000c64 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000c9e:	6833      	ldr	r3, [r6, #0]
 8000ca0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ca4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000ca6:	f7ff fd7b 	bl	80007a0 <HAL_GetTick>
 8000caa:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cac:	6833      	ldr	r3, [r6, #0]
 8000cae:	05da      	lsls	r2, r3, #23
 8000cb0:	d4dc      	bmi.n	8000c6c <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000cb2:	f7ff fd75 	bl	80007a0 <HAL_GetTick>
 8000cb6:	eba0 0008 	sub.w	r0, r0, r8
 8000cba:	2864      	cmp	r0, #100	; 0x64
 8000cbc:	d9f6      	bls.n	8000cac <HAL_RCC_OscConfig+0x208>
 8000cbe:	e733      	b.n	8000b28 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cc0:	b9ab      	cbnz	r3, 8000cee <HAL_RCC_OscConfig+0x24a>
 8000cc2:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000cc4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cc8:	f023 0301 	bic.w	r3, r3, #1
 8000ccc:	6223      	str	r3, [r4, #32]
 8000cce:	6a23      	ldr	r3, [r4, #32]
 8000cd0:	f023 0304 	bic.w	r3, r3, #4
 8000cd4:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000cd6:	f7ff fd63 	bl	80007a0 <HAL_GetTick>
 8000cda:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000cdc:	6a23      	ldr	r3, [r4, #32]
 8000cde:	0798      	lsls	r0, r3, #30
 8000ce0:	d5d3      	bpl.n	8000c8a <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ce2:	f7ff fd5d 	bl	80007a0 <HAL_GetTick>
 8000ce6:	1b80      	subs	r0, r0, r6
 8000ce8:	4540      	cmp	r0, r8
 8000cea:	d9f7      	bls.n	8000cdc <HAL_RCC_OscConfig+0x238>
 8000cec:	e71c      	b.n	8000b28 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cee:	2b05      	cmp	r3, #5
 8000cf0:	6a23      	ldr	r3, [r4, #32]
 8000cf2:	d103      	bne.n	8000cfc <HAL_RCC_OscConfig+0x258>
 8000cf4:	f043 0304 	orr.w	r3, r3, #4
 8000cf8:	6223      	str	r3, [r4, #32]
 8000cfa:	e7ba      	b.n	8000c72 <HAL_RCC_OscConfig+0x1ce>
 8000cfc:	f023 0301 	bic.w	r3, r3, #1
 8000d00:	6223      	str	r3, [r4, #32]
 8000d02:	6a23      	ldr	r3, [r4, #32]
 8000d04:	f023 0304 	bic.w	r3, r3, #4
 8000d08:	e7b6      	b.n	8000c78 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d0a:	f7ff fd49 	bl	80007a0 <HAL_GetTick>
 8000d0e:	eba0 0008 	sub.w	r0, r0, r8
 8000d12:	42b0      	cmp	r0, r6
 8000d14:	d9b6      	bls.n	8000c84 <HAL_RCC_OscConfig+0x1e0>
 8000d16:	e707      	b.n	8000b28 <HAL_RCC_OscConfig+0x84>
 8000d18:	40021000 	.word	0x40021000
 8000d1c:	42420000 	.word	0x42420000
 8000d20:	42420480 	.word	0x42420480
 8000d24:	2000001c 	.word	0x2000001c
 8000d28:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d2c:	4b2a      	ldr	r3, [pc, #168]	; (8000dd8 <HAL_RCC_OscConfig+0x334>)
 8000d2e:	685a      	ldr	r2, [r3, #4]
 8000d30:	461c      	mov	r4, r3
 8000d32:	f002 020c 	and.w	r2, r2, #12
 8000d36:	2a08      	cmp	r2, #8
 8000d38:	d03d      	beq.n	8000db6 <HAL_RCC_OscConfig+0x312>
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	4e27      	ldr	r6, [pc, #156]	; (8000ddc <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d3e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000d40:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d42:	d12b      	bne.n	8000d9c <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 8000d44:	f7ff fd2c 	bl	80007a0 <HAL_GetTick>
 8000d48:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d4a:	6823      	ldr	r3, [r4, #0]
 8000d4c:	0199      	lsls	r1, r3, #6
 8000d4e:	d41f      	bmi.n	8000d90 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000d50:	6a2b      	ldr	r3, [r5, #32]
 8000d52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d56:	d105      	bne.n	8000d64 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000d58:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000d5a:	68a9      	ldr	r1, [r5, #8]
 8000d5c:	f022 020f 	bic.w	r2, r2, #15
 8000d60:	430a      	orrs	r2, r1
 8000d62:	62e2      	str	r2, [r4, #44]	; 0x2c
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000d64:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000d66:	6862      	ldr	r2, [r4, #4]
 8000d68:	430b      	orrs	r3, r1
 8000d6a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000d72:	2301      	movs	r3, #1
 8000d74:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000d76:	f7ff fd13 	bl	80007a0 <HAL_GetTick>
 8000d7a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000d7c:	6823      	ldr	r3, [r4, #0]
 8000d7e:	019a      	lsls	r2, r3, #6
 8000d80:	f53f aea8 	bmi.w	8000ad4 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000d84:	f7ff fd0c 	bl	80007a0 <HAL_GetTick>
 8000d88:	1b40      	subs	r0, r0, r5
 8000d8a:	2802      	cmp	r0, #2
 8000d8c:	d9f6      	bls.n	8000d7c <HAL_RCC_OscConfig+0x2d8>
 8000d8e:	e6cb      	b.n	8000b28 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000d90:	f7ff fd06 	bl	80007a0 <HAL_GetTick>
 8000d94:	1bc0      	subs	r0, r0, r7
 8000d96:	2802      	cmp	r0, #2
 8000d98:	d9d7      	bls.n	8000d4a <HAL_RCC_OscConfig+0x2a6>
 8000d9a:	e6c5      	b.n	8000b28 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000d9c:	f7ff fd00 	bl	80007a0 <HAL_GetTick>
 8000da0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000da2:	6823      	ldr	r3, [r4, #0]
 8000da4:	019b      	lsls	r3, r3, #6
 8000da6:	f57f ae95 	bpl.w	8000ad4 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000daa:	f7ff fcf9 	bl	80007a0 <HAL_GetTick>
 8000dae:	1b40      	subs	r0, r0, r5
 8000db0:	2802      	cmp	r0, #2
 8000db2:	d9f6      	bls.n	8000da2 <HAL_RCC_OscConfig+0x2fe>
 8000db4:	e6b8      	b.n	8000b28 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000db6:	2801      	cmp	r0, #1
 8000db8:	f43f aeb7 	beq.w	8000b2a <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 8000dbc:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000dbe:	6a2b      	ldr	r3, [r5, #32]
 8000dc0:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	f47f ae71 	bne.w	8000aac <HAL_RCC_OscConfig+0x8>
 8000dca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000dcc:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8000dd0:	1ac0      	subs	r0, r0, r3
 8000dd2:	bf18      	it	ne
 8000dd4:	2001      	movne	r0, #1
 8000dd6:	e6a8      	b.n	8000b2a <HAL_RCC_OscConfig+0x86>
 8000dd8:	40021000 	.word	0x40021000
 8000ddc:	42420060 	.word	0x42420060

08000de0 <HAL_RCC_GetSysClockFreq>:
{
 8000de0:	b530      	push	{r4, r5, lr}
 8000de2:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000de4:	466c      	mov	r4, sp
 8000de6:	4b1b      	ldr	r3, [pc, #108]	; (8000e54 <HAL_RCC_GetSysClockFreq+0x74>)
 8000de8:	f103 0510 	add.w	r5, r3, #16
 8000dec:	4622      	mov	r2, r4
 8000dee:	6818      	ldr	r0, [r3, #0]
 8000df0:	6859      	ldr	r1, [r3, #4]
 8000df2:	3308      	adds	r3, #8
 8000df4:	c203      	stmia	r2!, {r0, r1}
 8000df6:	42ab      	cmp	r3, r5
 8000df8:	4614      	mov	r4, r2
 8000dfa:	d1f7      	bne.n	8000dec <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8000dfc:	4b16      	ldr	r3, [pc, #88]	; (8000e58 <HAL_RCC_GetSysClockFreq+0x78>)
 8000dfe:	ac04      	add	r4, sp, #16
 8000e00:	f103 0510 	add.w	r5, r3, #16
 8000e04:	4622      	mov	r2, r4
 8000e06:	6818      	ldr	r0, [r3, #0]
 8000e08:	6859      	ldr	r1, [r3, #4]
 8000e0a:	3308      	adds	r3, #8
 8000e0c:	c203      	stmia	r2!, {r0, r1}
 8000e0e:	42ab      	cmp	r3, r5
 8000e10:	4614      	mov	r4, r2
 8000e12:	d1f7      	bne.n	8000e04 <HAL_RCC_GetSysClockFreq+0x24>
  tmpreg = RCC->CFGR;
 8000e14:	4911      	ldr	r1, [pc, #68]	; (8000e5c <HAL_RCC_GetSysClockFreq+0x7c>)
 8000e16:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000e18:	f003 020c 	and.w	r2, r3, #12
 8000e1c:	2a08      	cmp	r2, #8
 8000e1e:	d117      	bne.n	8000e50 <HAL_RCC_GetSysClockFreq+0x70>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000e20:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000e24:	a808      	add	r0, sp, #32
 8000e26:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000e28:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000e2a:	f812 2c20 	ldrb.w	r2, [r2, #-32]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000e2e:	d50c      	bpl.n	8000e4a <HAL_RCC_GetSysClockFreq+0x6a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8000e30:	6acb      	ldr	r3, [r1, #44]	; 0x2c
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000e32:	480b      	ldr	r0, [pc, #44]	; (8000e60 <HAL_RCC_GetSysClockFreq+0x80>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8000e34:	f003 030f 	and.w	r3, r3, #15
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000e38:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8000e3a:	aa08      	add	r2, sp, #32
 8000e3c:	4413      	add	r3, r2
 8000e3e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000e42:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000e46:	b009      	add	sp, #36	; 0x24
 8000e48:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000e4a:	4806      	ldr	r0, [pc, #24]	; (8000e64 <HAL_RCC_GetSysClockFreq+0x84>)
 8000e4c:	4350      	muls	r0, r2
 8000e4e:	e7fa      	b.n	8000e46 <HAL_RCC_GetSysClockFreq+0x66>
      sysclockfreq = HSE_VALUE;
 8000e50:	4803      	ldr	r0, [pc, #12]	; (8000e60 <HAL_RCC_GetSysClockFreq+0x80>)
  return sysclockfreq;
 8000e52:	e7f8      	b.n	8000e46 <HAL_RCC_GetSysClockFreq+0x66>
 8000e54:	080028dc 	.word	0x080028dc
 8000e58:	080028ec 	.word	0x080028ec
 8000e5c:	40021000 	.word	0x40021000
 8000e60:	007a1200 	.word	0x007a1200
 8000e64:	003d0900 	.word	0x003d0900

08000e68 <HAL_RCC_ClockConfig>:
{
 8000e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (RCC_ClkInitStruct == NULL)
 8000e6a:	4605      	mov	r5, r0
 8000e6c:	b908      	cbnz	r0, 8000e72 <HAL_RCC_ClockConfig+0xa>
    return HAL_ERROR;
 8000e6e:	2001      	movs	r0, #1
 8000e70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000e72:	6802      	ldr	r2, [r0, #0]
 8000e74:	4c30      	ldr	r4, [pc, #192]	; (8000f38 <HAL_RCC_ClockConfig+0xd0>)
 8000e76:	f012 0f02 	tst.w	r2, #2
 8000e7a:	d011      	beq.n	8000ea0 <HAL_RCC_ClockConfig+0x38>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e7c:	0757      	lsls	r7, r2, #29
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000e7e:	bf42      	ittt	mi
 8000e80:	6863      	ldrmi	r3, [r4, #4]
 8000e82:	f443 63e0 	orrmi.w	r3, r3, #1792	; 0x700
 8000e86:	6063      	strmi	r3, [r4, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e88:	0716      	lsls	r6, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000e8a:	bf42      	ittt	mi
 8000e8c:	6863      	ldrmi	r3, [r4, #4]
 8000e8e:	f443 5360 	orrmi.w	r3, r3, #14336	; 0x3800
 8000e92:	6063      	strmi	r3, [r4, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000e94:	6863      	ldr	r3, [r4, #4]
 8000e96:	6881      	ldr	r1, [r0, #8]
 8000e98:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000e9c:	430b      	orrs	r3, r1
 8000e9e:	6063      	str	r3, [r4, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000ea0:	07d0      	lsls	r0, r2, #31
 8000ea2:	d41b      	bmi.n	8000edc <HAL_RCC_ClockConfig+0x74>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ea4:	682a      	ldr	r2, [r5, #0]
 8000ea6:	0751      	lsls	r1, r2, #29
 8000ea8:	d43f      	bmi.n	8000f2a <HAL_RCC_ClockConfig+0xc2>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000eaa:	0713      	lsls	r3, r2, #28
 8000eac:	d506      	bpl.n	8000ebc <HAL_RCC_ClockConfig+0x54>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000eae:	6863      	ldr	r3, [r4, #4]
 8000eb0:	692a      	ldr	r2, [r5, #16]
 8000eb2:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000eb6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000eba:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000ebc:	f7ff ff90 	bl	8000de0 <HAL_RCC_GetSysClockFreq>
 8000ec0:	6863      	ldr	r3, [r4, #4]
 8000ec2:	4a1e      	ldr	r2, [pc, #120]	; (8000f3c <HAL_RCC_ClockConfig+0xd4>)
 8000ec4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000ec8:	5cd3      	ldrb	r3, [r2, r3]
 8000eca:	40d8      	lsrs	r0, r3
 8000ecc:	4b1c      	ldr	r3, [pc, #112]	; (8000f40 <HAL_RCC_ClockConfig+0xd8>)
 8000ece:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8000ed0:	4b1c      	ldr	r3, [pc, #112]	; (8000f44 <HAL_RCC_ClockConfig+0xdc>)
 8000ed2:	6818      	ldr	r0, [r3, #0]
 8000ed4:	f7ff fc28 	bl	8000728 <HAL_InitTick>
  return HAL_OK;
 8000ed8:	2000      	movs	r0, #0
 8000eda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000edc:	686a      	ldr	r2, [r5, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ede:	6823      	ldr	r3, [r4, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ee0:	2a01      	cmp	r2, #1
 8000ee2:	d11a      	bne.n	8000f1a <HAL_RCC_ClockConfig+0xb2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ee4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ee8:	d0c1      	beq.n	8000e6e <HAL_RCC_ClockConfig+0x6>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000eea:	6863      	ldr	r3, [r4, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000eec:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000ef0:	f023 0303 	bic.w	r3, r3, #3
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8000ef8:	f7ff fc52 	bl	80007a0 <HAL_GetTick>
 8000efc:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000efe:	6863      	ldr	r3, [r4, #4]
 8000f00:	686a      	ldr	r2, [r5, #4]
 8000f02:	f003 030c 	and.w	r3, r3, #12
 8000f06:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000f0a:	d0cb      	beq.n	8000ea4 <HAL_RCC_ClockConfig+0x3c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f0c:	f7ff fc48 	bl	80007a0 <HAL_GetTick>
 8000f10:	1b80      	subs	r0, r0, r6
 8000f12:	42b8      	cmp	r0, r7
 8000f14:	d9f3      	bls.n	8000efe <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 8000f16:	2003      	movs	r0, #3
}
 8000f18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f1a:	2a02      	cmp	r2, #2
 8000f1c:	d102      	bne.n	8000f24 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f1e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000f22:	e7e1      	b.n	8000ee8 <HAL_RCC_ClockConfig+0x80>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f24:	f013 0f02 	tst.w	r3, #2
 8000f28:	e7de      	b.n	8000ee8 <HAL_RCC_ClockConfig+0x80>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000f2a:	6863      	ldr	r3, [r4, #4]
 8000f2c:	68e9      	ldr	r1, [r5, #12]
 8000f2e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f32:	430b      	orrs	r3, r1
 8000f34:	6063      	str	r3, [r4, #4]
 8000f36:	e7b8      	b.n	8000eaa <HAL_RCC_ClockConfig+0x42>
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	08002947 	.word	0x08002947
 8000f40:	2000001c 	.word	0x2000001c
 8000f44:	20000004 	.word	0x20000004

08000f48 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000f48:	6a03      	ldr	r3, [r0, #32]
{
 8000f4a:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000f4c:	f023 0301 	bic.w	r3, r3, #1
 8000f50:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000f52:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000f54:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8000f56:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000f58:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8000f5a:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8000f5e:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8000f60:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8000f62:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8000f66:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8000f68:	4d17      	ldr	r5, [pc, #92]	; (8000fc8 <TIM_OC1_SetConfig+0x80>)
 8000f6a:	42a8      	cmp	r0, r5
 8000f6c:	d00b      	beq.n	8000f86 <TIM_OC1_SetConfig+0x3e>
 8000f6e:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8000f72:	42a8      	cmp	r0, r5
 8000f74:	d007      	beq.n	8000f86 <TIM_OC1_SetConfig+0x3e>
 8000f76:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f7a:	42a8      	cmp	r0, r5
 8000f7c:	d003      	beq.n	8000f86 <TIM_OC1_SetConfig+0x3e>
 8000f7e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f82:	42a8      	cmp	r0, r5
 8000f84:	d11a      	bne.n	8000fbc <TIM_OC1_SetConfig+0x74>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8000f86:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8000f88:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8000f8c:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000f8e:	4d0e      	ldr	r5, [pc, #56]	; (8000fc8 <TIM_OC1_SetConfig+0x80>)
    tmpccer &= ~TIM_CCER_CC1NE;
 8000f90:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000f94:	42a8      	cmp	r0, r5
 8000f96:	d00b      	beq.n	8000fb0 <TIM_OC1_SetConfig+0x68>
 8000f98:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8000f9c:	42a8      	cmp	r0, r5
 8000f9e:	d007      	beq.n	8000fb0 <TIM_OC1_SetConfig+0x68>
 8000fa0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000fa4:	42a8      	cmp	r0, r5
 8000fa6:	d003      	beq.n	8000fb0 <TIM_OC1_SetConfig+0x68>
 8000fa8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000fac:	42a8      	cmp	r0, r5
 8000fae:	d105      	bne.n	8000fbc <TIM_OC1_SetConfig+0x74>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8000fb0:	f422 7540 	bic.w	r5, r2, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8000fb4:	698e      	ldr	r6, [r1, #24]
 8000fb6:	694a      	ldr	r2, [r1, #20]
 8000fb8:	4332      	orrs	r2, r6
 8000fba:	432a      	orrs	r2, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000fbc:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8000fbe:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8000fc0:	6184      	str	r4, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8000fc2:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000fc4:	6203      	str	r3, [r0, #32]
 8000fc6:	bd70      	pop	{r4, r5, r6, pc}
 8000fc8:	40012c00 	.word	0x40012c00

08000fcc <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8000fcc:	6a03      	ldr	r3, [r0, #32]
{
 8000fce:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8000fd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000fd4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000fd6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000fd8:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000fda:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000fdc:	680e      	ldr	r6, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8000fde:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8000fe2:	4326      	orrs	r6, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8000fe4:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8000fe6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8000fea:	ea43 2304 	orr.w	r3, r3, r4, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8000fee:	4c11      	ldr	r4, [pc, #68]	; (8001034 <TIM_OC3_SetConfig+0x68>)
 8000ff0:	42a0      	cmp	r0, r4
 8000ff2:	d10e      	bne.n	8001012 <TIM_OC3_SetConfig+0x46>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8000ff4:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8000ff6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8000ffa:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8000ffe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001002:	694c      	ldr	r4, [r1, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001004:	698d      	ldr	r5, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001006:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800100a:	432c      	orrs	r4, r5
 800100c:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 8001010:	e009      	b.n	8001026 <TIM_OC3_SetConfig+0x5a>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001012:	4d09      	ldr	r5, [pc, #36]	; (8001038 <TIM_OC3_SetConfig+0x6c>)
 8001014:	42a8      	cmp	r0, r5
 8001016:	d0f4      	beq.n	8001002 <TIM_OC3_SetConfig+0x36>
 8001018:	4c08      	ldr	r4, [pc, #32]	; (800103c <TIM_OC3_SetConfig+0x70>)
 800101a:	42a0      	cmp	r0, r4
 800101c:	d0f1      	beq.n	8001002 <TIM_OC3_SetConfig+0x36>
 800101e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001022:	42a0      	cmp	r0, r4
 8001024:	d0ed      	beq.n	8001002 <TIM_OC3_SetConfig+0x36>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001026:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001028:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 800102a:	61c6      	str	r6, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800102c:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800102e:	6203      	str	r3, [r0, #32]
}
 8001030:	bd70      	pop	{r4, r5, r6, pc}
 8001032:	bf00      	nop
 8001034:	40012c00 	.word	0x40012c00
 8001038:	40014000 	.word	0x40014000
 800103c:	40014400 	.word	0x40014400

08001040 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001040:	6a03      	ldr	r3, [r0, #32]
{
 8001042:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001044:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001048:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800104a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800104c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800104e:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001050:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001052:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001056:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800105a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 800105c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001060:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001064:	4d0c      	ldr	r5, [pc, #48]	; (8001098 <TIM_OC4_SetConfig+0x58>)
 8001066:	42a8      	cmp	r0, r5
 8001068:	d00b      	beq.n	8001082 <TIM_OC4_SetConfig+0x42>
 800106a:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 800106e:	42a8      	cmp	r0, r5
 8001070:	d007      	beq.n	8001082 <TIM_OC4_SetConfig+0x42>
 8001072:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001076:	42a8      	cmp	r0, r5
 8001078:	d003      	beq.n	8001082 <TIM_OC4_SetConfig+0x42>
 800107a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800107e:	42a8      	cmp	r0, r5
 8001080:	d104      	bne.n	800108c <TIM_OC4_SetConfig+0x4c>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001082:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001084:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001088:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800108c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800108e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001090:	684a      	ldr	r2, [r1, #4]
 8001092:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001094:	6203      	str	r3, [r0, #32]
 8001096:	bd30      	pop	{r4, r5, pc}
 8001098:	40012c00 	.word	0x40012c00

0800109c <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800109c:	6803      	ldr	r3, [r0, #0]
}
 800109e:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80010a0:	68da      	ldr	r2, [r3, #12]
 80010a2:	f042 0201 	orr.w	r2, r2, #1
 80010a6:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80010a8:	689a      	ldr	r2, [r3, #8]
 80010aa:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80010ae:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 80010b0:	bf1e      	ittt	ne
 80010b2:	681a      	ldrne	r2, [r3, #0]
 80010b4:	f042 0201 	orrne.w	r2, r2, #1
 80010b8:	601a      	strne	r2, [r3, #0]
}
 80010ba:	4770      	bx	lr

080010bc <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80010bc:	6803      	ldr	r3, [r0, #0]
 80010be:	68da      	ldr	r2, [r3, #12]
 80010c0:	f022 0201 	bic.w	r2, r2, #1
 80010c4:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE(htim);
 80010c6:	f241 1211 	movw	r2, #4369	; 0x1111
 80010ca:	6a19      	ldr	r1, [r3, #32]
 80010cc:	4211      	tst	r1, r2
 80010ce:	d108      	bne.n	80010e2 <HAL_TIM_Base_Stop_IT+0x26>
 80010d0:	f240 4244 	movw	r2, #1092	; 0x444
 80010d4:	6a19      	ldr	r1, [r3, #32]
 80010d6:	4211      	tst	r1, r2
 80010d8:	bf02      	ittt	eq
 80010da:	681a      	ldreq	r2, [r3, #0]
 80010dc:	f022 0201 	biceq.w	r2, r2, #1
 80010e0:	601a      	streq	r2, [r3, #0]
}
 80010e2:	2000      	movs	r0, #0
 80010e4:	4770      	bx	lr

080010e6 <HAL_TIM_PeriodElapsedCallback>:
 80010e6:	4770      	bx	lr

080010e8 <HAL_TIM_OC_DelayElapsedCallback>:
 80010e8:	4770      	bx	lr

080010ea <HAL_TIM_IC_CaptureCallback>:
 80010ea:	4770      	bx	lr

080010ec <HAL_TIM_PWM_PulseFinishedCallback>:
 80010ec:	4770      	bx	lr

080010ee <HAL_TIM_TriggerCallback>:
 80010ee:	4770      	bx	lr

080010f0 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80010f0:	6803      	ldr	r3, [r0, #0]
{
 80010f2:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80010f4:	691a      	ldr	r2, [r3, #16]
{
 80010f6:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80010f8:	0791      	lsls	r1, r2, #30
 80010fa:	d50e      	bpl.n	800111a <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80010fc:	68da      	ldr	r2, [r3, #12]
 80010fe:	0792      	lsls	r2, r2, #30
 8001100:	d50b      	bpl.n	800111a <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001102:	f06f 0202 	mvn.w	r2, #2
 8001106:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001108:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800110a:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800110c:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800110e:	079b      	lsls	r3, r3, #30
 8001110:	d077      	beq.n	8001202 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8001112:	f7ff ffea 	bl	80010ea <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001116:	2300      	movs	r3, #0
 8001118:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800111a:	6823      	ldr	r3, [r4, #0]
 800111c:	691a      	ldr	r2, [r3, #16]
 800111e:	0750      	lsls	r0, r2, #29
 8001120:	d510      	bpl.n	8001144 <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001122:	68da      	ldr	r2, [r3, #12]
 8001124:	0751      	lsls	r1, r2, #29
 8001126:	d50d      	bpl.n	8001144 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001128:	f06f 0204 	mvn.w	r2, #4
 800112c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800112e:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001130:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001132:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001134:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8001138:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800113a:	d068      	beq.n	800120e <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 800113c:	f7ff ffd5 	bl	80010ea <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001140:	2300      	movs	r3, #0
 8001142:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001144:	6823      	ldr	r3, [r4, #0]
 8001146:	691a      	ldr	r2, [r3, #16]
 8001148:	0712      	lsls	r2, r2, #28
 800114a:	d50f      	bpl.n	800116c <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800114c:	68da      	ldr	r2, [r3, #12]
 800114e:	0710      	lsls	r0, r2, #28
 8001150:	d50c      	bpl.n	800116c <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001152:	f06f 0208 	mvn.w	r2, #8
 8001156:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001158:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800115a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800115c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800115e:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8001160:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001162:	d05a      	beq.n	800121a <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001164:	f7ff ffc1 	bl	80010ea <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001168:	2300      	movs	r3, #0
 800116a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800116c:	6823      	ldr	r3, [r4, #0]
 800116e:	691a      	ldr	r2, [r3, #16]
 8001170:	06d2      	lsls	r2, r2, #27
 8001172:	d510      	bpl.n	8001196 <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001174:	68da      	ldr	r2, [r3, #12]
 8001176:	06d0      	lsls	r0, r2, #27
 8001178:	d50d      	bpl.n	8001196 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800117a:	f06f 0210 	mvn.w	r2, #16
 800117e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001180:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001182:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001184:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001186:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800118a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800118c:	d04b      	beq.n	8001226 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 800118e:	f7ff ffac 	bl	80010ea <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001192:	2300      	movs	r3, #0
 8001194:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001196:	6823      	ldr	r3, [r4, #0]
 8001198:	691a      	ldr	r2, [r3, #16]
 800119a:	07d1      	lsls	r1, r2, #31
 800119c:	d508      	bpl.n	80011b0 <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800119e:	68da      	ldr	r2, [r3, #12]
 80011a0:	07d2      	lsls	r2, r2, #31
 80011a2:	d505      	bpl.n	80011b0 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80011a4:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 80011a8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80011aa:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80011ac:	f7ff ff9b 	bl	80010e6 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80011b0:	6823      	ldr	r3, [r4, #0]
 80011b2:	691a      	ldr	r2, [r3, #16]
 80011b4:	0610      	lsls	r0, r2, #24
 80011b6:	d508      	bpl.n	80011ca <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80011b8:	68da      	ldr	r2, [r3, #12]
 80011ba:	0611      	lsls	r1, r2, #24
 80011bc:	d505      	bpl.n	80011ca <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80011be:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 80011c2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80011c4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80011c6:	f000 f942 	bl	800144e <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80011ca:	6823      	ldr	r3, [r4, #0]
 80011cc:	691a      	ldr	r2, [r3, #16]
 80011ce:	0652      	lsls	r2, r2, #25
 80011d0:	d508      	bpl.n	80011e4 <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80011d2:	68da      	ldr	r2, [r3, #12]
 80011d4:	0650      	lsls	r0, r2, #25
 80011d6:	d505      	bpl.n	80011e4 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80011d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 80011dc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80011de:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80011e0:	f7ff ff85 	bl	80010ee <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80011e4:	6823      	ldr	r3, [r4, #0]
 80011e6:	691a      	ldr	r2, [r3, #16]
 80011e8:	0691      	lsls	r1, r2, #26
 80011ea:	d522      	bpl.n	8001232 <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80011ec:	68da      	ldr	r2, [r3, #12]
 80011ee:	0692      	lsls	r2, r2, #26
 80011f0:	d51f      	bpl.n	8001232 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80011f2:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 80011f6:	4620      	mov	r0, r4
}
 80011f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80011fc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80011fe:	f000 b925 	b.w	800144c <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001202:	f7ff ff71 	bl	80010e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001206:	4620      	mov	r0, r4
 8001208:	f7ff ff70 	bl	80010ec <HAL_TIM_PWM_PulseFinishedCallback>
 800120c:	e783      	b.n	8001116 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800120e:	f7ff ff6b 	bl	80010e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001212:	4620      	mov	r0, r4
 8001214:	f7ff ff6a 	bl	80010ec <HAL_TIM_PWM_PulseFinishedCallback>
 8001218:	e792      	b.n	8001140 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800121a:	f7ff ff65 	bl	80010e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800121e:	4620      	mov	r0, r4
 8001220:	f7ff ff64 	bl	80010ec <HAL_TIM_PWM_PulseFinishedCallback>
 8001224:	e7a0      	b.n	8001168 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001226:	f7ff ff5f 	bl	80010e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800122a:	4620      	mov	r0, r4
 800122c:	f7ff ff5e 	bl	80010ec <HAL_TIM_PWM_PulseFinishedCallback>
 8001230:	e7af      	b.n	8001192 <HAL_TIM_IRQHandler+0xa2>
 8001232:	bd10      	pop	{r4, pc}

08001234 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001234:	4a26      	ldr	r2, [pc, #152]	; (80012d0 <TIM_Base_SetConfig+0x9c>)
  tmpcr1 = TIMx->CR1;
 8001236:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001238:	4290      	cmp	r0, r2
 800123a:	d00a      	beq.n	8001252 <TIM_Base_SetConfig+0x1e>
 800123c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001240:	d007      	beq.n	8001252 <TIM_Base_SetConfig+0x1e>
 8001242:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001246:	4290      	cmp	r0, r2
 8001248:	d003      	beq.n	8001252 <TIM_Base_SetConfig+0x1e>
 800124a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800124e:	4290      	cmp	r0, r2
 8001250:	d111      	bne.n	8001276 <TIM_Base_SetConfig+0x42>
    tmpcr1 |= Structure->CounterMode;
 8001252:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001254:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001258:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800125a:	4a1d      	ldr	r2, [pc, #116]	; (80012d0 <TIM_Base_SetConfig+0x9c>)
 800125c:	4290      	cmp	r0, r2
 800125e:	d015      	beq.n	800128c <TIM_Base_SetConfig+0x58>
 8001260:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001264:	d012      	beq.n	800128c <TIM_Base_SetConfig+0x58>
 8001266:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800126a:	4290      	cmp	r0, r2
 800126c:	d00e      	beq.n	800128c <TIM_Base_SetConfig+0x58>
 800126e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001272:	4290      	cmp	r0, r2
 8001274:	d00a      	beq.n	800128c <TIM_Base_SetConfig+0x58>
 8001276:	4a17      	ldr	r2, [pc, #92]	; (80012d4 <TIM_Base_SetConfig+0xa0>)
 8001278:	4290      	cmp	r0, r2
 800127a:	d007      	beq.n	800128c <TIM_Base_SetConfig+0x58>
 800127c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001280:	4290      	cmp	r0, r2
 8001282:	d003      	beq.n	800128c <TIM_Base_SetConfig+0x58>
 8001284:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001288:	4290      	cmp	r0, r2
 800128a:	d103      	bne.n	8001294 <TIM_Base_SetConfig+0x60>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800128c:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800128e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001292:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001294:	694a      	ldr	r2, [r1, #20]
 8001296:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800129a:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800129c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800129e:	688b      	ldr	r3, [r1, #8]
 80012a0:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80012a2:	680b      	ldr	r3, [r1, #0]
 80012a4:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80012a6:	4b0a      	ldr	r3, [pc, #40]	; (80012d0 <TIM_Base_SetConfig+0x9c>)
 80012a8:	4298      	cmp	r0, r3
 80012aa:	d00b      	beq.n	80012c4 <TIM_Base_SetConfig+0x90>
 80012ac:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 80012b0:	4298      	cmp	r0, r3
 80012b2:	d007      	beq.n	80012c4 <TIM_Base_SetConfig+0x90>
 80012b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80012b8:	4298      	cmp	r0, r3
 80012ba:	d003      	beq.n	80012c4 <TIM_Base_SetConfig+0x90>
 80012bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80012c0:	4298      	cmp	r0, r3
 80012c2:	d101      	bne.n	80012c8 <TIM_Base_SetConfig+0x94>
    TIMx->RCR = Structure->RepetitionCounter;
 80012c4:	690b      	ldr	r3, [r1, #16]
 80012c6:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80012c8:	2301      	movs	r3, #1
 80012ca:	6143      	str	r3, [r0, #20]
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	40012c00 	.word	0x40012c00
 80012d4:	40014000 	.word	0x40014000

080012d8 <HAL_TIM_Base_Init>:
{
 80012d8:	b510      	push	{r4, lr}
  if (htim == NULL)
 80012da:	4604      	mov	r4, r0
 80012dc:	b1a0      	cbz	r0, 8001308 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80012de:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80012e2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80012e6:	b91b      	cbnz	r3, 80012f0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80012e8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80012ec:	f000 fcd2 	bl	8001c94 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80012f0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80012f2:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80012f4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80012f8:	1d21      	adds	r1, r4, #4
 80012fa:	f7ff ff9b 	bl	8001234 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80012fe:	2301      	movs	r3, #1
  return HAL_OK;
 8001300:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001302:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001306:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001308:	2001      	movs	r0, #1
}
 800130a:	bd10      	pop	{r4, pc}

0800130c <HAL_TIM_OC_Init>:
{
 800130c:	b510      	push	{r4, lr}
  if (htim == NULL)
 800130e:	4604      	mov	r4, r0
 8001310:	b1a0      	cbz	r0, 800133c <HAL_TIM_OC_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001312:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001316:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800131a:	b91b      	cbnz	r3, 8001324 <HAL_TIM_OC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800131c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 8001320:	f000 fc9a 	bl	8001c58 <HAL_TIM_OC_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001324:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001326:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001328:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800132c:	1d21      	adds	r1, r4, #4
 800132e:	f7ff ff81 	bl	8001234 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001332:	2301      	movs	r3, #1
  return HAL_OK;
 8001334:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001336:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800133a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800133c:	2001      	movs	r0, #1
}
 800133e:	bd10      	pop	{r4, pc}

08001340 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001340:	6a03      	ldr	r3, [r0, #32]
{
 8001342:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001344:	f023 0310 	bic.w	r3, r3, #16
 8001348:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800134a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800134c:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800134e:	6984      	ldr	r4, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001350:	680e      	ldr	r6, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001352:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001356:	ea44 2606 	orr.w	r6, r4, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800135a:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 800135c:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001360:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001364:	4c10      	ldr	r4, [pc, #64]	; (80013a8 <TIM_OC2_SetConfig+0x68>)
 8001366:	42a0      	cmp	r0, r4
 8001368:	d10e      	bne.n	8001388 <TIM_OC2_SetConfig+0x48>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800136a:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800136c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001370:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8001374:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001378:	694c      	ldr	r4, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800137a:	698d      	ldr	r5, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800137c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001380:	432c      	orrs	r4, r5
 8001382:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
 8001386:	e009      	b.n	800139c <TIM_OC2_SetConfig+0x5c>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001388:	4d08      	ldr	r5, [pc, #32]	; (80013ac <TIM_OC2_SetConfig+0x6c>)
 800138a:	42a8      	cmp	r0, r5
 800138c:	d0f4      	beq.n	8001378 <TIM_OC2_SetConfig+0x38>
 800138e:	4c08      	ldr	r4, [pc, #32]	; (80013b0 <TIM_OC2_SetConfig+0x70>)
 8001390:	42a0      	cmp	r0, r4
 8001392:	d0f1      	beq.n	8001378 <TIM_OC2_SetConfig+0x38>
 8001394:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001398:	42a0      	cmp	r0, r4
 800139a:	d0ed      	beq.n	8001378 <TIM_OC2_SetConfig+0x38>
  TIMx->CR2 = tmpcr2;
 800139c:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 800139e:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 80013a0:	6186      	str	r6, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80013a2:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80013a4:	6203      	str	r3, [r0, #32]
}
 80013a6:	bd70      	pop	{r4, r5, r6, pc}
 80013a8:	40012c00 	.word	0x40012c00
 80013ac:	40014000 	.word	0x40014000
 80013b0:	40014400 	.word	0x40014400

080013b4 <HAL_TIM_OC_ConfigChannel>:
{
 80013b4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80013b6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80013ba:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80013bc:	2b01      	cmp	r3, #1
 80013be:	f04f 0002 	mov.w	r0, #2
 80013c2:	d018      	beq.n	80013f6 <HAL_TIM_OC_ConfigChannel+0x42>
 80013c4:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80013c6:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 80013ca:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80013ce:	461d      	mov	r5, r3
  switch (Channel)
 80013d0:	2a0c      	cmp	r2, #12
 80013d2:	d80b      	bhi.n	80013ec <HAL_TIM_OC_ConfigChannel+0x38>
 80013d4:	e8df f002 	tbb	[pc, r2]
 80013d8:	0a0a0a07 	.word	0x0a0a0a07
 80013dc:	0a0a0a10 	.word	0x0a0a0a10
 80013e0:	0a0a0a14 	.word	0x0a0a0a14
 80013e4:	18          	.byte	0x18
 80013e5:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80013e6:	6820      	ldr	r0, [r4, #0]
 80013e8:	f7ff fdae 	bl	8000f48 <TIM_OC1_SetConfig>
  __HAL_UNLOCK(htim);
 80013ec:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80013ee:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80013f2:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80013f6:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80013f8:	6820      	ldr	r0, [r4, #0]
 80013fa:	f7ff ffa1 	bl	8001340 <TIM_OC2_SetConfig>
      break;
 80013fe:	e7f5      	b.n	80013ec <HAL_TIM_OC_ConfigChannel+0x38>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001400:	6820      	ldr	r0, [r4, #0]
 8001402:	f7ff fde3 	bl	8000fcc <TIM_OC3_SetConfig>
      break;
 8001406:	e7f1      	b.n	80013ec <HAL_TIM_OC_ConfigChannel+0x38>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001408:	6820      	ldr	r0, [r4, #0]
 800140a:	f7ff fe19 	bl	8001040 <TIM_OC4_SetConfig>
      break;
 800140e:	e7ed      	b.n	80013ec <HAL_TIM_OC_ConfigChannel+0x38>

08001410 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001410:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001414:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8001416:	2b01      	cmp	r3, #1
 8001418:	f04f 0302 	mov.w	r3, #2
 800141c:	d014      	beq.n	8001448 <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800141e:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001420:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8001424:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001426:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001428:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800142a:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 800142c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001430:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001434:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001436:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001438:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800143a:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800143c:	2301      	movs	r3, #1
 800143e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001442:	2300      	movs	r3, #0
 8001444:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001448:	4618      	mov	r0, r3

  return HAL_OK;
}
 800144a:	bd30      	pop	{r4, r5, pc}

0800144c <HAL_TIMEx_CommutCallback>:
 800144c:	4770      	bx	lr

0800144e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800144e:	4770      	bx	lr

08001450 <enableClock>:
}

// enables GPIO RCC Clock
void enableClock(void)
{  
  if(_port == GPIOA)
 8001450:	4b24      	ldr	r3, [pc, #144]	; (80014e4 <enableClock+0x94>)
 8001452:	4a25      	ldr	r2, [pc, #148]	; (80014e8 <enableClock+0x98>)
 8001454:	681b      	ldr	r3, [r3, #0]
{  
 8001456:	b086      	sub	sp, #24
  if(_port == GPIOA)
 8001458:	4293      	cmp	r3, r2
 800145a:	d10b      	bne.n	8001474 <enableClock+0x24>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800145c:	4b23      	ldr	r3, [pc, #140]	; (80014ec <enableClock+0x9c>)
 800145e:	699a      	ldr	r2, [r3, #24]
 8001460:	f042 0204 	orr.w	r2, r2, #4
 8001464:	619a      	str	r2, [r3, #24]
 8001466:	699b      	ldr	r3, [r3, #24]
 8001468:	f003 0304 	and.w	r3, r3, #4
 800146c:	9301      	str	r3, [sp, #4]
 800146e:	9b01      	ldr	r3, [sp, #4]
		__HAL_RCC_GPIOE_CLK_ENABLE();
	//else if(_port == GPIOF)
	//	__HAL_RCC_GPIOF_CLK_ENABLE();

  // if you have a port that is not listed add it below the other else ifs
}
 8001470:	b006      	add	sp, #24
 8001472:	4770      	bx	lr
  else if(_port == GPIOB)
 8001474:	4a1e      	ldr	r2, [pc, #120]	; (80014f0 <enableClock+0xa0>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d10a      	bne.n	8001490 <enableClock+0x40>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 800147a:	4b1c      	ldr	r3, [pc, #112]	; (80014ec <enableClock+0x9c>)
 800147c:	699a      	ldr	r2, [r3, #24]
 800147e:	f042 0208 	orr.w	r2, r2, #8
 8001482:	619a      	str	r2, [r3, #24]
 8001484:	699b      	ldr	r3, [r3, #24]
 8001486:	f003 0308 	and.w	r3, r3, #8
 800148a:	9302      	str	r3, [sp, #8]
 800148c:	9b02      	ldr	r3, [sp, #8]
 800148e:	e7ef      	b.n	8001470 <enableClock+0x20>
	else if(_port == GPIOC)
 8001490:	4a18      	ldr	r2, [pc, #96]	; (80014f4 <enableClock+0xa4>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d10a      	bne.n	80014ac <enableClock+0x5c>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8001496:	4b15      	ldr	r3, [pc, #84]	; (80014ec <enableClock+0x9c>)
 8001498:	699a      	ldr	r2, [r3, #24]
 800149a:	f042 0210 	orr.w	r2, r2, #16
 800149e:	619a      	str	r2, [r3, #24]
 80014a0:	699b      	ldr	r3, [r3, #24]
 80014a2:	f003 0310 	and.w	r3, r3, #16
 80014a6:	9303      	str	r3, [sp, #12]
 80014a8:	9b03      	ldr	r3, [sp, #12]
 80014aa:	e7e1      	b.n	8001470 <enableClock+0x20>
	else if(_port == GPIOD)
 80014ac:	4a12      	ldr	r2, [pc, #72]	; (80014f8 <enableClock+0xa8>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d10a      	bne.n	80014c8 <enableClock+0x78>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 80014b2:	4b0e      	ldr	r3, [pc, #56]	; (80014ec <enableClock+0x9c>)
 80014b4:	699a      	ldr	r2, [r3, #24]
 80014b6:	f042 0220 	orr.w	r2, r2, #32
 80014ba:	619a      	str	r2, [r3, #24]
 80014bc:	699b      	ldr	r3, [r3, #24]
 80014be:	f003 0320 	and.w	r3, r3, #32
 80014c2:	9304      	str	r3, [sp, #16]
 80014c4:	9b04      	ldr	r3, [sp, #16]
 80014c6:	e7d3      	b.n	8001470 <enableClock+0x20>
	else if(_port == GPIOE)
 80014c8:	4a0c      	ldr	r2, [pc, #48]	; (80014fc <enableClock+0xac>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d1d0      	bne.n	8001470 <enableClock+0x20>
		__HAL_RCC_GPIOE_CLK_ENABLE();
 80014ce:	4b07      	ldr	r3, [pc, #28]	; (80014ec <enableClock+0x9c>)
 80014d0:	699a      	ldr	r2, [r3, #24]
 80014d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80014d6:	619a      	str	r2, [r3, #24]
 80014d8:	699b      	ldr	r3, [r3, #24]
 80014da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014de:	9305      	str	r3, [sp, #20]
 80014e0:	9b05      	ldr	r3, [sp, #20]
}
 80014e2:	e7c5      	b.n	8001470 <enableClock+0x20>
 80014e4:	200000bc 	.word	0x200000bc
 80014e8:	40010800 	.word	0x40010800
 80014ec:	40021000 	.word	0x40021000
 80014f0:	40010c00 	.word	0x40010c00
 80014f4:	40011000 	.word	0x40011000
 80014f8:	40011400 	.word	0x40011400
 80014fc:	40011800 	.word	0x40011800

08001500 <pulseEnable>:
    write4bits(value>>4);
    write4bits(value);
  }
}

void pulseEnable(void) {
 8001500:	b538      	push	{r3, r4, r5, lr}
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8001502:	4d0e      	ldr	r5, [pc, #56]	; (800153c <pulseEnable+0x3c>)
 8001504:	4c0e      	ldr	r4, [pc, #56]	; (8001540 <pulseEnable+0x40>)
 8001506:	8829      	ldrh	r1, [r5, #0]
 8001508:	2200      	movs	r2, #0
 800150a:	6820      	ldr	r0, [r4, #0]
 800150c:	f7ff fab2 	bl	8000a74 <HAL_GPIO_WritePin>
  HAL_Delay(1);    
 8001510:	2001      	movs	r0, #1
 8001512:	f7ff f94b 	bl	80007ac <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_SET);
 8001516:	8829      	ldrh	r1, [r5, #0]
 8001518:	2201      	movs	r2, #1
 800151a:	6820      	ldr	r0, [r4, #0]
 800151c:	f7ff faaa 	bl	8000a74 <HAL_GPIO_WritePin>
  HAL_Delay(1);    // enable pulse must be >450ns
 8001520:	2001      	movs	r0, #1
 8001522:	f7ff f943 	bl	80007ac <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8001526:	6820      	ldr	r0, [r4, #0]
 8001528:	8829      	ldrh	r1, [r5, #0]
 800152a:	2200      	movs	r2, #0
 800152c:	f7ff faa2 	bl	8000a74 <HAL_GPIO_WritePin>
  HAL_Delay(1);   // commands need > 37us to settle
}
 8001530:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Delay(1);   // commands need > 37us to settle
 8001534:	2001      	movs	r0, #1
 8001536:	f7ff b939 	b.w	80007ac <HAL_Delay>
 800153a:	bf00      	nop
 800153c:	200000d4 	.word	0x200000d4
 8001540:	200000bc 	.word	0x200000bc

08001544 <write4bits>:

void write4bits(uint8_t value) {
 8001544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001546:	4607      	mov	r7, r0
  for (int i = 0; i < 4; i++) {
 8001548:	2400      	movs	r4, #0
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 800154a:	4e09      	ldr	r6, [pc, #36]	; (8001570 <write4bits+0x2c>)
 800154c:	4d09      	ldr	r5, [pc, #36]	; (8001574 <write4bits+0x30>)
 800154e:	fa47 f204 	asr.w	r2, r7, r4
 8001552:	f836 1014 	ldrh.w	r1, [r6, r4, lsl #1]
 8001556:	f002 0201 	and.w	r2, r2, #1
 800155a:	6828      	ldr	r0, [r5, #0]
  for (int i = 0; i < 4; i++) {
 800155c:	3401      	adds	r4, #1
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 800155e:	f7ff fa89 	bl	8000a74 <HAL_GPIO_WritePin>
  for (int i = 0; i < 4; i++) {
 8001562:	2c04      	cmp	r4, #4
 8001564:	d1f3      	bne.n	800154e <write4bits+0xa>
  }

  pulseEnable();
}
 8001566:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  pulseEnable();
 800156a:	f7ff bfc9 	b.w	8001500 <pulseEnable>
 800156e:	bf00      	nop
 8001570:	200000c2 	.word	0x200000c2
 8001574:	200000bc 	.word	0x200000bc

08001578 <write8bits>:

void write8bits(uint8_t value) {
 8001578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800157a:	4607      	mov	r7, r0
  for (int i = 0; i < 8; i++) {
 800157c:	2400      	movs	r4, #0
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 800157e:	4e09      	ldr	r6, [pc, #36]	; (80015a4 <write8bits+0x2c>)
 8001580:	4d09      	ldr	r5, [pc, #36]	; (80015a8 <write8bits+0x30>)
 8001582:	fa47 f204 	asr.w	r2, r7, r4
 8001586:	f836 1014 	ldrh.w	r1, [r6, r4, lsl #1]
 800158a:	f002 0201 	and.w	r2, r2, #1
 800158e:	6828      	ldr	r0, [r5, #0]
  for (int i = 0; i < 8; i++) {
 8001590:	3401      	adds	r4, #1
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8001592:	f7ff fa6f 	bl	8000a74 <HAL_GPIO_WritePin>
  for (int i = 0; i < 8; i++) {
 8001596:	2c08      	cmp	r4, #8
 8001598:	d1f3      	bne.n	8001582 <write8bits+0xa>
  }
  
  pulseEnable();
}
 800159a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  pulseEnable();
 800159e:	f7ff bfaf 	b.w	8001500 <pulseEnable>
 80015a2:	bf00      	nop
 80015a4:	200000c2 	.word	0x200000c2
 80015a8:	200000bc 	.word	0x200000bc

080015ac <send>:
void send(uint8_t value, GPIO_PinState mode) {
 80015ac:	b538      	push	{r3, r4, r5, lr}
  HAL_GPIO_WritePin(_port, _rs_pin, mode);
 80015ae:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <send+0x44>)
 80015b0:	4d10      	ldr	r5, [pc, #64]	; (80015f4 <send+0x48>)
 80015b2:	460a      	mov	r2, r1
void send(uint8_t value, GPIO_PinState mode) {
 80015b4:	4604      	mov	r4, r0
  HAL_GPIO_WritePin(_port, _rs_pin, mode);
 80015b6:	8819      	ldrh	r1, [r3, #0]
 80015b8:	6828      	ldr	r0, [r5, #0]
 80015ba:	f7ff fa5b 	bl	8000a74 <HAL_GPIO_WritePin>
  if (_rw_pin != 255) { 
 80015be:	4b0e      	ldr	r3, [pc, #56]	; (80015f8 <send+0x4c>)
 80015c0:	8819      	ldrh	r1, [r3, #0]
 80015c2:	29ff      	cmp	r1, #255	; 0xff
 80015c4:	d003      	beq.n	80015ce <send+0x22>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 80015c6:	2200      	movs	r2, #0
 80015c8:	6828      	ldr	r0, [r5, #0]
 80015ca:	f7ff fa53 	bl	8000a74 <HAL_GPIO_WritePin>
  if (_displayfunction & LCD_8BITMODE) {
 80015ce:	4b0b      	ldr	r3, [pc, #44]	; (80015fc <send+0x50>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	06db      	lsls	r3, r3, #27
 80015d4:	d504      	bpl.n	80015e0 <send+0x34>
    write8bits(value); 
 80015d6:	4620      	mov	r0, r4
}
 80015d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    write8bits(value); 
 80015dc:	f7ff bfcc 	b.w	8001578 <write8bits>
    write4bits(value>>4);
 80015e0:	0920      	lsrs	r0, r4, #4
 80015e2:	f7ff ffaf 	bl	8001544 <write4bits>
    write4bits(value);
 80015e6:	4620      	mov	r0, r4
}
 80015e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    write4bits(value);
 80015ec:	f7ff bfaa 	b.w	8001544 <write4bits>
 80015f0:	200000d6 	.word	0x200000d6
 80015f4:	200000bc 	.word	0x200000bc
 80015f8:	200000b8 	.word	0x200000b8
 80015fc:	200000d3 	.word	0x200000d3

08001600 <command>:
  send(value, GPIO_PIN_RESET);
 8001600:	2100      	movs	r1, #0
 8001602:	f7ff bfd3 	b.w	80015ac <send>

08001606 <clear>:
{
 8001606:	b508      	push	{r3, lr}
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
 8001608:	2001      	movs	r0, #1
 800160a:	f7ff fff9 	bl	8001600 <command>
}
 800160e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_Delay(2);  // this command takes a long time!
 8001612:	2002      	movs	r0, #2
 8001614:	f7ff b8ca 	b.w	80007ac <HAL_Delay>

08001618 <setCursor>:
{
 8001618:	2903      	cmp	r1, #3
 800161a:	bf28      	it	cs
 800161c:	2103      	movcs	r1, #3
  if ( row >= _numlines ) {
 800161e:	4b07      	ldr	r3, [pc, #28]	; (800163c <setCursor+0x24>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	428b      	cmp	r3, r1
    row = _numlines - 1;    // we count rows starting w/0
 8001624:	bf9c      	itt	ls
 8001626:	f103 33ff 	addls.w	r3, r3, #4294967295
 800162a:	b2d9      	uxtbls	r1, r3
  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
 800162c:	4b04      	ldr	r3, [pc, #16]	; (8001640 <setCursor+0x28>)
 800162e:	5c5b      	ldrb	r3, [r3, r1]
 8001630:	4418      	add	r0, r3
 8001632:	f060 007f 	orn	r0, r0, #127	; 0x7f
 8001636:	b2c0      	uxtb	r0, r0
 8001638:	f7ff bfe2 	b.w	8001600 <command>
 800163c:	200000c1 	.word	0x200000c1
 8001640:	200000b4 	.word	0x200000b4

08001644 <display>:
  _displaycontrol |= LCD_DISPLAYON;
 8001644:	4b04      	ldr	r3, [pc, #16]	; (8001658 <display+0x14>)
 8001646:	7818      	ldrb	r0, [r3, #0]
 8001648:	f040 0204 	orr.w	r2, r0, #4
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 800164c:	f040 000c 	orr.w	r0, r0, #12
  _displaycontrol |= LCD_DISPLAYON;
 8001650:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 8001652:	f7ff bfd5 	b.w	8001600 <command>
 8001656:	bf00      	nop
 8001658:	200000c0 	.word	0x200000c0

0800165c <begin>:
void begin(uint8_t cols, uint8_t lines) {
 800165c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  _row_offsets[0] = row0;
 8001660:	2200      	movs	r2, #0
 8001662:	4c55      	ldr	r4, [pc, #340]	; (80017b8 <begin+0x15c>)
  if (lines > 1) {
 8001664:	2901      	cmp	r1, #1
    _displayfunction |= LCD_2LINE;
 8001666:	bf82      	ittt	hi
 8001668:	7823      	ldrbhi	r3, [r4, #0]
 800166a:	f043 0308 	orrhi.w	r3, r3, #8
 800166e:	7023      	strbhi	r3, [r4, #0]
  _numlines = lines;
 8001670:	4b52      	ldr	r3, [pc, #328]	; (80017bc <begin+0x160>)
 8001672:	7019      	strb	r1, [r3, #0]
  _row_offsets[0] = row0;
 8001674:	4b52      	ldr	r3, [pc, #328]	; (80017c0 <begin+0x164>)
 8001676:	701a      	strb	r2, [r3, #0]
  _row_offsets[1] = row1;
 8001678:	2240      	movs	r2, #64	; 0x40
  _row_offsets[2] = row2;
 800167a:	7098      	strb	r0, [r3, #2]
  setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);  
 800167c:	4410      	add	r0, r2
  _row_offsets[1] = row1;
 800167e:	705a      	strb	r2, [r3, #1]
  _row_offsets[3] = row3;
 8001680:	70d8      	strb	r0, [r3, #3]
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 8001682:	4b50      	ldr	r3, [pc, #320]	; (80017c4 <begin+0x168>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	b12b      	cbz	r3, 8001694 <begin+0x38>
 8001688:	2901      	cmp	r1, #1
    _displayfunction |= LCD_5x10DOTS;
 800168a:	bf02      	ittt	eq
 800168c:	7823      	ldrbeq	r3, [r4, #0]
 800168e:	f043 0304 	orreq.w	r3, r3, #4
 8001692:	7023      	strbeq	r3, [r4, #0]
  enableClock();
 8001694:	f7ff fedc 	bl	8001450 <enableClock>
  gpio_init.Speed = GPIO_SPEED_FREQ_HIGH;
 8001698:	2303      	movs	r3, #3
 800169a:	9303      	str	r3, [sp, #12]
  gpio_init.Mode = GPIO_MODE_OUTPUT_PP;
 800169c:	2301      	movs	r3, #1
 800169e:	9301      	str	r3, [sp, #4]
  if(_fourbit_mode)
 80016a0:	4b49      	ldr	r3, [pc, #292]	; (80017c8 <begin+0x16c>)
 80016a2:	4f4a      	ldr	r7, [pc, #296]	; (80017cc <begin+0x170>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	4d4a      	ldr	r5, [pc, #296]	; (80017d0 <begin+0x174>)
 80016a8:	4e4a      	ldr	r6, [pc, #296]	; (80017d4 <begin+0x178>)
 80016aa:	4a4b      	ldr	r2, [pc, #300]	; (80017d8 <begin+0x17c>)
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d059      	beq.n	8001764 <begin+0x108>
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3];
 80016b0:	8829      	ldrh	r1, [r5, #0]
 80016b2:	883b      	ldrh	r3, [r7, #0]
 80016b4:	430b      	orrs	r3, r1
 80016b6:	8831      	ldrh	r1, [r6, #0]
 80016b8:	430b      	orrs	r3, r1
 80016ba:	8811      	ldrh	r1, [r2, #0]
 80016bc:	430b      	orrs	r3, r1
 80016be:	8851      	ldrh	r1, [r2, #2]
 80016c0:	430b      	orrs	r3, r1
 80016c2:	8891      	ldrh	r1, [r2, #4]
 80016c4:	88d2      	ldrh	r2, [r2, #6]
 80016c6:	430b      	orrs	r3, r1
  HAL_GPIO_Init(_port, &gpio_init);
 80016c8:	f8df 8118 	ldr.w	r8, [pc, #280]	; 80017e4 <begin+0x188>
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 80016cc:	4313      	orrs	r3, r2
 80016ce:	b29b      	uxth	r3, r3
  HAL_GPIO_Init(_port, &gpio_init);
 80016d0:	4669      	mov	r1, sp
 80016d2:	f8d8 0000 	ldr.w	r0, [r8]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 80016d6:	9300      	str	r3, [sp, #0]
  HAL_GPIO_Init(_port, &gpio_init);
 80016d8:	f7ff f8e4 	bl	80008a4 <HAL_GPIO_Init>
  HAL_Delay(50); 
 80016dc:	2032      	movs	r0, #50	; 0x32
 80016de:	f7ff f865 	bl	80007ac <HAL_Delay>
  HAL_GPIO_WritePin(_port, _rs_pin, GPIO_PIN_RESET);
 80016e2:	2200      	movs	r2, #0
 80016e4:	8839      	ldrh	r1, [r7, #0]
 80016e6:	f8d8 0000 	ldr.w	r0, [r8]
 80016ea:	f7ff f9c3 	bl	8000a74 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 80016ee:	8831      	ldrh	r1, [r6, #0]
 80016f0:	2200      	movs	r2, #0
 80016f2:	f8d8 0000 	ldr.w	r0, [r8]
 80016f6:	f7ff f9bd 	bl	8000a74 <HAL_GPIO_WritePin>
  if (_rw_pin != 255) { 
 80016fa:	8829      	ldrh	r1, [r5, #0]
 80016fc:	29ff      	cmp	r1, #255	; 0xff
 80016fe:	d004      	beq.n	800170a <begin+0xae>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 8001700:	2200      	movs	r2, #0
 8001702:	f8d8 0000 	ldr.w	r0, [r8]
 8001706:	f7ff f9b5 	bl	8000a74 <HAL_GPIO_WritePin>
  if (! (_displayfunction & LCD_8BITMODE)) {
 800170a:	7820      	ldrb	r0, [r4, #0]
 800170c:	06c3      	lsls	r3, r0, #27
 800170e:	d43e      	bmi.n	800178e <begin+0x132>
    write4bits(0x03);
 8001710:	2003      	movs	r0, #3
 8001712:	f7ff ff17 	bl	8001544 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8001716:	2005      	movs	r0, #5
 8001718:	f7ff f848 	bl	80007ac <HAL_Delay>
    write4bits(0x03);
 800171c:	2003      	movs	r0, #3
 800171e:	f7ff ff11 	bl	8001544 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8001722:	2005      	movs	r0, #5
 8001724:	f7ff f842 	bl	80007ac <HAL_Delay>
    write4bits(0x03); 
 8001728:	2003      	movs	r0, #3
 800172a:	f7ff ff0b 	bl	8001544 <write4bits>
    HAL_Delay(1);
 800172e:	2001      	movs	r0, #1
 8001730:	f7ff f83c 	bl	80007ac <HAL_Delay>
    write4bits(0x02); 
 8001734:	2002      	movs	r0, #2
 8001736:	f7ff ff05 	bl	8001544 <write4bits>
  command(LCD_FUNCTIONSET | _displayfunction);  
 800173a:	7820      	ldrb	r0, [r4, #0]
 800173c:	f040 0020 	orr.w	r0, r0, #32
 8001740:	f7ff ff5e 	bl	8001600 <command>
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;  
 8001744:	2204      	movs	r2, #4
 8001746:	4b25      	ldr	r3, [pc, #148]	; (80017dc <begin+0x180>)
 8001748:	701a      	strb	r2, [r3, #0]
  display();
 800174a:	f7ff ff7b 	bl	8001644 <display>
  clear();
 800174e:	f7ff ff5a 	bl	8001606 <clear>
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8001752:	2202      	movs	r2, #2
 8001754:	4b22      	ldr	r3, [pc, #136]	; (80017e0 <begin+0x184>)
  command(LCD_ENTRYMODESET | _displaymode);
 8001756:	2006      	movs	r0, #6
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8001758:	701a      	strb	r2, [r3, #0]
  command(LCD_ENTRYMODESET | _displaymode);
 800175a:	f7ff ff51 	bl	8001600 <command>
}
 800175e:	b004      	add	sp, #16
 8001760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8001764:	8829      	ldrh	r1, [r5, #0]
 8001766:	883b      	ldrh	r3, [r7, #0]
 8001768:	430b      	orrs	r3, r1
 800176a:	8831      	ldrh	r1, [r6, #0]
 800176c:	430b      	orrs	r3, r1
 800176e:	8811      	ldrh	r1, [r2, #0]
 8001770:	430b      	orrs	r3, r1
 8001772:	8851      	ldrh	r1, [r2, #2]
 8001774:	430b      	orrs	r3, r1
 8001776:	8891      	ldrh	r1, [r2, #4]
 8001778:	430b      	orrs	r3, r1
 800177a:	88d1      	ldrh	r1, [r2, #6]
 800177c:	430b      	orrs	r3, r1
 800177e:	8911      	ldrh	r1, [r2, #8]
 8001780:	430b      	orrs	r3, r1
 8001782:	8951      	ldrh	r1, [r2, #10]
 8001784:	430b      	orrs	r3, r1
 8001786:	8991      	ldrh	r1, [r2, #12]
 8001788:	89d2      	ldrh	r2, [r2, #14]
 800178a:	430b      	orrs	r3, r1
 800178c:	e79c      	b.n	80016c8 <begin+0x6c>
    command(LCD_FUNCTIONSET | _displayfunction);
 800178e:	f040 0020 	orr.w	r0, r0, #32
 8001792:	f7ff ff35 	bl	8001600 <command>
    HAL_Delay(5);  // wait more than 4.1ms
 8001796:	2005      	movs	r0, #5
 8001798:	f7ff f808 	bl	80007ac <HAL_Delay>
    command(LCD_FUNCTIONSET | _displayfunction);
 800179c:	7820      	ldrb	r0, [r4, #0]
 800179e:	f040 0020 	orr.w	r0, r0, #32
 80017a2:	f7ff ff2d 	bl	8001600 <command>
    HAL_Delay(1);
 80017a6:	2001      	movs	r0, #1
 80017a8:	f7ff f800 	bl	80007ac <HAL_Delay>
    command(LCD_FUNCTIONSET | _displayfunction);
 80017ac:	7820      	ldrb	r0, [r4, #0]
 80017ae:	f040 0020 	orr.w	r0, r0, #32
 80017b2:	f7ff ff25 	bl	8001600 <command>
 80017b6:	e7c0      	b.n	800173a <begin+0xde>
 80017b8:	200000d3 	.word	0x200000d3
 80017bc:	200000c1 	.word	0x200000c1
 80017c0:	200000b4 	.word	0x200000b4
 80017c4:	200000a0 	.word	0x200000a0
 80017c8:	20000008 	.word	0x20000008
 80017cc:	200000d6 	.word	0x200000d6
 80017d0:	200000b8 	.word	0x200000b8
 80017d4:	200000d4 	.word	0x200000d4
 80017d8:	200000c2 	.word	0x200000c2
 80017dc:	200000c0 	.word	0x200000c0
 80017e0:	200000d2 	.word	0x200000d2
 80017e4:	200000bc 	.word	0x200000bc

080017e8 <init>:
{
 80017e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  _rs_pin = rs;
 80017ec:	f8df b07c 	ldr.w	fp, [pc, #124]	; 800186c <init+0x84>
{
 80017f0:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
  _rs_pin = rs;
 80017f4:	f8ab 2000 	strh.w	r2, [fp]
  _rw_pin = rw;
 80017f8:	4a17      	ldr	r2, [pc, #92]	; (8001858 <init+0x70>)
{
 80017fa:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
  _rw_pin = rw;
 80017fe:	8013      	strh	r3, [r2, #0]
  _enable_pin = enable;
 8001800:	4b16      	ldr	r3, [pc, #88]	; (800185c <init+0x74>)
{
 8001802:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  _enable_pin = enable;
 8001806:	f8a3 a000 	strh.w	sl, [r3]
  _port = gpioport;
 800180a:	4b15      	ldr	r3, [pc, #84]	; (8001860 <init+0x78>)
{
 800180c:	f8bd c030 	ldrh.w	ip, [sp, #48]	; 0x30
  _port = gpioport;
 8001810:	6019      	str	r1, [r3, #0]
{
 8001812:	f8bd e034 	ldrh.w	lr, [sp, #52]	; 0x34
  _data_pins[0] = d0;
 8001816:	4b13      	ldr	r3, [pc, #76]	; (8001864 <init+0x7c>)
{
 8001818:	f8bd 7038 	ldrh.w	r7, [sp, #56]	; 0x38
 800181c:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 8001820:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 8001824:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
  _data_pins[0] = d0;
 8001828:	f8a3 9000 	strh.w	r9, [r3]
  _data_pins[1] = d1;
 800182c:	f8a3 8002 	strh.w	r8, [r3, #2]
  _data_pins[2] = d2;
 8001830:	f8a3 c004 	strh.w	ip, [r3, #4]
  _data_pins[3] = d3; 
 8001834:	f8a3 e006 	strh.w	lr, [r3, #6]
  _data_pins[4] = d4;
 8001838:	811f      	strh	r7, [r3, #8]
  _data_pins[5] = d5;
 800183a:	815e      	strh	r6, [r3, #10]
  _data_pins[6] = d6;
 800183c:	819d      	strh	r5, [r3, #12]
  _data_pins[7] = d7;
 800183e:	81dc      	strh	r4, [r3, #14]
 8001840:	4b09      	ldr	r3, [pc, #36]	; (8001868 <init+0x80>)
  if (fourbitmode)
 8001842:	b138      	cbz	r0, 8001854 <init+0x6c>
    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8001844:	2200      	movs	r2, #0
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8001846:	701a      	strb	r2, [r3, #0]
  begin(16, 2);
 8001848:	2102      	movs	r1, #2
}
 800184a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  begin(16, 2);
 800184e:	2010      	movs	r0, #16
 8001850:	f7ff bf04 	b.w	800165c <begin>
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8001854:	2210      	movs	r2, #16
 8001856:	e7f6      	b.n	8001846 <init+0x5e>
 8001858:	200000b8 	.word	0x200000b8
 800185c:	200000d4 	.word	0x200000d4
 8001860:	200000bc 	.word	0x200000bc
 8001864:	200000c2 	.word	0x200000c2
 8001868:	200000d3 	.word	0x200000d3
 800186c:	200000d6 	.word	0x200000d6

08001870 <LiquidCrystal>:
{
 8001870:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001872:	4605      	mov	r5, r0
  if(_fourbit_mode)
 8001874:	4814      	ldr	r0, [pc, #80]	; (80018c8 <LiquidCrystal+0x58>)
{
 8001876:	b08b      	sub	sp, #44	; 0x2c
  if(_fourbit_mode)
 8001878:	7800      	ldrb	r0, [r0, #0]
{
 800187a:	f8bd 6040 	ldrh.w	r6, [sp, #64]	; 0x40
 800187e:	f8bd 7044 	ldrh.w	r7, [sp, #68]	; 0x44
 8001882:	f8bd e048 	ldrh.w	lr, [sp, #72]	; 0x48
 8001886:	f8bd c04c 	ldrh.w	ip, [sp, #76]	; 0x4c
  if(_fourbit_mode)
 800188a:	b180      	cbz	r0, 80018ae <LiquidCrystal+0x3e>
    init(1, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 800188c:	2400      	movs	r4, #0
 800188e:	e88d 40c8 	stmia.w	sp, {r3, r6, r7, lr}
 8001892:	2001      	movs	r0, #1
 8001894:	4613      	mov	r3, r2
 8001896:	460a      	mov	r2, r1
 8001898:	4629      	mov	r1, r5
 800189a:	9408      	str	r4, [sp, #32]
 800189c:	9407      	str	r4, [sp, #28]
 800189e:	9406      	str	r4, [sp, #24]
 80018a0:	9405      	str	r4, [sp, #20]
 80018a2:	f8cd c010 	str.w	ip, [sp, #16]
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 80018a6:	f7ff ff9f 	bl	80017e8 <init>
}
 80018aa:	b00b      	add	sp, #44	; 0x2c
 80018ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 80018ae:	e88d 40c8 	stmia.w	sp, {r3, r6, r7, lr}
 80018b2:	9008      	str	r0, [sp, #32]
 80018b4:	4613      	mov	r3, r2
 80018b6:	9007      	str	r0, [sp, #28]
 80018b8:	460a      	mov	r2, r1
 80018ba:	9006      	str	r0, [sp, #24]
 80018bc:	9005      	str	r0, [sp, #20]
 80018be:	f8cd c010 	str.w	ip, [sp, #16]
 80018c2:	4629      	mov	r1, r5
 80018c4:	e7ef      	b.n	80018a6 <LiquidCrystal+0x36>
 80018c6:	bf00      	nop
 80018c8:	20000008 	.word	0x20000008

080018cc <blink>:
  _displaycontrol |= LCD_BLINKON;
 80018cc:	4b04      	ldr	r3, [pc, #16]	; (80018e0 <blink+0x14>)
 80018ce:	7818      	ldrb	r0, [r3, #0]
 80018d0:	f040 0201 	orr.w	r2, r0, #1
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 80018d4:	f040 0009 	orr.w	r0, r0, #9
  _displaycontrol |= LCD_BLINKON;
 80018d8:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 80018da:	f7ff be91 	b.w	8001600 <command>
 80018de:	bf00      	nop
 80018e0:	200000c0 	.word	0x200000c0

080018e4 <print>:
size_t print(const char str[]) {
 80018e4:	b570      	push	{r4, r5, r6, lr}
  if (str == NULL) return 0;
 80018e6:	4604      	mov	r4, r0
 80018e8:	b168      	cbz	r0, 8001906 <print+0x22>
  size_t size = strlen(str);
 80018ea:	f7fe fc91 	bl	8000210 <strlen>
 80018ee:	4605      	mov	r5, r0
 80018f0:	1826      	adds	r6, r4, r0
  while (size--) {
 80018f2:	42b4      	cmp	r4, r6
 80018f4:	d101      	bne.n	80018fa <print+0x16>
}
 80018f6:	4628      	mov	r0, r5
 80018f8:	bd70      	pop	{r4, r5, r6, pc}
  send(value, GPIO_PIN_SET);
 80018fa:	2101      	movs	r1, #1
 80018fc:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001900:	f7ff fe54 	bl	80015ac <send>
 8001904:	e7f5      	b.n	80018f2 <print+0xe>
  if (str == NULL) return 0;
 8001906:	4605      	mov	r5, r0
 8001908:	e7f5      	b.n	80018f6 <print+0x12>
	...

0800190c <GetTimeType>:

#include "Menu.h"

char* GetTimeType(int value)
{
	if(value == centi)
 800190c:	b150      	cbz	r0, 8001924 <GetTimeType+0x18>
	{
		return "centi ";
	}else if(value == seconds)
 800190e:	2801      	cmp	r0, #1
 8001910:	d00a      	beq.n	8001928 <GetTimeType+0x1c>
	{
		return "sec   ";
	}else if(value == minutes)
 8001912:	2802      	cmp	r0, #2
 8001914:	d00a      	beq.n	800192c <GetTimeType+0x20>
		return "min   ";
	}else if(value == hours)
	{
		return "hr    ";
	}
	return "NONE  ";
 8001916:	4a06      	ldr	r2, [pc, #24]	; (8001930 <GetTimeType+0x24>)
 8001918:	4b06      	ldr	r3, [pc, #24]	; (8001934 <GetTimeType+0x28>)
 800191a:	2803      	cmp	r0, #3
 800191c:	bf0c      	ite	eq
 800191e:	4618      	moveq	r0, r3
 8001920:	4610      	movne	r0, r2
 8001922:	4770      	bx	lr
		return "centi ";
 8001924:	4804      	ldr	r0, [pc, #16]	; (8001938 <GetTimeType+0x2c>)
 8001926:	4770      	bx	lr
		return "sec   ";
 8001928:	4804      	ldr	r0, [pc, #16]	; (800193c <GetTimeType+0x30>)
 800192a:	4770      	bx	lr
		return "min   ";
 800192c:	4804      	ldr	r0, [pc, #16]	; (8001940 <GetTimeType+0x34>)
}
 800192e:	4770      	bx	lr
 8001930:	08002918 	.word	0x08002918
 8001934:	08002911 	.word	0x08002911
 8001938:	080028fc 	.word	0x080028fc
 800193c:	08002903 	.word	0x08002903
 8001940:	0800290a 	.word	0x0800290a

08001944 <GetDesiredPeriod>:
 */

#include "Timer.h"

int GetDesiredPeriod(float DesiredDelay,int currentPrescaler)//seconds(desired second for period)
{
 8001944:	b538      	push	{r3, r4, r5, lr}
 8001946:	460d      	mov	r5, r1
	int clockspeed = 62500;//clock speed not sure how to get will change
	int period = 0;
	period = ((DesiredDelay * clockspeed) / (currentPrescaler + 1));
 8001948:	490a      	ldr	r1, [pc, #40]	; (8001974 <GetDesiredPeriod+0x30>)
 800194a:	f7fe fd77 	bl	800043c <__aeabi_fmul>
 800194e:	4604      	mov	r4, r0
 8001950:	1c68      	adds	r0, r5, #1
 8001952:	f7fe fd1f 	bl	8000394 <__aeabi_i2f>
 8001956:	4601      	mov	r1, r0
 8001958:	4620      	mov	r0, r4
 800195a:	f7fe fe23 	bl	80005a4 <__aeabi_fdiv>
 800195e:	f7fe febd 	bl	80006dc <__aeabi_f2iz>
 8001962:	2801      	cmp	r0, #1
		period = INT_16BIT_MAX - 1;
	if(period <= 0)
		period = 1;

	return period;
}
 8001964:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001968:	bfb8      	it	lt
 800196a:	2001      	movlt	r0, #1
 800196c:	4298      	cmp	r0, r3
 800196e:	bfa8      	it	ge
 8001970:	4618      	movge	r0, r3
 8001972:	bd38      	pop	{r3, r4, r5, pc}
 8001974:	47742400 	.word	0x47742400

08001978 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001978:	b500      	push	{lr}
 800197a:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800197c:	2228      	movs	r2, #40	; 0x28
 800197e:	2100      	movs	r1, #0
 8001980:	a806      	add	r0, sp, #24
 8001982:	f000 fb6b 	bl	800205c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001986:	2214      	movs	r2, #20
 8001988:	2100      	movs	r1, #0
 800198a:	a801      	add	r0, sp, #4
 800198c:	f000 fb66 	bl	800205c <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001990:	2302      	movs	r3, #2
 8001992:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001994:	2301      	movs	r3, #1
 8001996:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001998:	2310      	movs	r3, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800199a:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800199c:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800199e:	f7ff f881 	bl	8000aa4 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019a2:	230f      	movs	r3, #15
 80019a4:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV16;
 80019a6:	23b0      	movs	r3, #176	; 0xb0
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80019a8:	2100      	movs	r1, #0
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV16;
 80019aa:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 80019ac:	f44f 63e0 	mov.w	r3, #1792	; 0x700
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80019b0:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80019b2:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 80019b4:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019b6:	9105      	str	r1, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80019b8:	f7ff fa56 	bl	8000e68 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 80019bc:	b011      	add	sp, #68	; 0x44
 80019be:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080019c4 <main>:
{
 80019c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80019c8:	b096      	sub	sp, #88	; 0x58
  HAL_Init();
 80019ca:	f7fe fed1 	bl	8000770 <HAL_Init>
  SystemClock_Config();
 80019ce:	f7ff ffd3 	bl	8001978 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d2:	2210      	movs	r2, #16
 80019d4:	2100      	movs	r1, #0
 80019d6:	a809      	add	r0, sp, #36	; 0x24
 80019d8:	f000 fb40 	bl	800205c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019dc:	4b7a      	ldr	r3, [pc, #488]	; (8001bc8 <main+0x204>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3|LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 80019de:	f44f 7142 	mov.w	r1, #776	; 0x308
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019e2:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3|LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 80019e4:	4879      	ldr	r0, [pc, #484]	; (8001bcc <main+0x208>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019e6:	f042 0210 	orr.w	r2, r2, #16
 80019ea:	619a      	str	r2, [r3, #24]
 80019ec:	699a      	ldr	r2, [r3, #24]
                          |GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80019ee:	2502      	movs	r5, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019f0:	f002 0210 	and.w	r2, r2, #16
 80019f4:	9204      	str	r2, [sp, #16]
 80019f6:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019f8:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : PC3 LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_3|LD4_Pin|LD3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fa:	2400      	movs	r4, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019fc:	f042 0220 	orr.w	r2, r2, #32
 8001a00:	619a      	str	r2, [r3, #24]
 8001a02:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a04:	2701      	movs	r7, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a06:	f002 0220 	and.w	r2, r2, #32
 8001a0a:	9205      	str	r2, [sp, #20]
 8001a0c:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a0e:	699a      	ldr	r2, [r3, #24]
  htim7.Instance = TIM7;
 8001a10:	4e6f      	ldr	r6, [pc, #444]	; (8001bd0 <main+0x20c>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a12:	f042 0204 	orr.w	r2, r2, #4
 8001a16:	619a      	str	r2, [r3, #24]
 8001a18:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3|LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001a1a:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a1c:	f003 0304 	and.w	r3, r3, #4
 8001a20:	9306      	str	r3, [sp, #24]
 8001a22:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3|LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001a24:	f7ff f826 	bl	8000a74 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f44f 411f 	mov.w	r1, #40704	; 0x9f00
 8001a2e:	4869      	ldr	r0, [pc, #420]	; (8001bd4 <main+0x210>)
 8001a30:	f7ff f820 	bl	8000a74 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001a34:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001a38:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a3a:	4b67      	ldr	r3, [pc, #412]	; (8001bd8 <main+0x214>)
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a3c:	a909      	add	r1, sp, #36	; 0x24
 8001a3e:	4863      	ldr	r0, [pc, #396]	; (8001bcc <main+0x208>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a40:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a42:	950b      	str	r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a44:	f7fe ff2e 	bl	80008a4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_3|LD4_Pin|LD3_Pin;
 8001a48:	f44f 7342 	mov.w	r3, #776	; 0x308
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a4c:	a909      	add	r1, sp, #36	; 0x24
 8001a4e:	485f      	ldr	r0, [pc, #380]	; (8001bcc <main+0x208>)
  GPIO_InitStruct.Pin = GPIO_PIN_3|LD4_Pin|LD3_Pin;
 8001a50:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a52:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a54:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a56:	970a      	str	r7, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a58:	f7fe ff24 	bl	80008a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11 
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8001a5c:	f44f 431f 	mov.w	r3, #40704	; 0x9f00
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a60:	a909      	add	r1, sp, #36	; 0x24
 8001a62:	485c      	ldr	r0, [pc, #368]	; (8001bd4 <main+0x210>)
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8001a64:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a66:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a68:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a6a:	970a      	str	r7, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a6c:	f7fe ff1a 	bl	80008a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001a70:	4622      	mov	r2, r4
 8001a72:	4621      	mov	r1, r4
 8001a74:	2028      	movs	r0, #40	; 0x28
 8001a76:	f7fe febd 	bl	80007f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a7a:	2028      	movs	r0, #40	; 0x28
  htim4.Instance = TIM4;
 8001a7c:	4d57      	ldr	r5, [pc, #348]	; (8001bdc <main+0x218>)
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a7e:	f7fe feed 	bl	800085c <HAL_NVIC_EnableIRQ>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a82:	221c      	movs	r2, #28
 8001a84:	4621      	mov	r1, r4
 8001a86:	a809      	add	r0, sp, #36	; 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a88:	9407      	str	r4, [sp, #28]
 8001a8a:	9408      	str	r4, [sp, #32]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a8c:	f000 fae6 	bl	800205c <memset>
  htim4.Instance = TIM4;
 8001a90:	4b53      	ldr	r3, [pc, #332]	; (8001be0 <main+0x21c>)
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8001a92:	4628      	mov	r0, r5
  htim4.Init.Prescaler = 0;
 8001a94:	e885 0018 	stmia.w	r5, {r3, r4}
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a98:	60ac      	str	r4, [r5, #8]
  htim4.Init.Period = 0;
 8001a9a:	60ec      	str	r4, [r5, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a9c:	612c      	str	r4, [r5, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a9e:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8001aa0:	f7ff fc34 	bl	800130c <HAL_TIM_OC_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001aa4:	a907      	add	r1, sp, #28
 8001aa6:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aa8:	9407      	str	r4, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aaa:	9408      	str	r4, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001aac:	f7ff fcb0 	bl	8001410 <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ab0:	4622      	mov	r2, r4
 8001ab2:	a909      	add	r1, sp, #36	; 0x24
 8001ab4:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001ab6:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001ab8:	940a      	str	r4, [sp, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001aba:	940b      	str	r4, [sp, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001abc:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001abe:	f7ff fc79 	bl	80013b4 <HAL_TIM_OC_ConfigChannel>
  int period = GetDesiredPeriod(10,prescaler);
 8001ac2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001ac6:	4847      	ldr	r0, [pc, #284]	; (8001be4 <main+0x220>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ac8:	9409      	str	r4, [sp, #36]	; 0x24
 8001aca:	940a      	str	r4, [sp, #40]	; 0x28
  int period = GetDesiredPeriod(10,prescaler);
 8001acc:	f7ff ff3a 	bl	8001944 <GetDesiredPeriod>
  htim7.Init.Prescaler = prescaler;
 8001ad0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ad4:	4a44      	ldr	r2, [pc, #272]	; (8001be8 <main+0x224>)
  htim7.Init.Period = period;
 8001ad6:	60f0      	str	r0, [r6, #12]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001ad8:	4630      	mov	r0, r6
  htim7.Init.Prescaler = prescaler;
 8001ada:	e886 000c 	stmia.w	r6, {r2, r3}
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ade:	60b4      	str	r4, [r6, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ae0:	61b4      	str	r4, [r6, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001ae2:	f7ff fbf9 	bl	80012d8 <HAL_TIM_Base_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001ae6:	a909      	add	r1, sp, #36	; 0x24
 8001ae8:	4630      	mov	r0, r6
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aea:	9409      	str	r4, [sp, #36]	; 0x24
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aec:	940a      	str	r4, [sp, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001aee:	f7ff fc8f 	bl	8001410 <HAL_TIMEx_MasterConfigSynchronization>
  HAL_TIM_Base_Start_IT(&htim7);
 8001af2:	4630      	mov	r0, r6
 8001af4:	f7ff fad2 	bl	800109c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8001af8:	4628      	mov	r0, r5
 8001afa:	f7ff facf 	bl	800109c <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,1);//set high to keep current going through NO(Normally Open)
 8001afe:	463a      	mov	r2, r7
 8001b00:	2108      	movs	r1, #8
 8001b02:	4832      	ldr	r0, [pc, #200]	; (8001bcc <main+0x208>)
 8001b04:	f7fe ffb6 	bl	8000a74 <HAL_GPIO_WritePin>
  LiquidCrystal(GPIOA, GPIO_PIN_15, 0, GPIO_PIN_12, GPIO_PIN_11, GPIO_PIN_10, GPIO_PIN_9, GPIO_PIN_8);
 8001b08:	f44f 7580 	mov.w	r5, #256	; 0x100
 8001b0c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001b10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b18:	4622      	mov	r2, r4
  displayChange = true;
 8001b1a:	4c34      	ldr	r4, [pc, #208]	; (8001bec <main+0x228>)
  LiquidCrystal(GPIOA, GPIO_PIN_15, 0, GPIO_PIN_12, GPIO_PIN_11, GPIO_PIN_10, GPIO_PIN_9, GPIO_PIN_8);
 8001b1c:	e88d 002b 	stmia.w	sp, {r0, r1, r3, r5}
		int size1 = sprintf(str, "timer%s %-2d %-3u", currectTimerState == 0? "Off" : "On", currentTimer, timersTic[currectTimerState][currentTimer]);
 8001b20:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 8001c08 <main+0x244>
  LiquidCrystal(GPIOA, GPIO_PIN_15, 0, GPIO_PIN_12, GPIO_PIN_11, GPIO_PIN_10, GPIO_PIN_9, GPIO_PIN_8);
 8001b24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b2c:	4829      	ldr	r0, [pc, #164]	; (8001bd4 <main+0x210>)
		int size1 = sprintf(str, "timer%s %-2d %-3u", currectTimerState == 0? "Off" : "On", currentTimer, timersTic[currectTimerState][currentTimer]);
 8001b2e:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 8001c0c <main+0x248>
  LiquidCrystal(GPIOA, GPIO_PIN_15, 0, GPIO_PIN_12, GPIO_PIN_11, GPIO_PIN_10, GPIO_PIN_9, GPIO_PIN_8);
 8001b32:	f7ff fe9d 	bl	8001870 <LiquidCrystal>
  displayChange = true;
 8001b36:	7027      	strb	r7, [r4, #0]
	  if(displayChange)
 8001b38:	7823      	ldrb	r3, [r4, #0]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d041      	beq.n	8001bc2 <main+0x1fe>
		displayChange = false;
 8001b3e:	2700      	movs	r7, #0
		int size1 = sprintf(str, "timer%s %-2d %-3u", currectTimerState == 0? "Off" : "On", currentTimer, timersTic[currectTimerState][currentTimer]);
 8001b40:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 8001c10 <main+0x24c>
		setCursor(0, 0);
 8001b44:	4639      	mov	r1, r7
 8001b46:	4638      	mov	r0, r7
		displayChange = false;
 8001b48:	7027      	strb	r7, [r4, #0]
		setCursor(0, 0);
 8001b4a:	f7ff fd65 	bl	8001618 <setCursor>
		int size1 = sprintf(str, "timer%s %-2d %-3u", currectTimerState == 0? "Off" : "On", currentTimer, timersTic[currectTimerState][currentTimer]);
 8001b4e:	f8d8 2000 	ldr.w	r2, [r8]
 8001b52:	4927      	ldr	r1, [pc, #156]	; (8001bf0 <main+0x22c>)
 8001b54:	f8da 3000 	ldr.w	r3, [sl]
 8001b58:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8001b5c:	5cc9      	ldrb	r1, [r1, r3]
 8001b5e:	4e25      	ldr	r6, [pc, #148]	; (8001bf4 <main+0x230>)
 8001b60:	9100      	str	r1, [sp, #0]
 8001b62:	42ba      	cmp	r2, r7
 8001b64:	bf0c      	ite	eq
 8001b66:	464a      	moveq	r2, r9
 8001b68:	4632      	movne	r2, r6
 8001b6a:	4923      	ldr	r1, [pc, #140]	; (8001bf8 <main+0x234>)
 8001b6c:	a809      	add	r0, sp, #36	; 0x24
 8001b6e:	f000 fa7d 	bl	800206c <siprintf>
 8001b72:	4605      	mov	r5, r0
		print(str);
 8001b74:	a809      	add	r0, sp, #36	; 0x24
 8001b76:	f7ff feb5 	bl	80018e4 <print>
		setCursor(0, 1);
 8001b7a:	2101      	movs	r1, #1
 8001b7c:	4638      	mov	r0, r7
 8001b7e:	f7ff fd4b 	bl	8001618 <setCursor>
		int size2 = sprintf(str, "type%s %-2d %s", currectTimerState == 0? "Off" : "On", currentTimer, GetTimeType(timersType[currectTimerState][currentTimer]));
 8001b82:	f8d8 3000 	ldr.w	r3, [r8]
 8001b86:	4a1d      	ldr	r2, [pc, #116]	; (8001bfc <main+0x238>)
 8001b88:	42bb      	cmp	r3, r7
 8001b8a:	bf08      	it	eq
 8001b8c:	464e      	moveq	r6, r9
 8001b8e:	f8da 7000 	ldr.w	r7, [sl]
 8001b92:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001b96:	5dd0      	ldrb	r0, [r2, r7]
 8001b98:	f7ff feb8 	bl	800190c <GetTimeType>
 8001b9c:	463b      	mov	r3, r7
 8001b9e:	4632      	mov	r2, r6
 8001ba0:	4917      	ldr	r1, [pc, #92]	; (8001c00 <main+0x23c>)
 8001ba2:	9000      	str	r0, [sp, #0]
 8001ba4:	a809      	add	r0, sp, #36	; 0x24
 8001ba6:	f000 fa61 	bl	800206c <siprintf>
 8001baa:	4606      	mov	r6, r0
		print(str);
 8001bac:	a809      	add	r0, sp, #36	; 0x24
 8001bae:	f7ff fe99 	bl	80018e4 <print>
		setCursor((timerState? size2 : size1) - 3, timerState);
 8001bb2:	4b14      	ldr	r3, [pc, #80]	; (8001c04 <main+0x240>)
 8001bb4:	6819      	ldr	r1, [r3, #0]
 8001bb6:	b129      	cbz	r1, 8001bc4 <main+0x200>
 8001bb8:	1ef0      	subs	r0, r6, #3
 8001bba:	f7ff fd2d 	bl	8001618 <setCursor>
		blink();
 8001bbe:	f7ff fe85 	bl	80018cc <blink>
	  if(displayChange)
 8001bc2:	e7b9      	b.n	8001b38 <main+0x174>
		setCursor((timerState? size2 : size1) - 3, timerState);
 8001bc4:	1ee8      	subs	r0, r5, #3
 8001bc6:	e7f8      	b.n	8001bba <main+0x1f6>
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	40011000 	.word	0x40011000
 8001bd0:	20000130 	.word	0x20000130
 8001bd4:	40010800 	.word	0x40010800
 8001bd8:	10110000 	.word	0x10110000
 8001bdc:	200000e4 	.word	0x200000e4
 8001be0:	40000800 	.word	0x40000800
 8001be4:	41200000 	.word	0x41200000
 8001be8:	40001400 	.word	0x40001400
 8001bec:	20000124 	.word	0x20000124
 8001bf0:	2000000a 	.word	0x2000000a
 8001bf4:	08002923 	.word	0x08002923
 8001bf8:	08002926 	.word	0x08002926
 8001bfc:	20000012 	.word	0x20000012
 8001c00:	08002938 	.word	0x08002938
 8001c04:	2000012c 	.word	0x2000012c
 8001c08:	20000128 	.word	0x20000128
 8001c0c:	0800291f 	.word	0x0800291f
 8001c10:	200000e0 	.word	0x200000e0

08001c14 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c14:	4b0e      	ldr	r3, [pc, #56]	; (8001c50 <HAL_MspInit+0x3c>)
{
 8001c16:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c18:	699a      	ldr	r2, [r3, #24]
 8001c1a:	f042 0201 	orr.w	r2, r2, #1
 8001c1e:	619a      	str	r2, [r3, #24]
 8001c20:	699a      	ldr	r2, [r3, #24]
 8001c22:	f002 0201 	and.w	r2, r2, #1
 8001c26:	9200      	str	r2, [sp, #0]
 8001c28:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c2a:	69da      	ldr	r2, [r3, #28]
 8001c2c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c30:	61da      	str	r2, [r3, #28]
 8001c32:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c34:	4a07      	ldr	r2, [pc, #28]	; (8001c54 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c3a:	9301      	str	r3, [sp, #4]
 8001c3c:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c3e:	6853      	ldr	r3, [r2, #4]
 8001c40:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001c44:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c48:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c4a:	b002      	add	sp, #8
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	40021000 	.word	0x40021000
 8001c54:	40010000 	.word	0x40010000

08001c58 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8001c58:	b507      	push	{r0, r1, r2, lr}
  if(htim_oc->Instance==TIM4)
 8001c5a:	4b0d      	ldr	r3, [pc, #52]	; (8001c90 <HAL_TIM_OC_MspInit+0x38>)
 8001c5c:	6802      	ldr	r2, [r0, #0]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d112      	bne.n	8001c88 <HAL_TIM_OC_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c62:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001c66:	69da      	ldr	r2, [r3, #28]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001c68:	201e      	movs	r0, #30
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c6a:	f042 0204 	orr.w	r2, r2, #4
 8001c6e:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001c70:	2200      	movs	r2, #0
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c72:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001c74:	4611      	mov	r1, r2
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c76:	f003 0304 	and.w	r3, r3, #4
 8001c7a:	9301      	str	r3, [sp, #4]
 8001c7c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001c7e:	f7fe fdb9 	bl	80007f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001c82:	201e      	movs	r0, #30
 8001c84:	f7fe fdea 	bl	800085c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001c88:	b003      	add	sp, #12
 8001c8a:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c8e:	bf00      	nop
 8001c90:	40000800 	.word	0x40000800

08001c94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c94:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM7)
 8001c96:	4b0d      	ldr	r3, [pc, #52]	; (8001ccc <HAL_TIM_Base_MspInit+0x38>)
 8001c98:	6802      	ldr	r2, [r0, #0]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d112      	bne.n	8001cc4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001c9e:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
 8001ca2:	69da      	ldr	r2, [r3, #28]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001ca4:	2037      	movs	r0, #55	; 0x37
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001ca6:	f042 0220 	orr.w	r2, r2, #32
 8001caa:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001cac:	2200      	movs	r2, #0
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001cae:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001cb0:	4611      	mov	r1, r2
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001cb2:	f003 0320 	and.w	r3, r3, #32
 8001cb6:	9301      	str	r3, [sp, #4]
 8001cb8:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001cba:	f7fe fd9b 	bl	80007f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001cbe:	2037      	movs	r0, #55	; 0x37
 8001cc0:	f7fe fdcc 	bl	800085c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001cc4:	b003      	add	sp, #12
 8001cc6:	f85d fb04 	ldr.w	pc, [sp], #4
 8001cca:	bf00      	nop
 8001ccc:	40001400 	.word	0x40001400

08001cd0 <NMI_Handler>:
 8001cd0:	4770      	bx	lr

08001cd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cd2:	e7fe      	b.n	8001cd2 <HardFault_Handler>

08001cd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cd4:	e7fe      	b.n	8001cd4 <MemManage_Handler>

08001cd6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cd6:	e7fe      	b.n	8001cd6 <BusFault_Handler>

08001cd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cd8:	e7fe      	b.n	8001cd8 <UsageFault_Handler>

08001cda <SVC_Handler>:
 8001cda:	4770      	bx	lr

08001cdc <DebugMon_Handler>:
 8001cdc:	4770      	bx	lr

08001cde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cde:	4770      	bx	lr

08001ce0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ce0:	f7fe bd52 	b.w	8000788 <HAL_IncTick>

08001ce4 <TIM4_IRQHandler>:
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */
	debouncer = 0;
 8001ce4:	2200      	movs	r2, #0
{
 8001ce6:	b510      	push	{r4, lr}
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001ce8:	4c05      	ldr	r4, [pc, #20]	; (8001d00 <TIM4_IRQHandler+0x1c>)
	debouncer = 0;
 8001cea:	4b06      	ldr	r3, [pc, #24]	; (8001d04 <TIM4_IRQHandler+0x20>)
  HAL_TIM_IRQHandler(&htim4);
 8001cec:	4620      	mov	r0, r4
	debouncer = 0;
 8001cee:	601a      	str	r2, [r3, #0]
  HAL_TIM_IRQHandler(&htim4);
 8001cf0:	f7ff f9fe 	bl	80010f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */
	HAL_TIM_Base_Stop_IT(&htim4);
 8001cf4:	4620      	mov	r0, r4

  /* USER CODE END TIM4_IRQn 1 */
}
 8001cf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_TIM_Base_Stop_IT(&htim4);
 8001cfa:	f7ff b9df 	b.w	80010bc <HAL_TIM_Base_Stop_IT>
 8001cfe:	bf00      	nop
 8001d00:	200000e4 	.word	0x200000e4
 8001d04:	200000dc 	.word	0x200000dc

08001d08 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if(debouncer == 0)
 8001d0a:	4b4b      	ldr	r3, [pc, #300]	; (8001e38 <EXTI15_10_IRQHandler+0x130>)
 8001d0c:	681c      	ldr	r4, [r3, #0]
 8001d0e:	2c00      	cmp	r4, #0
 8001d10:	d17d      	bne.n	8001e0e <EXTI15_10_IRQHandler+0x106>
	{
		debouncer = 1;
 8001d12:	2201      	movs	r2, #1

		int read_10 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10);
 8001d14:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d18:	4848      	ldr	r0, [pc, #288]	; (8001e3c <EXTI15_10_IRQHandler+0x134>)
		debouncer = 1;
 8001d1a:	601a      	str	r2, [r3, #0]
		int read_10 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10);
 8001d1c:	f7fe fea4 	bl	8000a68 <HAL_GPIO_ReadPin>
		int read_11 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11);
 8001d20:	f44f 6100 	mov.w	r1, #2048	; 0x800
		int read_10 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10);
 8001d24:	4605      	mov	r5, r0
		int read_11 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11);
 8001d26:	4845      	ldr	r0, [pc, #276]	; (8001e3c <EXTI15_10_IRQHandler+0x134>)
 8001d28:	f7fe fe9e 	bl	8000a68 <HAL_GPIO_ReadPin>
		int read_12 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_12);
 8001d2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
		int read_11 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11);
 8001d30:	4606      	mov	r6, r0
		int read_12 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_12);
 8001d32:	4842      	ldr	r0, [pc, #264]	; (8001e3c <EXTI15_10_IRQHandler+0x134>)
 8001d34:	f7fe fe98 	bl	8000a68 <HAL_GPIO_ReadPin>
		int read_15 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8001d38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
		int read_12 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_12);
 8001d3c:	4607      	mov	r7, r0
		int read_15 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8001d3e:	483f      	ldr	r0, [pc, #252]	; (8001e3c <EXTI15_10_IRQHandler+0x134>)
 8001d40:	f7fe fe92 	bl	8000a68 <HAL_GPIO_ReadPin>

		if(read_10)
 8001d44:	b12d      	cbz	r5, 8001d52 <EXTI15_10_IRQHandler+0x4a>
		{
			timerState++;
 8001d46:	4a3e      	ldr	r2, [pc, #248]	; (8001e40 <EXTI15_10_IRQHandler+0x138>)
 8001d48:	6813      	ldr	r3, [r2, #0]
 8001d4a:	3301      	adds	r3, #1
			if(timerState > type)
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d824      	bhi.n	8001d9a <EXTI15_10_IRQHandler+0x92>
			{
				timerState = tic;
				currectTimerState++;
 8001d50:	6013      	str	r3, [r2, #0]
						currentTimer = 0;
					}
				}
			}
		}
		if(read_11)
 8001d52:	b11e      	cbz	r6, 8001d5c <EXTI15_10_IRQHandler+0x54>
			{
				timerState--;
 8001d54:	4a3a      	ldr	r2, [pc, #232]	; (8001e40 <EXTI15_10_IRQHandler+0x138>)
 8001d56:	6813      	ldr	r3, [r2, #0]
 8001d58:	3b01      	subs	r3, #1
 8001d5a:	6013      	str	r3, [r2, #0]
							currentTimer = 0;
						}
					}
				}
			}
		if(read_12)
 8001d5c:	2f00      	cmp	r7, #0
 8001d5e:	d04a      	beq.n	8001df6 <EXTI15_10_IRQHandler+0xee>
		{
			if(timerState == tic)
 8001d60:	4b37      	ldr	r3, [pc, #220]	; (8001e40 <EXTI15_10_IRQHandler+0x138>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d129      	bne.n	8001dbc <EXTI15_10_IRQHandler+0xb4>
			{
				timersTic[currectTimerState][currentTimer]++;
 8001d68:	4b36      	ldr	r3, [pc, #216]	; (8001e44 <EXTI15_10_IRQHandler+0x13c>)
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	4b36      	ldr	r3, [pc, #216]	; (8001e48 <EXTI15_10_IRQHandler+0x140>)
 8001d6e:	6819      	ldr	r1, [r3, #0]
 8001d70:	4b36      	ldr	r3, [pc, #216]	; (8001e4c <EXTI15_10_IRQHandler+0x144>)
 8001d72:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001d76:	5c5a      	ldrb	r2, [r3, r1]
 8001d78:	3201      	adds	r2, #1
 8001d7a:	545a      	strb	r2, [r3, r1]
			{
				timersType[currectTimerState][currentTimer]++;
			}
		}

		if(read_15)
 8001d7c:	b148      	cbz	r0, 8001d92 <EXTI15_10_IRQHandler+0x8a>
		{
			if(timerState == tic)
			{
				timersTic[currectTimerState][currentTimer]--;
 8001d7e:	4b31      	ldr	r3, [pc, #196]	; (8001e44 <EXTI15_10_IRQHandler+0x13c>)
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	4b31      	ldr	r3, [pc, #196]	; (8001e48 <EXTI15_10_IRQHandler+0x140>)
 8001d84:	6819      	ldr	r1, [r3, #0]
 8001d86:	4b31      	ldr	r3, [pc, #196]	; (8001e4c <EXTI15_10_IRQHandler+0x144>)
			}else if(timerState == type)
			{
				timersType[currectTimerState][currentTimer]--;
 8001d88:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001d8c:	5c5a      	ldrb	r2, [r3, r1]
 8001d8e:	3a01      	subs	r2, #1
 8001d90:	545a      	strb	r2, [r3, r1]
			}
		}

		if(read_15 || read_12 || read_11 || read_10)
		{
			displayChange = true;
 8001d92:	2201      	movs	r2, #1
 8001d94:	4b2e      	ldr	r3, [pc, #184]	; (8001e50 <EXTI15_10_IRQHandler+0x148>)
 8001d96:	701a      	strb	r2, [r3, #0]
 8001d98:	e033      	b.n	8001e02 <EXTI15_10_IRQHandler+0xfa>
				timerState = tic;
 8001d9a:	6014      	str	r4, [r2, #0]
				currectTimerState++;
 8001d9c:	4a29      	ldr	r2, [pc, #164]	; (8001e44 <EXTI15_10_IRQHandler+0x13c>)
 8001d9e:	6813      	ldr	r3, [r2, #0]
 8001da0:	3301      	adds	r3, #1
				if(currectTimerState > 1)
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d9d4      	bls.n	8001d50 <EXTI15_10_IRQHandler+0x48>
					currectTimerState = 0;
 8001da6:	6014      	str	r4, [r2, #0]
					currentTimer++;
 8001da8:	4a27      	ldr	r2, [pc, #156]	; (8001e48 <EXTI15_10_IRQHandler+0x140>)
					if(currentTimer >= timerCount)
 8001daa:	492a      	ldr	r1, [pc, #168]	; (8001e54 <EXTI15_10_IRQHandler+0x14c>)
					currentTimer++;
 8001dac:	6813      	ldr	r3, [r2, #0]
					if(currentTimer >= timerCount)
 8001dae:	7809      	ldrb	r1, [r1, #0]
					currentTimer++;
 8001db0:	3301      	adds	r3, #1
					if(currentTimer >= timerCount)
 8001db2:	428b      	cmp	r3, r1
					currentTimer++;
 8001db4:	6013      	str	r3, [r2, #0]
						currentTimer = 0;
 8001db6:	bf28      	it	cs
 8001db8:	6014      	strcs	r4, [r2, #0]
 8001dba:	e7ca      	b.n	8001d52 <EXTI15_10_IRQHandler+0x4a>
			}else if(timerState == type)
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d111      	bne.n	8001de4 <EXTI15_10_IRQHandler+0xdc>
				timersType[currectTimerState][currentTimer]++;
 8001dc0:	4b20      	ldr	r3, [pc, #128]	; (8001e44 <EXTI15_10_IRQHandler+0x13c>)
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	4b20      	ldr	r3, [pc, #128]	; (8001e48 <EXTI15_10_IRQHandler+0x140>)
 8001dc6:	6819      	ldr	r1, [r3, #0]
 8001dc8:	4b23      	ldr	r3, [pc, #140]	; (8001e58 <EXTI15_10_IRQHandler+0x150>)
 8001dca:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001dce:	5c5a      	ldrb	r2, [r3, r1]
 8001dd0:	3201      	adds	r2, #1
 8001dd2:	545a      	strb	r2, [r3, r1]
		if(read_15)
 8001dd4:	2800      	cmp	r0, #0
 8001dd6:	d0dc      	beq.n	8001d92 <EXTI15_10_IRQHandler+0x8a>
				timersType[currectTimerState][currentTimer]--;
 8001dd8:	4b1a      	ldr	r3, [pc, #104]	; (8001e44 <EXTI15_10_IRQHandler+0x13c>)
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	4b1a      	ldr	r3, [pc, #104]	; (8001e48 <EXTI15_10_IRQHandler+0x140>)
 8001dde:	6819      	ldr	r1, [r3, #0]
 8001de0:	4b1d      	ldr	r3, [pc, #116]	; (8001e58 <EXTI15_10_IRQHandler+0x150>)
 8001de2:	e7d1      	b.n	8001d88 <EXTI15_10_IRQHandler+0x80>
		if(read_15)
 8001de4:	2800      	cmp	r0, #0
 8001de6:	d0d4      	beq.n	8001d92 <EXTI15_10_IRQHandler+0x8a>
			if(timerState == tic)
 8001de8:	4b15      	ldr	r3, [pc, #84]	; (8001e40 <EXTI15_10_IRQHandler+0x138>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d0c6      	beq.n	8001d7e <EXTI15_10_IRQHandler+0x76>
			}else if(timerState == type)
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d1ce      	bne.n	8001d92 <EXTI15_10_IRQHandler+0x8a>
 8001df4:	e7f0      	b.n	8001dd8 <EXTI15_10_IRQHandler+0xd0>
		if(read_15)
 8001df6:	2800      	cmp	r0, #0
 8001df8:	d1f6      	bne.n	8001de8 <EXTI15_10_IRQHandler+0xe0>
		if(read_15 || read_12 || read_11 || read_10)
 8001dfa:	2e00      	cmp	r6, #0
 8001dfc:	d1c9      	bne.n	8001d92 <EXTI15_10_IRQHandler+0x8a>
 8001dfe:	2d00      	cmp	r5, #0
 8001e00:	d1c7      	bne.n	8001d92 <EXTI15_10_IRQHandler+0x8a>
		}

		TIM4->ARR = GetDesiredPeriod(.2,TIM4->PSC);
 8001e02:	4c16      	ldr	r4, [pc, #88]	; (8001e5c <EXTI15_10_IRQHandler+0x154>)
 8001e04:	4816      	ldr	r0, [pc, #88]	; (8001e60 <EXTI15_10_IRQHandler+0x158>)
 8001e06:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001e08:	f7ff fd9c 	bl	8001944 <GetDesiredPeriod>
 8001e0c:	62e0      	str	r0, [r4, #44]	; 0x2c

	}

	HAL_TIM_Base_Start_IT(&htim4);
 8001e0e:	4815      	ldr	r0, [pc, #84]	; (8001e64 <EXTI15_10_IRQHandler+0x15c>)
 8001e10:	f7ff f944 	bl	800109c <HAL_TIM_Base_Start_IT>
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001e14:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001e18:	f7fe fe38 	bl	8000a8c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001e1c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001e20:	f7fe fe34 	bl	8000a8c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001e24:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001e28:	f7fe fe30 	bl	8000a8c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001e2c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001e30:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001e34:	f7fe be2a 	b.w	8000a8c <HAL_GPIO_EXTI_IRQHandler>
 8001e38:	200000dc 	.word	0x200000dc
 8001e3c:	40011000 	.word	0x40011000
 8001e40:	2000012c 	.word	0x2000012c
 8001e44:	20000128 	.word	0x20000128
 8001e48:	200000e0 	.word	0x200000e0
 8001e4c:	2000000a 	.word	0x2000000a
 8001e50:	20000124 	.word	0x20000124
 8001e54:	20000009 	.word	0x20000009
 8001e58:	20000012 	.word	0x20000012
 8001e5c:	40000800 	.word	0x40000800
 8001e60:	3e4ccccd 	.word	0x3e4ccccd
 8001e64:	200000e4 	.word	0x200000e4

08001e68 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001e68:	b570      	push	{r4, r5, r6, lr}
  /* USER CODE BEGIN TIM7_IRQn 0 */
  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_3);
 8001e6a:	2108      	movs	r1, #8
 8001e6c:	482a      	ldr	r0, [pc, #168]	; (8001f18 <TIM7_IRQHandler+0xb0>)
 8001e6e:	f7fe fe06 	bl	8000a7e <HAL_GPIO_TogglePin>
  int read = HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_3);
 8001e72:	2108      	movs	r1, #8
 8001e74:	4828      	ldr	r0, [pc, #160]	; (8001f18 <TIM7_IRQHandler+0xb0>)
 8001e76:	f7fe fdf7 	bl	8000a68 <HAL_GPIO_ReadPin>
  if(read == 1)//timer set when on(relay off)
 8001e7a:	2801      	cmp	r0, #1
 8001e7c:	4b27      	ldr	r3, [pc, #156]	; (8001f1c <TIM7_IRQHandler+0xb4>)
 8001e7e:	4c28      	ldr	r4, [pc, #160]	; (8001f20 <TIM7_IRQHandler+0xb8>)
 8001e80:	4a28      	ldr	r2, [pc, #160]	; (8001f24 <TIM7_IRQHandler+0xbc>)
 8001e82:	d12b      	bne.n	8001edc <TIM7_IRQHandler+0x74>
	  	  	  case hours:
	  	  		TIM7->PSC = 65535;
	  	  		offset = 60 * 60;
	  	  		  break;
	  	  }*/
	  if(timersType[0][0] == centi)
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	b9ab      	cbnz	r3, 8001eb4 <TIM7_IRQHandler+0x4c>
	  {
		  offset = .01;
		  TIM7->PSC = 10000;
 8001e88:	f242 7310 	movw	r3, #10000	; 0x2710
		  offset = .01;
 8001e8c:	4d26      	ldr	r5, [pc, #152]	; (8001f28 <TIM7_IRQHandler+0xc0>)
		  TIM7->PSC = 10000;
 8001e8e:	62a3      	str	r3, [r4, #40]	; 0x28
	  }else
	  {
		  offset = 1;
		  TIM7->PSC = 10000;
	  }
	  TIM7->ARR = GetDesiredPeriod(timersTic[0][0] * offset,TIM7->PSC);
 8001e90:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001e92:	7810      	ldrb	r0, [r2, #0]
	  	  }else
	  	  {
	  		  offset = 1;
	  		  TIM7->PSC = 10000;
	  	  }
	  TIM7->ARR = GetDesiredPeriod(timersTic[1][0] * offset,TIM7->PSC);
 8001e94:	f7fe fa7e 	bl	8000394 <__aeabi_i2f>
 8001e98:	4629      	mov	r1, r5
 8001e9a:	f7fe facf 	bl	800043c <__aeabi_fmul>
 8001e9e:	4631      	mov	r1, r6
 8001ea0:	f7ff fd50 	bl	8001944 <GetDesiredPeriod>
	  TIM7->EGR = TIM_EGR_UG;//seems to only be needed when changing prescaler(PSC)
 8001ea4:	2301      	movs	r3, #1
	  TIM7->ARR = GetDesiredPeriod(timersTic[1][0] * offset,TIM7->PSC);
 8001ea6:	62e0      	str	r0, [r4, #44]	; 0x2c
	  TIM7->EGR = TIM_EGR_UG;//seems to only be needed when changing prescaler(PSC)
 8001ea8:	6163      	str	r3, [r4, #20]
  }
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001eaa:	4820      	ldr	r0, [pc, #128]	; (8001f2c <TIM7_IRQHandler+0xc4>)
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001eac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  HAL_TIM_IRQHandler(&htim7);
 8001eb0:	f7ff b91e 	b.w	80010f0 <HAL_TIM_IRQHandler>
	  }else if(timersType[0][0] == minutes)
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d104      	bne.n	8001ec2 <TIM7_IRQHandler+0x5a>
		  TIM7->PSC = 10000;
 8001eb8:	f242 7310 	movw	r3, #10000	; 0x2710
		  offset = 60;
 8001ebc:	4d1c      	ldr	r5, [pc, #112]	; (8001f30 <TIM7_IRQHandler+0xc8>)
		  TIM7->PSC = 10000;
 8001ebe:	62a3      	str	r3, [r4, #40]	; 0x28
 8001ec0:	e7e6      	b.n	8001e90 <TIM7_IRQHandler+0x28>
	  }else if(timersType[0][0] == hours)
 8001ec2:	2b03      	cmp	r3, #3
		  TIM7->PSC = 65535;
 8001ec4:	bf09      	itett	eq
 8001ec6:	f64f 73ff 	movweq	r3, #65535	; 0xffff
		  TIM7->PSC = 10000;
 8001eca:	f242 7310 	movwne	r3, #10000	; 0x2710
		  TIM7->PSC = 65535;
 8001ece:	62a3      	streq	r3, [r4, #40]	; 0x28
		  offset = 60 * 60;
 8001ed0:	4d18      	ldreq	r5, [pc, #96]	; (8001f34 <TIM7_IRQHandler+0xcc>)
		  TIM7->PSC = 10000;
 8001ed2:	bf1c      	itt	ne
 8001ed4:	62a3      	strne	r3, [r4, #40]	; 0x28
		  offset = 1;
 8001ed6:	f04f 557e 	movne.w	r5, #1065353216	; 0x3f800000
 8001eda:	e7d9      	b.n	8001e90 <TIM7_IRQHandler+0x28>
	  if(timersType[1][0] == centi)
 8001edc:	791b      	ldrb	r3, [r3, #4]
 8001ede:	b933      	cbnz	r3, 8001eee <TIM7_IRQHandler+0x86>
	  		  TIM7->PSC = 10000;
 8001ee0:	f242 7310 	movw	r3, #10000	; 0x2710
	  		  offset = .01;
 8001ee4:	4d10      	ldr	r5, [pc, #64]	; (8001f28 <TIM7_IRQHandler+0xc0>)
	  		  TIM7->PSC = 10000;
 8001ee6:	62a3      	str	r3, [r4, #40]	; 0x28
	  TIM7->ARR = GetDesiredPeriod(timersTic[1][0] * offset,TIM7->PSC);
 8001ee8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001eea:	7910      	ldrb	r0, [r2, #4]
 8001eec:	e7d2      	b.n	8001e94 <TIM7_IRQHandler+0x2c>
	  	  }else if(timersType[1][0] == minutes)
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d104      	bne.n	8001efc <TIM7_IRQHandler+0x94>
	  		  TIM7->PSC = 10000;
 8001ef2:	f242 7310 	movw	r3, #10000	; 0x2710
	  		  offset = 60;
 8001ef6:	4d0e      	ldr	r5, [pc, #56]	; (8001f30 <TIM7_IRQHandler+0xc8>)
	  		  TIM7->PSC = 10000;
 8001ef8:	62a3      	str	r3, [r4, #40]	; 0x28
 8001efa:	e7f5      	b.n	8001ee8 <TIM7_IRQHandler+0x80>
	  	  }else if(timersType[1][0] == hours)
 8001efc:	2b03      	cmp	r3, #3
	  		  TIM7->PSC = 65535;
 8001efe:	bf09      	itett	eq
 8001f00:	f64f 73ff 	movweq	r3, #65535	; 0xffff
	  		  TIM7->PSC = 10000;
 8001f04:	f242 7310 	movwne	r3, #10000	; 0x2710
	  		  TIM7->PSC = 65535;
 8001f08:	62a3      	streq	r3, [r4, #40]	; 0x28
	  		  offset = 60 * 60;
 8001f0a:	4d0a      	ldreq	r5, [pc, #40]	; (8001f34 <TIM7_IRQHandler+0xcc>)
	  		  TIM7->PSC = 10000;
 8001f0c:	bf1c      	itt	ne
 8001f0e:	62a3      	strne	r3, [r4, #40]	; 0x28
	  		  offset = 1;
 8001f10:	f04f 557e 	movne.w	r5, #1065353216	; 0x3f800000
 8001f14:	e7e8      	b.n	8001ee8 <TIM7_IRQHandler+0x80>
 8001f16:	bf00      	nop
 8001f18:	40011000 	.word	0x40011000
 8001f1c:	20000012 	.word	0x20000012
 8001f20:	40001400 	.word	0x40001400
 8001f24:	2000000a 	.word	0x2000000a
 8001f28:	3c23d70a 	.word	0x3c23d70a
 8001f2c:	20000130 	.word	0x20000130
 8001f30:	42700000 	.word	0x42700000
 8001f34:	45610000 	.word	0x45610000

08001f38 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8001f38:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001f3a:	4b0a      	ldr	r3, [pc, #40]	; (8001f64 <_sbrk+0x2c>)
{
 8001f3c:	4602      	mov	r2, r0
	if (heap_end == 0)
 8001f3e:	6819      	ldr	r1, [r3, #0]
 8001f40:	b909      	cbnz	r1, 8001f46 <_sbrk+0xe>
		heap_end = &end;
 8001f42:	4909      	ldr	r1, [pc, #36]	; (8001f68 <_sbrk+0x30>)
 8001f44:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8001f46:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8001f48:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8001f4a:	4402      	add	r2, r0
 8001f4c:	428a      	cmp	r2, r1
 8001f4e:	d906      	bls.n	8001f5e <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001f50:	f000 f85a 	bl	8002008 <__errno>
 8001f54:	230c      	movs	r3, #12
 8001f56:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8001f58:	f04f 30ff 	mov.w	r0, #4294967295
 8001f5c:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8001f5e:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8001f60:	bd08      	pop	{r3, pc}
 8001f62:	bf00      	nop
 8001f64:	200000a4 	.word	0x200000a4
 8001f68:	20000174 	.word	0x20000174

08001f6c <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001f6c:	4b10      	ldr	r3, [pc, #64]	; (8001fb0 <SystemInit+0x44>)
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	f042 0201 	orr.w	r2, r2, #1
 8001f74:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001f76:	6859      	ldr	r1, [r3, #4]
 8001f78:	4a0e      	ldr	r2, [pc, #56]	; (8001fb4 <SystemInit+0x48>)
 8001f7a:	400a      	ands	r2, r1
 8001f7c:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001f84:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001f88:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f90:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001f92:	685a      	ldr	r2, [r3, #4]
 8001f94:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001f98:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;
#elif defined(STM32F100xB) || defined(STM32F100xE)
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001f9a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001f9e:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001fa4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001fa8:	4b03      	ldr	r3, [pc, #12]	; (8001fb8 <SystemInit+0x4c>)
 8001faa:	609a      	str	r2, [r3, #8]
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	f8ff0000 	.word	0xf8ff0000
 8001fb8:	e000ed00 	.word	0xe000ed00

08001fbc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001fbc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001fbe:	e003      	b.n	8001fc8 <LoopCopyDataInit>

08001fc0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001fc0:	4b0b      	ldr	r3, [pc, #44]	; (8001ff0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001fc2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001fc4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001fc6:	3104      	adds	r1, #4

08001fc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001fc8:	480a      	ldr	r0, [pc, #40]	; (8001ff4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001fca:	4b0b      	ldr	r3, [pc, #44]	; (8001ff8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001fcc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001fce:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001fd0:	d3f6      	bcc.n	8001fc0 <CopyDataInit>
  ldr r2, =_sbss
 8001fd2:	4a0a      	ldr	r2, [pc, #40]	; (8001ffc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001fd4:	e002      	b.n	8001fdc <LoopFillZerobss>

08001fd6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001fd6:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001fd8:	f842 3b04 	str.w	r3, [r2], #4

08001fdc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001fdc:	4b08      	ldr	r3, [pc, #32]	; (8002000 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001fde:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001fe0:	d3f9      	bcc.n	8001fd6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001fe2:	f7ff ffc3 	bl	8001f6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fe6:	f000 f815 	bl	8002014 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001fea:	f7ff fceb 	bl	80019c4 <main>
  bx lr
 8001fee:	4770      	bx	lr
  ldr r3, =_sidata
 8001ff0:	08002994 	.word	0x08002994
  ldr r0, =_sdata
 8001ff4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001ff8:	20000084 	.word	0x20000084
  ldr r2, =_sbss
 8001ffc:	20000084 	.word	0x20000084
  ldr r3, = _ebss
 8002000:	20000174 	.word	0x20000174

08002004 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002004:	e7fe      	b.n	8002004 <ADC1_IRQHandler>
	...

08002008 <__errno>:
 8002008:	4b01      	ldr	r3, [pc, #4]	; (8002010 <__errno+0x8>)
 800200a:	6818      	ldr	r0, [r3, #0]
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	20000020 	.word	0x20000020

08002014 <__libc_init_array>:
 8002014:	b570      	push	{r4, r5, r6, lr}
 8002016:	2500      	movs	r5, #0
 8002018:	4e0c      	ldr	r6, [pc, #48]	; (800204c <__libc_init_array+0x38>)
 800201a:	4c0d      	ldr	r4, [pc, #52]	; (8002050 <__libc_init_array+0x3c>)
 800201c:	1ba4      	subs	r4, r4, r6
 800201e:	10a4      	asrs	r4, r4, #2
 8002020:	42a5      	cmp	r5, r4
 8002022:	d109      	bne.n	8002038 <__libc_init_array+0x24>
 8002024:	f000 fc4e 	bl	80028c4 <_init>
 8002028:	2500      	movs	r5, #0
 800202a:	4e0a      	ldr	r6, [pc, #40]	; (8002054 <__libc_init_array+0x40>)
 800202c:	4c0a      	ldr	r4, [pc, #40]	; (8002058 <__libc_init_array+0x44>)
 800202e:	1ba4      	subs	r4, r4, r6
 8002030:	10a4      	asrs	r4, r4, #2
 8002032:	42a5      	cmp	r5, r4
 8002034:	d105      	bne.n	8002042 <__libc_init_array+0x2e>
 8002036:	bd70      	pop	{r4, r5, r6, pc}
 8002038:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800203c:	4798      	blx	r3
 800203e:	3501      	adds	r5, #1
 8002040:	e7ee      	b.n	8002020 <__libc_init_array+0xc>
 8002042:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002046:	4798      	blx	r3
 8002048:	3501      	adds	r5, #1
 800204a:	e7f2      	b.n	8002032 <__libc_init_array+0x1e>
 800204c:	0800298c 	.word	0x0800298c
 8002050:	0800298c 	.word	0x0800298c
 8002054:	0800298c 	.word	0x0800298c
 8002058:	08002990 	.word	0x08002990

0800205c <memset>:
 800205c:	4603      	mov	r3, r0
 800205e:	4402      	add	r2, r0
 8002060:	4293      	cmp	r3, r2
 8002062:	d100      	bne.n	8002066 <memset+0xa>
 8002064:	4770      	bx	lr
 8002066:	f803 1b01 	strb.w	r1, [r3], #1
 800206a:	e7f9      	b.n	8002060 <memset+0x4>

0800206c <siprintf>:
 800206c:	b40e      	push	{r1, r2, r3}
 800206e:	f44f 7102 	mov.w	r1, #520	; 0x208
 8002072:	b500      	push	{lr}
 8002074:	b09c      	sub	sp, #112	; 0x70
 8002076:	f8ad 1014 	strh.w	r1, [sp, #20]
 800207a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800207e:	9104      	str	r1, [sp, #16]
 8002080:	9107      	str	r1, [sp, #28]
 8002082:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002086:	ab1d      	add	r3, sp, #116	; 0x74
 8002088:	9002      	str	r0, [sp, #8]
 800208a:	9006      	str	r0, [sp, #24]
 800208c:	4808      	ldr	r0, [pc, #32]	; (80020b0 <siprintf+0x44>)
 800208e:	f853 2b04 	ldr.w	r2, [r3], #4
 8002092:	f8ad 1016 	strh.w	r1, [sp, #22]
 8002096:	6800      	ldr	r0, [r0, #0]
 8002098:	a902      	add	r1, sp, #8
 800209a:	9301      	str	r3, [sp, #4]
 800209c:	f000 f866 	bl	800216c <_svfiprintf_r>
 80020a0:	2200      	movs	r2, #0
 80020a2:	9b02      	ldr	r3, [sp, #8]
 80020a4:	701a      	strb	r2, [r3, #0]
 80020a6:	b01c      	add	sp, #112	; 0x70
 80020a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80020ac:	b003      	add	sp, #12
 80020ae:	4770      	bx	lr
 80020b0:	20000020 	.word	0x20000020

080020b4 <__ssputs_r>:
 80020b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80020b8:	688e      	ldr	r6, [r1, #8]
 80020ba:	4682      	mov	sl, r0
 80020bc:	429e      	cmp	r6, r3
 80020be:	460c      	mov	r4, r1
 80020c0:	4691      	mov	r9, r2
 80020c2:	4698      	mov	r8, r3
 80020c4:	d835      	bhi.n	8002132 <__ssputs_r+0x7e>
 80020c6:	898a      	ldrh	r2, [r1, #12]
 80020c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80020cc:	d031      	beq.n	8002132 <__ssputs_r+0x7e>
 80020ce:	2302      	movs	r3, #2
 80020d0:	6825      	ldr	r5, [r4, #0]
 80020d2:	6909      	ldr	r1, [r1, #16]
 80020d4:	1a6f      	subs	r7, r5, r1
 80020d6:	6965      	ldr	r5, [r4, #20]
 80020d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80020dc:	fb95 f5f3 	sdiv	r5, r5, r3
 80020e0:	f108 0301 	add.w	r3, r8, #1
 80020e4:	443b      	add	r3, r7
 80020e6:	429d      	cmp	r5, r3
 80020e8:	bf38      	it	cc
 80020ea:	461d      	movcc	r5, r3
 80020ec:	0553      	lsls	r3, r2, #21
 80020ee:	d531      	bpl.n	8002154 <__ssputs_r+0xa0>
 80020f0:	4629      	mov	r1, r5
 80020f2:	f000 fb47 	bl	8002784 <_malloc_r>
 80020f6:	4606      	mov	r6, r0
 80020f8:	b950      	cbnz	r0, 8002110 <__ssputs_r+0x5c>
 80020fa:	230c      	movs	r3, #12
 80020fc:	f8ca 3000 	str.w	r3, [sl]
 8002100:	89a3      	ldrh	r3, [r4, #12]
 8002102:	f04f 30ff 	mov.w	r0, #4294967295
 8002106:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800210a:	81a3      	strh	r3, [r4, #12]
 800210c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002110:	463a      	mov	r2, r7
 8002112:	6921      	ldr	r1, [r4, #16]
 8002114:	f000 fac4 	bl	80026a0 <memcpy>
 8002118:	89a3      	ldrh	r3, [r4, #12]
 800211a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800211e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002122:	81a3      	strh	r3, [r4, #12]
 8002124:	6126      	str	r6, [r4, #16]
 8002126:	443e      	add	r6, r7
 8002128:	6026      	str	r6, [r4, #0]
 800212a:	4646      	mov	r6, r8
 800212c:	6165      	str	r5, [r4, #20]
 800212e:	1bed      	subs	r5, r5, r7
 8002130:	60a5      	str	r5, [r4, #8]
 8002132:	4546      	cmp	r6, r8
 8002134:	bf28      	it	cs
 8002136:	4646      	movcs	r6, r8
 8002138:	4649      	mov	r1, r9
 800213a:	4632      	mov	r2, r6
 800213c:	6820      	ldr	r0, [r4, #0]
 800213e:	f000 faba 	bl	80026b6 <memmove>
 8002142:	68a3      	ldr	r3, [r4, #8]
 8002144:	2000      	movs	r0, #0
 8002146:	1b9b      	subs	r3, r3, r6
 8002148:	60a3      	str	r3, [r4, #8]
 800214a:	6823      	ldr	r3, [r4, #0]
 800214c:	441e      	add	r6, r3
 800214e:	6026      	str	r6, [r4, #0]
 8002150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002154:	462a      	mov	r2, r5
 8002156:	f000 fb73 	bl	8002840 <_realloc_r>
 800215a:	4606      	mov	r6, r0
 800215c:	2800      	cmp	r0, #0
 800215e:	d1e1      	bne.n	8002124 <__ssputs_r+0x70>
 8002160:	6921      	ldr	r1, [r4, #16]
 8002162:	4650      	mov	r0, sl
 8002164:	f000 fac2 	bl	80026ec <_free_r>
 8002168:	e7c7      	b.n	80020fa <__ssputs_r+0x46>
	...

0800216c <_svfiprintf_r>:
 800216c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002170:	b09d      	sub	sp, #116	; 0x74
 8002172:	9303      	str	r3, [sp, #12]
 8002174:	898b      	ldrh	r3, [r1, #12]
 8002176:	4680      	mov	r8, r0
 8002178:	061c      	lsls	r4, r3, #24
 800217a:	460d      	mov	r5, r1
 800217c:	4616      	mov	r6, r2
 800217e:	d50f      	bpl.n	80021a0 <_svfiprintf_r+0x34>
 8002180:	690b      	ldr	r3, [r1, #16]
 8002182:	b96b      	cbnz	r3, 80021a0 <_svfiprintf_r+0x34>
 8002184:	2140      	movs	r1, #64	; 0x40
 8002186:	f000 fafd 	bl	8002784 <_malloc_r>
 800218a:	6028      	str	r0, [r5, #0]
 800218c:	6128      	str	r0, [r5, #16]
 800218e:	b928      	cbnz	r0, 800219c <_svfiprintf_r+0x30>
 8002190:	230c      	movs	r3, #12
 8002192:	f8c8 3000 	str.w	r3, [r8]
 8002196:	f04f 30ff 	mov.w	r0, #4294967295
 800219a:	e0c4      	b.n	8002326 <_svfiprintf_r+0x1ba>
 800219c:	2340      	movs	r3, #64	; 0x40
 800219e:	616b      	str	r3, [r5, #20]
 80021a0:	2300      	movs	r3, #0
 80021a2:	9309      	str	r3, [sp, #36]	; 0x24
 80021a4:	2320      	movs	r3, #32
 80021a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80021aa:	2330      	movs	r3, #48	; 0x30
 80021ac:	f04f 0b01 	mov.w	fp, #1
 80021b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80021b4:	4637      	mov	r7, r6
 80021b6:	463c      	mov	r4, r7
 80021b8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d13c      	bne.n	800223a <_svfiprintf_r+0xce>
 80021c0:	ebb7 0a06 	subs.w	sl, r7, r6
 80021c4:	d00b      	beq.n	80021de <_svfiprintf_r+0x72>
 80021c6:	4653      	mov	r3, sl
 80021c8:	4632      	mov	r2, r6
 80021ca:	4629      	mov	r1, r5
 80021cc:	4640      	mov	r0, r8
 80021ce:	f7ff ff71 	bl	80020b4 <__ssputs_r>
 80021d2:	3001      	adds	r0, #1
 80021d4:	f000 80a2 	beq.w	800231c <_svfiprintf_r+0x1b0>
 80021d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80021da:	4453      	add	r3, sl
 80021dc:	9309      	str	r3, [sp, #36]	; 0x24
 80021de:	783b      	ldrb	r3, [r7, #0]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	f000 809b 	beq.w	800231c <_svfiprintf_r+0x1b0>
 80021e6:	2300      	movs	r3, #0
 80021e8:	f04f 32ff 	mov.w	r2, #4294967295
 80021ec:	9304      	str	r3, [sp, #16]
 80021ee:	9307      	str	r3, [sp, #28]
 80021f0:	9205      	str	r2, [sp, #20]
 80021f2:	9306      	str	r3, [sp, #24]
 80021f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80021f8:	931a      	str	r3, [sp, #104]	; 0x68
 80021fa:	2205      	movs	r2, #5
 80021fc:	7821      	ldrb	r1, [r4, #0]
 80021fe:	4850      	ldr	r0, [pc, #320]	; (8002340 <_svfiprintf_r+0x1d4>)
 8002200:	f000 fa40 	bl	8002684 <memchr>
 8002204:	1c67      	adds	r7, r4, #1
 8002206:	9b04      	ldr	r3, [sp, #16]
 8002208:	b9d8      	cbnz	r0, 8002242 <_svfiprintf_r+0xd6>
 800220a:	06d9      	lsls	r1, r3, #27
 800220c:	bf44      	itt	mi
 800220e:	2220      	movmi	r2, #32
 8002210:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002214:	071a      	lsls	r2, r3, #28
 8002216:	bf44      	itt	mi
 8002218:	222b      	movmi	r2, #43	; 0x2b
 800221a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800221e:	7822      	ldrb	r2, [r4, #0]
 8002220:	2a2a      	cmp	r2, #42	; 0x2a
 8002222:	d016      	beq.n	8002252 <_svfiprintf_r+0xe6>
 8002224:	2100      	movs	r1, #0
 8002226:	200a      	movs	r0, #10
 8002228:	9a07      	ldr	r2, [sp, #28]
 800222a:	4627      	mov	r7, r4
 800222c:	783b      	ldrb	r3, [r7, #0]
 800222e:	3401      	adds	r4, #1
 8002230:	3b30      	subs	r3, #48	; 0x30
 8002232:	2b09      	cmp	r3, #9
 8002234:	d950      	bls.n	80022d8 <_svfiprintf_r+0x16c>
 8002236:	b1c9      	cbz	r1, 800226c <_svfiprintf_r+0x100>
 8002238:	e011      	b.n	800225e <_svfiprintf_r+0xf2>
 800223a:	2b25      	cmp	r3, #37	; 0x25
 800223c:	d0c0      	beq.n	80021c0 <_svfiprintf_r+0x54>
 800223e:	4627      	mov	r7, r4
 8002240:	e7b9      	b.n	80021b6 <_svfiprintf_r+0x4a>
 8002242:	4a3f      	ldr	r2, [pc, #252]	; (8002340 <_svfiprintf_r+0x1d4>)
 8002244:	463c      	mov	r4, r7
 8002246:	1a80      	subs	r0, r0, r2
 8002248:	fa0b f000 	lsl.w	r0, fp, r0
 800224c:	4318      	orrs	r0, r3
 800224e:	9004      	str	r0, [sp, #16]
 8002250:	e7d3      	b.n	80021fa <_svfiprintf_r+0x8e>
 8002252:	9a03      	ldr	r2, [sp, #12]
 8002254:	1d11      	adds	r1, r2, #4
 8002256:	6812      	ldr	r2, [r2, #0]
 8002258:	9103      	str	r1, [sp, #12]
 800225a:	2a00      	cmp	r2, #0
 800225c:	db01      	blt.n	8002262 <_svfiprintf_r+0xf6>
 800225e:	9207      	str	r2, [sp, #28]
 8002260:	e004      	b.n	800226c <_svfiprintf_r+0x100>
 8002262:	4252      	negs	r2, r2
 8002264:	f043 0302 	orr.w	r3, r3, #2
 8002268:	9207      	str	r2, [sp, #28]
 800226a:	9304      	str	r3, [sp, #16]
 800226c:	783b      	ldrb	r3, [r7, #0]
 800226e:	2b2e      	cmp	r3, #46	; 0x2e
 8002270:	d10d      	bne.n	800228e <_svfiprintf_r+0x122>
 8002272:	787b      	ldrb	r3, [r7, #1]
 8002274:	1c79      	adds	r1, r7, #1
 8002276:	2b2a      	cmp	r3, #42	; 0x2a
 8002278:	d132      	bne.n	80022e0 <_svfiprintf_r+0x174>
 800227a:	9b03      	ldr	r3, [sp, #12]
 800227c:	3702      	adds	r7, #2
 800227e:	1d1a      	adds	r2, r3, #4
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	9203      	str	r2, [sp, #12]
 8002284:	2b00      	cmp	r3, #0
 8002286:	bfb8      	it	lt
 8002288:	f04f 33ff 	movlt.w	r3, #4294967295
 800228c:	9305      	str	r3, [sp, #20]
 800228e:	4c2d      	ldr	r4, [pc, #180]	; (8002344 <_svfiprintf_r+0x1d8>)
 8002290:	2203      	movs	r2, #3
 8002292:	7839      	ldrb	r1, [r7, #0]
 8002294:	4620      	mov	r0, r4
 8002296:	f000 f9f5 	bl	8002684 <memchr>
 800229a:	b138      	cbz	r0, 80022ac <_svfiprintf_r+0x140>
 800229c:	2340      	movs	r3, #64	; 0x40
 800229e:	1b00      	subs	r0, r0, r4
 80022a0:	fa03 f000 	lsl.w	r0, r3, r0
 80022a4:	9b04      	ldr	r3, [sp, #16]
 80022a6:	3701      	adds	r7, #1
 80022a8:	4303      	orrs	r3, r0
 80022aa:	9304      	str	r3, [sp, #16]
 80022ac:	7839      	ldrb	r1, [r7, #0]
 80022ae:	2206      	movs	r2, #6
 80022b0:	4825      	ldr	r0, [pc, #148]	; (8002348 <_svfiprintf_r+0x1dc>)
 80022b2:	1c7e      	adds	r6, r7, #1
 80022b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80022b8:	f000 f9e4 	bl	8002684 <memchr>
 80022bc:	2800      	cmp	r0, #0
 80022be:	d035      	beq.n	800232c <_svfiprintf_r+0x1c0>
 80022c0:	4b22      	ldr	r3, [pc, #136]	; (800234c <_svfiprintf_r+0x1e0>)
 80022c2:	b9fb      	cbnz	r3, 8002304 <_svfiprintf_r+0x198>
 80022c4:	9b03      	ldr	r3, [sp, #12]
 80022c6:	3307      	adds	r3, #7
 80022c8:	f023 0307 	bic.w	r3, r3, #7
 80022cc:	3308      	adds	r3, #8
 80022ce:	9303      	str	r3, [sp, #12]
 80022d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80022d2:	444b      	add	r3, r9
 80022d4:	9309      	str	r3, [sp, #36]	; 0x24
 80022d6:	e76d      	b.n	80021b4 <_svfiprintf_r+0x48>
 80022d8:	fb00 3202 	mla	r2, r0, r2, r3
 80022dc:	2101      	movs	r1, #1
 80022de:	e7a4      	b.n	800222a <_svfiprintf_r+0xbe>
 80022e0:	2300      	movs	r3, #0
 80022e2:	240a      	movs	r4, #10
 80022e4:	4618      	mov	r0, r3
 80022e6:	9305      	str	r3, [sp, #20]
 80022e8:	460f      	mov	r7, r1
 80022ea:	783a      	ldrb	r2, [r7, #0]
 80022ec:	3101      	adds	r1, #1
 80022ee:	3a30      	subs	r2, #48	; 0x30
 80022f0:	2a09      	cmp	r2, #9
 80022f2:	d903      	bls.n	80022fc <_svfiprintf_r+0x190>
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d0ca      	beq.n	800228e <_svfiprintf_r+0x122>
 80022f8:	9005      	str	r0, [sp, #20]
 80022fa:	e7c8      	b.n	800228e <_svfiprintf_r+0x122>
 80022fc:	fb04 2000 	mla	r0, r4, r0, r2
 8002300:	2301      	movs	r3, #1
 8002302:	e7f1      	b.n	80022e8 <_svfiprintf_r+0x17c>
 8002304:	ab03      	add	r3, sp, #12
 8002306:	9300      	str	r3, [sp, #0]
 8002308:	462a      	mov	r2, r5
 800230a:	4b11      	ldr	r3, [pc, #68]	; (8002350 <_svfiprintf_r+0x1e4>)
 800230c:	a904      	add	r1, sp, #16
 800230e:	4640      	mov	r0, r8
 8002310:	f3af 8000 	nop.w
 8002314:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002318:	4681      	mov	r9, r0
 800231a:	d1d9      	bne.n	80022d0 <_svfiprintf_r+0x164>
 800231c:	89ab      	ldrh	r3, [r5, #12]
 800231e:	065b      	lsls	r3, r3, #25
 8002320:	f53f af39 	bmi.w	8002196 <_svfiprintf_r+0x2a>
 8002324:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002326:	b01d      	add	sp, #116	; 0x74
 8002328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800232c:	ab03      	add	r3, sp, #12
 800232e:	9300      	str	r3, [sp, #0]
 8002330:	462a      	mov	r2, r5
 8002332:	4b07      	ldr	r3, [pc, #28]	; (8002350 <_svfiprintf_r+0x1e4>)
 8002334:	a904      	add	r1, sp, #16
 8002336:	4640      	mov	r0, r8
 8002338:	f000 f884 	bl	8002444 <_printf_i>
 800233c:	e7ea      	b.n	8002314 <_svfiprintf_r+0x1a8>
 800233e:	bf00      	nop
 8002340:	08002957 	.word	0x08002957
 8002344:	0800295d 	.word	0x0800295d
 8002348:	08002961 	.word	0x08002961
 800234c:	00000000 	.word	0x00000000
 8002350:	080020b5 	.word	0x080020b5

08002354 <_printf_common>:
 8002354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002358:	4691      	mov	r9, r2
 800235a:	461f      	mov	r7, r3
 800235c:	688a      	ldr	r2, [r1, #8]
 800235e:	690b      	ldr	r3, [r1, #16]
 8002360:	4606      	mov	r6, r0
 8002362:	4293      	cmp	r3, r2
 8002364:	bfb8      	it	lt
 8002366:	4613      	movlt	r3, r2
 8002368:	f8c9 3000 	str.w	r3, [r9]
 800236c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002370:	460c      	mov	r4, r1
 8002372:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002376:	b112      	cbz	r2, 800237e <_printf_common+0x2a>
 8002378:	3301      	adds	r3, #1
 800237a:	f8c9 3000 	str.w	r3, [r9]
 800237e:	6823      	ldr	r3, [r4, #0]
 8002380:	0699      	lsls	r1, r3, #26
 8002382:	bf42      	ittt	mi
 8002384:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002388:	3302      	addmi	r3, #2
 800238a:	f8c9 3000 	strmi.w	r3, [r9]
 800238e:	6825      	ldr	r5, [r4, #0]
 8002390:	f015 0506 	ands.w	r5, r5, #6
 8002394:	d107      	bne.n	80023a6 <_printf_common+0x52>
 8002396:	f104 0a19 	add.w	sl, r4, #25
 800239a:	68e3      	ldr	r3, [r4, #12]
 800239c:	f8d9 2000 	ldr.w	r2, [r9]
 80023a0:	1a9b      	subs	r3, r3, r2
 80023a2:	429d      	cmp	r5, r3
 80023a4:	db2a      	blt.n	80023fc <_printf_common+0xa8>
 80023a6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80023aa:	6822      	ldr	r2, [r4, #0]
 80023ac:	3300      	adds	r3, #0
 80023ae:	bf18      	it	ne
 80023b0:	2301      	movne	r3, #1
 80023b2:	0692      	lsls	r2, r2, #26
 80023b4:	d42f      	bmi.n	8002416 <_printf_common+0xc2>
 80023b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80023ba:	4639      	mov	r1, r7
 80023bc:	4630      	mov	r0, r6
 80023be:	47c0      	blx	r8
 80023c0:	3001      	adds	r0, #1
 80023c2:	d022      	beq.n	800240a <_printf_common+0xb6>
 80023c4:	6823      	ldr	r3, [r4, #0]
 80023c6:	68e5      	ldr	r5, [r4, #12]
 80023c8:	f003 0306 	and.w	r3, r3, #6
 80023cc:	2b04      	cmp	r3, #4
 80023ce:	bf18      	it	ne
 80023d0:	2500      	movne	r5, #0
 80023d2:	f8d9 2000 	ldr.w	r2, [r9]
 80023d6:	f04f 0900 	mov.w	r9, #0
 80023da:	bf08      	it	eq
 80023dc:	1aad      	subeq	r5, r5, r2
 80023de:	68a3      	ldr	r3, [r4, #8]
 80023e0:	6922      	ldr	r2, [r4, #16]
 80023e2:	bf08      	it	eq
 80023e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80023e8:	4293      	cmp	r3, r2
 80023ea:	bfc4      	itt	gt
 80023ec:	1a9b      	subgt	r3, r3, r2
 80023ee:	18ed      	addgt	r5, r5, r3
 80023f0:	341a      	adds	r4, #26
 80023f2:	454d      	cmp	r5, r9
 80023f4:	d11b      	bne.n	800242e <_printf_common+0xda>
 80023f6:	2000      	movs	r0, #0
 80023f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80023fc:	2301      	movs	r3, #1
 80023fe:	4652      	mov	r2, sl
 8002400:	4639      	mov	r1, r7
 8002402:	4630      	mov	r0, r6
 8002404:	47c0      	blx	r8
 8002406:	3001      	adds	r0, #1
 8002408:	d103      	bne.n	8002412 <_printf_common+0xbe>
 800240a:	f04f 30ff 	mov.w	r0, #4294967295
 800240e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002412:	3501      	adds	r5, #1
 8002414:	e7c1      	b.n	800239a <_printf_common+0x46>
 8002416:	2030      	movs	r0, #48	; 0x30
 8002418:	18e1      	adds	r1, r4, r3
 800241a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800241e:	1c5a      	adds	r2, r3, #1
 8002420:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002424:	4422      	add	r2, r4
 8002426:	3302      	adds	r3, #2
 8002428:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800242c:	e7c3      	b.n	80023b6 <_printf_common+0x62>
 800242e:	2301      	movs	r3, #1
 8002430:	4622      	mov	r2, r4
 8002432:	4639      	mov	r1, r7
 8002434:	4630      	mov	r0, r6
 8002436:	47c0      	blx	r8
 8002438:	3001      	adds	r0, #1
 800243a:	d0e6      	beq.n	800240a <_printf_common+0xb6>
 800243c:	f109 0901 	add.w	r9, r9, #1
 8002440:	e7d7      	b.n	80023f2 <_printf_common+0x9e>
	...

08002444 <_printf_i>:
 8002444:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002448:	4617      	mov	r7, r2
 800244a:	7e0a      	ldrb	r2, [r1, #24]
 800244c:	b085      	sub	sp, #20
 800244e:	2a6e      	cmp	r2, #110	; 0x6e
 8002450:	4698      	mov	r8, r3
 8002452:	4606      	mov	r6, r0
 8002454:	460c      	mov	r4, r1
 8002456:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002458:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800245c:	f000 80bc 	beq.w	80025d8 <_printf_i+0x194>
 8002460:	d81a      	bhi.n	8002498 <_printf_i+0x54>
 8002462:	2a63      	cmp	r2, #99	; 0x63
 8002464:	d02e      	beq.n	80024c4 <_printf_i+0x80>
 8002466:	d80a      	bhi.n	800247e <_printf_i+0x3a>
 8002468:	2a00      	cmp	r2, #0
 800246a:	f000 80c8 	beq.w	80025fe <_printf_i+0x1ba>
 800246e:	2a58      	cmp	r2, #88	; 0x58
 8002470:	f000 808a 	beq.w	8002588 <_printf_i+0x144>
 8002474:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002478:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800247c:	e02a      	b.n	80024d4 <_printf_i+0x90>
 800247e:	2a64      	cmp	r2, #100	; 0x64
 8002480:	d001      	beq.n	8002486 <_printf_i+0x42>
 8002482:	2a69      	cmp	r2, #105	; 0x69
 8002484:	d1f6      	bne.n	8002474 <_printf_i+0x30>
 8002486:	6821      	ldr	r1, [r4, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800248e:	d023      	beq.n	80024d8 <_printf_i+0x94>
 8002490:	1d11      	adds	r1, r2, #4
 8002492:	6019      	str	r1, [r3, #0]
 8002494:	6813      	ldr	r3, [r2, #0]
 8002496:	e027      	b.n	80024e8 <_printf_i+0xa4>
 8002498:	2a73      	cmp	r2, #115	; 0x73
 800249a:	f000 80b4 	beq.w	8002606 <_printf_i+0x1c2>
 800249e:	d808      	bhi.n	80024b2 <_printf_i+0x6e>
 80024a0:	2a6f      	cmp	r2, #111	; 0x6f
 80024a2:	d02a      	beq.n	80024fa <_printf_i+0xb6>
 80024a4:	2a70      	cmp	r2, #112	; 0x70
 80024a6:	d1e5      	bne.n	8002474 <_printf_i+0x30>
 80024a8:	680a      	ldr	r2, [r1, #0]
 80024aa:	f042 0220 	orr.w	r2, r2, #32
 80024ae:	600a      	str	r2, [r1, #0]
 80024b0:	e003      	b.n	80024ba <_printf_i+0x76>
 80024b2:	2a75      	cmp	r2, #117	; 0x75
 80024b4:	d021      	beq.n	80024fa <_printf_i+0xb6>
 80024b6:	2a78      	cmp	r2, #120	; 0x78
 80024b8:	d1dc      	bne.n	8002474 <_printf_i+0x30>
 80024ba:	2278      	movs	r2, #120	; 0x78
 80024bc:	496f      	ldr	r1, [pc, #444]	; (800267c <_printf_i+0x238>)
 80024be:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80024c2:	e064      	b.n	800258e <_printf_i+0x14a>
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80024ca:	1d11      	adds	r1, r2, #4
 80024cc:	6019      	str	r1, [r3, #0]
 80024ce:	6813      	ldr	r3, [r2, #0]
 80024d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80024d4:	2301      	movs	r3, #1
 80024d6:	e0a3      	b.n	8002620 <_printf_i+0x1dc>
 80024d8:	f011 0f40 	tst.w	r1, #64	; 0x40
 80024dc:	f102 0104 	add.w	r1, r2, #4
 80024e0:	6019      	str	r1, [r3, #0]
 80024e2:	d0d7      	beq.n	8002494 <_printf_i+0x50>
 80024e4:	f9b2 3000 	ldrsh.w	r3, [r2]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	da03      	bge.n	80024f4 <_printf_i+0xb0>
 80024ec:	222d      	movs	r2, #45	; 0x2d
 80024ee:	425b      	negs	r3, r3
 80024f0:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80024f4:	4962      	ldr	r1, [pc, #392]	; (8002680 <_printf_i+0x23c>)
 80024f6:	220a      	movs	r2, #10
 80024f8:	e017      	b.n	800252a <_printf_i+0xe6>
 80024fa:	6820      	ldr	r0, [r4, #0]
 80024fc:	6819      	ldr	r1, [r3, #0]
 80024fe:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002502:	d003      	beq.n	800250c <_printf_i+0xc8>
 8002504:	1d08      	adds	r0, r1, #4
 8002506:	6018      	str	r0, [r3, #0]
 8002508:	680b      	ldr	r3, [r1, #0]
 800250a:	e006      	b.n	800251a <_printf_i+0xd6>
 800250c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002510:	f101 0004 	add.w	r0, r1, #4
 8002514:	6018      	str	r0, [r3, #0]
 8002516:	d0f7      	beq.n	8002508 <_printf_i+0xc4>
 8002518:	880b      	ldrh	r3, [r1, #0]
 800251a:	2a6f      	cmp	r2, #111	; 0x6f
 800251c:	bf14      	ite	ne
 800251e:	220a      	movne	r2, #10
 8002520:	2208      	moveq	r2, #8
 8002522:	4957      	ldr	r1, [pc, #348]	; (8002680 <_printf_i+0x23c>)
 8002524:	2000      	movs	r0, #0
 8002526:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800252a:	6865      	ldr	r5, [r4, #4]
 800252c:	2d00      	cmp	r5, #0
 800252e:	60a5      	str	r5, [r4, #8]
 8002530:	f2c0 809c 	blt.w	800266c <_printf_i+0x228>
 8002534:	6820      	ldr	r0, [r4, #0]
 8002536:	f020 0004 	bic.w	r0, r0, #4
 800253a:	6020      	str	r0, [r4, #0]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d13f      	bne.n	80025c0 <_printf_i+0x17c>
 8002540:	2d00      	cmp	r5, #0
 8002542:	f040 8095 	bne.w	8002670 <_printf_i+0x22c>
 8002546:	4675      	mov	r5, lr
 8002548:	2a08      	cmp	r2, #8
 800254a:	d10b      	bne.n	8002564 <_printf_i+0x120>
 800254c:	6823      	ldr	r3, [r4, #0]
 800254e:	07da      	lsls	r2, r3, #31
 8002550:	d508      	bpl.n	8002564 <_printf_i+0x120>
 8002552:	6923      	ldr	r3, [r4, #16]
 8002554:	6862      	ldr	r2, [r4, #4]
 8002556:	429a      	cmp	r2, r3
 8002558:	bfde      	ittt	le
 800255a:	2330      	movle	r3, #48	; 0x30
 800255c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002560:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002564:	ebae 0305 	sub.w	r3, lr, r5
 8002568:	6123      	str	r3, [r4, #16]
 800256a:	f8cd 8000 	str.w	r8, [sp]
 800256e:	463b      	mov	r3, r7
 8002570:	aa03      	add	r2, sp, #12
 8002572:	4621      	mov	r1, r4
 8002574:	4630      	mov	r0, r6
 8002576:	f7ff feed 	bl	8002354 <_printf_common>
 800257a:	3001      	adds	r0, #1
 800257c:	d155      	bne.n	800262a <_printf_i+0x1e6>
 800257e:	f04f 30ff 	mov.w	r0, #4294967295
 8002582:	b005      	add	sp, #20
 8002584:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002588:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800258c:	493c      	ldr	r1, [pc, #240]	; (8002680 <_printf_i+0x23c>)
 800258e:	6822      	ldr	r2, [r4, #0]
 8002590:	6818      	ldr	r0, [r3, #0]
 8002592:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002596:	f100 0504 	add.w	r5, r0, #4
 800259a:	601d      	str	r5, [r3, #0]
 800259c:	d001      	beq.n	80025a2 <_printf_i+0x15e>
 800259e:	6803      	ldr	r3, [r0, #0]
 80025a0:	e002      	b.n	80025a8 <_printf_i+0x164>
 80025a2:	0655      	lsls	r5, r2, #25
 80025a4:	d5fb      	bpl.n	800259e <_printf_i+0x15a>
 80025a6:	8803      	ldrh	r3, [r0, #0]
 80025a8:	07d0      	lsls	r0, r2, #31
 80025aa:	bf44      	itt	mi
 80025ac:	f042 0220 	orrmi.w	r2, r2, #32
 80025b0:	6022      	strmi	r2, [r4, #0]
 80025b2:	b91b      	cbnz	r3, 80025bc <_printf_i+0x178>
 80025b4:	6822      	ldr	r2, [r4, #0]
 80025b6:	f022 0220 	bic.w	r2, r2, #32
 80025ba:	6022      	str	r2, [r4, #0]
 80025bc:	2210      	movs	r2, #16
 80025be:	e7b1      	b.n	8002524 <_printf_i+0xe0>
 80025c0:	4675      	mov	r5, lr
 80025c2:	fbb3 f0f2 	udiv	r0, r3, r2
 80025c6:	fb02 3310 	mls	r3, r2, r0, r3
 80025ca:	5ccb      	ldrb	r3, [r1, r3]
 80025cc:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80025d0:	4603      	mov	r3, r0
 80025d2:	2800      	cmp	r0, #0
 80025d4:	d1f5      	bne.n	80025c2 <_printf_i+0x17e>
 80025d6:	e7b7      	b.n	8002548 <_printf_i+0x104>
 80025d8:	6808      	ldr	r0, [r1, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	f010 0f80 	tst.w	r0, #128	; 0x80
 80025e0:	6949      	ldr	r1, [r1, #20]
 80025e2:	d004      	beq.n	80025ee <_printf_i+0x1aa>
 80025e4:	1d10      	adds	r0, r2, #4
 80025e6:	6018      	str	r0, [r3, #0]
 80025e8:	6813      	ldr	r3, [r2, #0]
 80025ea:	6019      	str	r1, [r3, #0]
 80025ec:	e007      	b.n	80025fe <_printf_i+0x1ba>
 80025ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 80025f2:	f102 0004 	add.w	r0, r2, #4
 80025f6:	6018      	str	r0, [r3, #0]
 80025f8:	6813      	ldr	r3, [r2, #0]
 80025fa:	d0f6      	beq.n	80025ea <_printf_i+0x1a6>
 80025fc:	8019      	strh	r1, [r3, #0]
 80025fe:	2300      	movs	r3, #0
 8002600:	4675      	mov	r5, lr
 8002602:	6123      	str	r3, [r4, #16]
 8002604:	e7b1      	b.n	800256a <_printf_i+0x126>
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	1d11      	adds	r1, r2, #4
 800260a:	6019      	str	r1, [r3, #0]
 800260c:	6815      	ldr	r5, [r2, #0]
 800260e:	2100      	movs	r1, #0
 8002610:	6862      	ldr	r2, [r4, #4]
 8002612:	4628      	mov	r0, r5
 8002614:	f000 f836 	bl	8002684 <memchr>
 8002618:	b108      	cbz	r0, 800261e <_printf_i+0x1da>
 800261a:	1b40      	subs	r0, r0, r5
 800261c:	6060      	str	r0, [r4, #4]
 800261e:	6863      	ldr	r3, [r4, #4]
 8002620:	6123      	str	r3, [r4, #16]
 8002622:	2300      	movs	r3, #0
 8002624:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002628:	e79f      	b.n	800256a <_printf_i+0x126>
 800262a:	6923      	ldr	r3, [r4, #16]
 800262c:	462a      	mov	r2, r5
 800262e:	4639      	mov	r1, r7
 8002630:	4630      	mov	r0, r6
 8002632:	47c0      	blx	r8
 8002634:	3001      	adds	r0, #1
 8002636:	d0a2      	beq.n	800257e <_printf_i+0x13a>
 8002638:	6823      	ldr	r3, [r4, #0]
 800263a:	079b      	lsls	r3, r3, #30
 800263c:	d507      	bpl.n	800264e <_printf_i+0x20a>
 800263e:	2500      	movs	r5, #0
 8002640:	f104 0919 	add.w	r9, r4, #25
 8002644:	68e3      	ldr	r3, [r4, #12]
 8002646:	9a03      	ldr	r2, [sp, #12]
 8002648:	1a9b      	subs	r3, r3, r2
 800264a:	429d      	cmp	r5, r3
 800264c:	db05      	blt.n	800265a <_printf_i+0x216>
 800264e:	68e0      	ldr	r0, [r4, #12]
 8002650:	9b03      	ldr	r3, [sp, #12]
 8002652:	4298      	cmp	r0, r3
 8002654:	bfb8      	it	lt
 8002656:	4618      	movlt	r0, r3
 8002658:	e793      	b.n	8002582 <_printf_i+0x13e>
 800265a:	2301      	movs	r3, #1
 800265c:	464a      	mov	r2, r9
 800265e:	4639      	mov	r1, r7
 8002660:	4630      	mov	r0, r6
 8002662:	47c0      	blx	r8
 8002664:	3001      	adds	r0, #1
 8002666:	d08a      	beq.n	800257e <_printf_i+0x13a>
 8002668:	3501      	adds	r5, #1
 800266a:	e7eb      	b.n	8002644 <_printf_i+0x200>
 800266c:	2b00      	cmp	r3, #0
 800266e:	d1a7      	bne.n	80025c0 <_printf_i+0x17c>
 8002670:	780b      	ldrb	r3, [r1, #0]
 8002672:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002676:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800267a:	e765      	b.n	8002548 <_printf_i+0x104>
 800267c:	08002979 	.word	0x08002979
 8002680:	08002968 	.word	0x08002968

08002684 <memchr>:
 8002684:	b510      	push	{r4, lr}
 8002686:	b2c9      	uxtb	r1, r1
 8002688:	4402      	add	r2, r0
 800268a:	4290      	cmp	r0, r2
 800268c:	4603      	mov	r3, r0
 800268e:	d101      	bne.n	8002694 <memchr+0x10>
 8002690:	2000      	movs	r0, #0
 8002692:	bd10      	pop	{r4, pc}
 8002694:	781c      	ldrb	r4, [r3, #0]
 8002696:	3001      	adds	r0, #1
 8002698:	428c      	cmp	r4, r1
 800269a:	d1f6      	bne.n	800268a <memchr+0x6>
 800269c:	4618      	mov	r0, r3
 800269e:	bd10      	pop	{r4, pc}

080026a0 <memcpy>:
 80026a0:	b510      	push	{r4, lr}
 80026a2:	1e43      	subs	r3, r0, #1
 80026a4:	440a      	add	r2, r1
 80026a6:	4291      	cmp	r1, r2
 80026a8:	d100      	bne.n	80026ac <memcpy+0xc>
 80026aa:	bd10      	pop	{r4, pc}
 80026ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80026b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80026b4:	e7f7      	b.n	80026a6 <memcpy+0x6>

080026b6 <memmove>:
 80026b6:	4288      	cmp	r0, r1
 80026b8:	b510      	push	{r4, lr}
 80026ba:	eb01 0302 	add.w	r3, r1, r2
 80026be:	d803      	bhi.n	80026c8 <memmove+0x12>
 80026c0:	1e42      	subs	r2, r0, #1
 80026c2:	4299      	cmp	r1, r3
 80026c4:	d10c      	bne.n	80026e0 <memmove+0x2a>
 80026c6:	bd10      	pop	{r4, pc}
 80026c8:	4298      	cmp	r0, r3
 80026ca:	d2f9      	bcs.n	80026c0 <memmove+0xa>
 80026cc:	1881      	adds	r1, r0, r2
 80026ce:	1ad2      	subs	r2, r2, r3
 80026d0:	42d3      	cmn	r3, r2
 80026d2:	d100      	bne.n	80026d6 <memmove+0x20>
 80026d4:	bd10      	pop	{r4, pc}
 80026d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80026da:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80026de:	e7f7      	b.n	80026d0 <memmove+0x1a>
 80026e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80026e4:	f802 4f01 	strb.w	r4, [r2, #1]!
 80026e8:	e7eb      	b.n	80026c2 <memmove+0xc>
	...

080026ec <_free_r>:
 80026ec:	b538      	push	{r3, r4, r5, lr}
 80026ee:	4605      	mov	r5, r0
 80026f0:	2900      	cmp	r1, #0
 80026f2:	d043      	beq.n	800277c <_free_r+0x90>
 80026f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80026f8:	1f0c      	subs	r4, r1, #4
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	bfb8      	it	lt
 80026fe:	18e4      	addlt	r4, r4, r3
 8002700:	f000 f8d4 	bl	80028ac <__malloc_lock>
 8002704:	4a1e      	ldr	r2, [pc, #120]	; (8002780 <_free_r+0x94>)
 8002706:	6813      	ldr	r3, [r2, #0]
 8002708:	4610      	mov	r0, r2
 800270a:	b933      	cbnz	r3, 800271a <_free_r+0x2e>
 800270c:	6063      	str	r3, [r4, #4]
 800270e:	6014      	str	r4, [r2, #0]
 8002710:	4628      	mov	r0, r5
 8002712:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002716:	f000 b8ca 	b.w	80028ae <__malloc_unlock>
 800271a:	42a3      	cmp	r3, r4
 800271c:	d90b      	bls.n	8002736 <_free_r+0x4a>
 800271e:	6821      	ldr	r1, [r4, #0]
 8002720:	1862      	adds	r2, r4, r1
 8002722:	4293      	cmp	r3, r2
 8002724:	bf01      	itttt	eq
 8002726:	681a      	ldreq	r2, [r3, #0]
 8002728:	685b      	ldreq	r3, [r3, #4]
 800272a:	1852      	addeq	r2, r2, r1
 800272c:	6022      	streq	r2, [r4, #0]
 800272e:	6063      	str	r3, [r4, #4]
 8002730:	6004      	str	r4, [r0, #0]
 8002732:	e7ed      	b.n	8002710 <_free_r+0x24>
 8002734:	4613      	mov	r3, r2
 8002736:	685a      	ldr	r2, [r3, #4]
 8002738:	b10a      	cbz	r2, 800273e <_free_r+0x52>
 800273a:	42a2      	cmp	r2, r4
 800273c:	d9fa      	bls.n	8002734 <_free_r+0x48>
 800273e:	6819      	ldr	r1, [r3, #0]
 8002740:	1858      	adds	r0, r3, r1
 8002742:	42a0      	cmp	r0, r4
 8002744:	d10b      	bne.n	800275e <_free_r+0x72>
 8002746:	6820      	ldr	r0, [r4, #0]
 8002748:	4401      	add	r1, r0
 800274a:	1858      	adds	r0, r3, r1
 800274c:	4282      	cmp	r2, r0
 800274e:	6019      	str	r1, [r3, #0]
 8002750:	d1de      	bne.n	8002710 <_free_r+0x24>
 8002752:	6810      	ldr	r0, [r2, #0]
 8002754:	6852      	ldr	r2, [r2, #4]
 8002756:	4401      	add	r1, r0
 8002758:	6019      	str	r1, [r3, #0]
 800275a:	605a      	str	r2, [r3, #4]
 800275c:	e7d8      	b.n	8002710 <_free_r+0x24>
 800275e:	d902      	bls.n	8002766 <_free_r+0x7a>
 8002760:	230c      	movs	r3, #12
 8002762:	602b      	str	r3, [r5, #0]
 8002764:	e7d4      	b.n	8002710 <_free_r+0x24>
 8002766:	6820      	ldr	r0, [r4, #0]
 8002768:	1821      	adds	r1, r4, r0
 800276a:	428a      	cmp	r2, r1
 800276c:	bf01      	itttt	eq
 800276e:	6811      	ldreq	r1, [r2, #0]
 8002770:	6852      	ldreq	r2, [r2, #4]
 8002772:	1809      	addeq	r1, r1, r0
 8002774:	6021      	streq	r1, [r4, #0]
 8002776:	6062      	str	r2, [r4, #4]
 8002778:	605c      	str	r4, [r3, #4]
 800277a:	e7c9      	b.n	8002710 <_free_r+0x24>
 800277c:	bd38      	pop	{r3, r4, r5, pc}
 800277e:	bf00      	nop
 8002780:	200000a8 	.word	0x200000a8

08002784 <_malloc_r>:
 8002784:	b570      	push	{r4, r5, r6, lr}
 8002786:	1ccd      	adds	r5, r1, #3
 8002788:	f025 0503 	bic.w	r5, r5, #3
 800278c:	3508      	adds	r5, #8
 800278e:	2d0c      	cmp	r5, #12
 8002790:	bf38      	it	cc
 8002792:	250c      	movcc	r5, #12
 8002794:	2d00      	cmp	r5, #0
 8002796:	4606      	mov	r6, r0
 8002798:	db01      	blt.n	800279e <_malloc_r+0x1a>
 800279a:	42a9      	cmp	r1, r5
 800279c:	d903      	bls.n	80027a6 <_malloc_r+0x22>
 800279e:	230c      	movs	r3, #12
 80027a0:	6033      	str	r3, [r6, #0]
 80027a2:	2000      	movs	r0, #0
 80027a4:	bd70      	pop	{r4, r5, r6, pc}
 80027a6:	f000 f881 	bl	80028ac <__malloc_lock>
 80027aa:	4a23      	ldr	r2, [pc, #140]	; (8002838 <_malloc_r+0xb4>)
 80027ac:	6814      	ldr	r4, [r2, #0]
 80027ae:	4621      	mov	r1, r4
 80027b0:	b991      	cbnz	r1, 80027d8 <_malloc_r+0x54>
 80027b2:	4c22      	ldr	r4, [pc, #136]	; (800283c <_malloc_r+0xb8>)
 80027b4:	6823      	ldr	r3, [r4, #0]
 80027b6:	b91b      	cbnz	r3, 80027c0 <_malloc_r+0x3c>
 80027b8:	4630      	mov	r0, r6
 80027ba:	f000 f867 	bl	800288c <_sbrk_r>
 80027be:	6020      	str	r0, [r4, #0]
 80027c0:	4629      	mov	r1, r5
 80027c2:	4630      	mov	r0, r6
 80027c4:	f000 f862 	bl	800288c <_sbrk_r>
 80027c8:	1c43      	adds	r3, r0, #1
 80027ca:	d126      	bne.n	800281a <_malloc_r+0x96>
 80027cc:	230c      	movs	r3, #12
 80027ce:	4630      	mov	r0, r6
 80027d0:	6033      	str	r3, [r6, #0]
 80027d2:	f000 f86c 	bl	80028ae <__malloc_unlock>
 80027d6:	e7e4      	b.n	80027a2 <_malloc_r+0x1e>
 80027d8:	680b      	ldr	r3, [r1, #0]
 80027da:	1b5b      	subs	r3, r3, r5
 80027dc:	d41a      	bmi.n	8002814 <_malloc_r+0x90>
 80027de:	2b0b      	cmp	r3, #11
 80027e0:	d90f      	bls.n	8002802 <_malloc_r+0x7e>
 80027e2:	600b      	str	r3, [r1, #0]
 80027e4:	18cc      	adds	r4, r1, r3
 80027e6:	50cd      	str	r5, [r1, r3]
 80027e8:	4630      	mov	r0, r6
 80027ea:	f000 f860 	bl	80028ae <__malloc_unlock>
 80027ee:	f104 000b 	add.w	r0, r4, #11
 80027f2:	1d23      	adds	r3, r4, #4
 80027f4:	f020 0007 	bic.w	r0, r0, #7
 80027f8:	1ac3      	subs	r3, r0, r3
 80027fa:	d01b      	beq.n	8002834 <_malloc_r+0xb0>
 80027fc:	425a      	negs	r2, r3
 80027fe:	50e2      	str	r2, [r4, r3]
 8002800:	bd70      	pop	{r4, r5, r6, pc}
 8002802:	428c      	cmp	r4, r1
 8002804:	bf0b      	itete	eq
 8002806:	6863      	ldreq	r3, [r4, #4]
 8002808:	684b      	ldrne	r3, [r1, #4]
 800280a:	6013      	streq	r3, [r2, #0]
 800280c:	6063      	strne	r3, [r4, #4]
 800280e:	bf18      	it	ne
 8002810:	460c      	movne	r4, r1
 8002812:	e7e9      	b.n	80027e8 <_malloc_r+0x64>
 8002814:	460c      	mov	r4, r1
 8002816:	6849      	ldr	r1, [r1, #4]
 8002818:	e7ca      	b.n	80027b0 <_malloc_r+0x2c>
 800281a:	1cc4      	adds	r4, r0, #3
 800281c:	f024 0403 	bic.w	r4, r4, #3
 8002820:	42a0      	cmp	r0, r4
 8002822:	d005      	beq.n	8002830 <_malloc_r+0xac>
 8002824:	1a21      	subs	r1, r4, r0
 8002826:	4630      	mov	r0, r6
 8002828:	f000 f830 	bl	800288c <_sbrk_r>
 800282c:	3001      	adds	r0, #1
 800282e:	d0cd      	beq.n	80027cc <_malloc_r+0x48>
 8002830:	6025      	str	r5, [r4, #0]
 8002832:	e7d9      	b.n	80027e8 <_malloc_r+0x64>
 8002834:	bd70      	pop	{r4, r5, r6, pc}
 8002836:	bf00      	nop
 8002838:	200000a8 	.word	0x200000a8
 800283c:	200000ac 	.word	0x200000ac

08002840 <_realloc_r>:
 8002840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002842:	4607      	mov	r7, r0
 8002844:	4614      	mov	r4, r2
 8002846:	460e      	mov	r6, r1
 8002848:	b921      	cbnz	r1, 8002854 <_realloc_r+0x14>
 800284a:	4611      	mov	r1, r2
 800284c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002850:	f7ff bf98 	b.w	8002784 <_malloc_r>
 8002854:	b922      	cbnz	r2, 8002860 <_realloc_r+0x20>
 8002856:	f7ff ff49 	bl	80026ec <_free_r>
 800285a:	4625      	mov	r5, r4
 800285c:	4628      	mov	r0, r5
 800285e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002860:	f000 f826 	bl	80028b0 <_malloc_usable_size_r>
 8002864:	4284      	cmp	r4, r0
 8002866:	d90f      	bls.n	8002888 <_realloc_r+0x48>
 8002868:	4621      	mov	r1, r4
 800286a:	4638      	mov	r0, r7
 800286c:	f7ff ff8a 	bl	8002784 <_malloc_r>
 8002870:	4605      	mov	r5, r0
 8002872:	2800      	cmp	r0, #0
 8002874:	d0f2      	beq.n	800285c <_realloc_r+0x1c>
 8002876:	4631      	mov	r1, r6
 8002878:	4622      	mov	r2, r4
 800287a:	f7ff ff11 	bl	80026a0 <memcpy>
 800287e:	4631      	mov	r1, r6
 8002880:	4638      	mov	r0, r7
 8002882:	f7ff ff33 	bl	80026ec <_free_r>
 8002886:	e7e9      	b.n	800285c <_realloc_r+0x1c>
 8002888:	4635      	mov	r5, r6
 800288a:	e7e7      	b.n	800285c <_realloc_r+0x1c>

0800288c <_sbrk_r>:
 800288c:	b538      	push	{r3, r4, r5, lr}
 800288e:	2300      	movs	r3, #0
 8002890:	4c05      	ldr	r4, [pc, #20]	; (80028a8 <_sbrk_r+0x1c>)
 8002892:	4605      	mov	r5, r0
 8002894:	4608      	mov	r0, r1
 8002896:	6023      	str	r3, [r4, #0]
 8002898:	f7ff fb4e 	bl	8001f38 <_sbrk>
 800289c:	1c43      	adds	r3, r0, #1
 800289e:	d102      	bne.n	80028a6 <_sbrk_r+0x1a>
 80028a0:	6823      	ldr	r3, [r4, #0]
 80028a2:	b103      	cbz	r3, 80028a6 <_sbrk_r+0x1a>
 80028a4:	602b      	str	r3, [r5, #0]
 80028a6:	bd38      	pop	{r3, r4, r5, pc}
 80028a8:	20000170 	.word	0x20000170

080028ac <__malloc_lock>:
 80028ac:	4770      	bx	lr

080028ae <__malloc_unlock>:
 80028ae:	4770      	bx	lr

080028b0 <_malloc_usable_size_r>:
 80028b0:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80028b4:	2800      	cmp	r0, #0
 80028b6:	f1a0 0004 	sub.w	r0, r0, #4
 80028ba:	bfbc      	itt	lt
 80028bc:	580b      	ldrlt	r3, [r1, r0]
 80028be:	18c0      	addlt	r0, r0, r3
 80028c0:	4770      	bx	lr
	...

080028c4 <_init>:
 80028c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028c6:	bf00      	nop
 80028c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028ca:	bc08      	pop	{r3}
 80028cc:	469e      	mov	lr, r3
 80028ce:	4770      	bx	lr

080028d0 <_fini>:
 80028d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028d2:	bf00      	nop
 80028d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028d6:	bc08      	pop	{r3}
 80028d8:	469e      	mov	lr, r3
 80028da:	4770      	bx	lr
